16
{"last_modification_time":1736868148,"language":2,"import_file":"c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/mainmonitorthread.cpp","args_hash":8775391488917436901,"includes":[{"line":34,"resolved_path":"c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdarg.h"}],"dependencies":["c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/mainmonitorthread.cpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysmac.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/windows.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/mem.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_stddef.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdarg.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/windef.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/minwindef.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/specstrings.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/sal.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/driverspecs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winnt.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/ctype.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/mbctype.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/kernelspecs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/guiddef.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/string.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_str.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/locale.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_loc.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/processenv.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/fileapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/debugapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/utilapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/handleapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/errhandlingapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/fibersapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/namedpipeapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/profileapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/heapapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ioapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/synchapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/interlockedapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/processthreadsapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/sysinfoapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/memoryapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/enclaveapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/threadpoollegacyapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/threadpoolapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/jobapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/jobapi2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wow64apiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/libloaderapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/securitybaseapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/namespaceapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/systemtopologyapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/processtopologyapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/securityappcontainer.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/realtimeapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winerror.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/timezoneapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wingdi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winuser.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/tvout.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winnls.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/datetimeapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/stringapiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wincon.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wincontypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/consoleapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/consoleapi2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/consoleapi3.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winver.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/verrsrc.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winreg.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/reason.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winnetwk.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wnnc.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dde.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ddeml.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dlgs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/lzexpand.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mmsystem.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mmsyscom.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mciapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mmiscapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mmiscapi2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/playsoundapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mmeapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/timeapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/joystickapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/nb30.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpc.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcdce.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcdcep.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcnsi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcnterr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcasync.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shellapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winperf.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winsock2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ws2def.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/qos.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wincrypt.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/bcrypt.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ncrypt.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winefs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winscard.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wtypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcndr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcnsip.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/rpcsal.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wtypesbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winioctl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winspool.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/prsht.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ole2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/objbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/combaseapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdlib.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/search.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/errno.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/unknwnbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/objidlbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/limits.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_lim.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/cguid.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/coml2api.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/objidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/unknwn.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propidlbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/oaidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/urlmon.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/oleidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/servprov.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/msxml.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/oleauto.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/commdlg.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/stralign.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winsvc.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/imm.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/delayimp.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/basetyps.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/memory","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xmemory","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xmemory0","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstdint","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/yvals.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstdlib","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/limits","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/ymath.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cfloat","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/float.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/climits","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cmath","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/math.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xtgmath.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xtr1common","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstddef","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stddef.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cwchar","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/wchar.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/tchar.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xstddef","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/initializer_list","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/new","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/exception","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xutility","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/utility","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/iosfwd","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstdio","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdio.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstring","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/type_traits","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/execution","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xiter","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xscan","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xparallel.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xthreadpool.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/atomic","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xatomic.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xatomic0.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/typeinfo","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/typeinfo.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysclass.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/iostream","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/istream","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/ostream","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/ios","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xlocnum","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/streambuf","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xiosbase","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xlocale","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/stdexcept","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xstring","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xstring_view","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xmemory1","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xlocinfo","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cctype","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/clocale","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/ctime","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/time.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xlocinfo.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/system_error","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cerrno","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/ustring.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.internal.strhlpr.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysinit.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/string_view","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/string","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/dstring.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/wstring.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/systobj.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/functional","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/tuple","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xfunctional","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xfunctional2","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysdyn.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/iterator","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cassert","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/assert.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysvari.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/autoargs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysiterator.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/mainmonitorthread.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.classes.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.windows.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.types.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/systemtypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ocidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.uitypes.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wintrust.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wtsapi32.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.messages.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.generics.defaults.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.typinfo.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.variants.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.sysutils.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.sysconst.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.generics.collections.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.rtti.hpp","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_system.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/basepch0.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.controls.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.multimon.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.graphics.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.wincodec.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.activex.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/olectl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/docobj.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/comcat.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dispex.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/objsafe.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propvarutil.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shtypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shlwapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wincodec.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dxgitype.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/intsafe.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dcommon.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.menus.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.contnrs.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.imglist.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.commctrl.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/commctrl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dpa_dsa.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.imagelist.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.rtlconsts.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.actnlist.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.actions.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.imm.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.syncobjs.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.timespan.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.forms.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.messaging.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.helpintfs.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.dwmapi.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.uxtheme.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/uxtheme.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dwmapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.themes.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.graphutil.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.win.taskbarcore.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.win.taskbar.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.shlobj.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.shellapi.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.winsock2.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.qos.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.ipexport.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ipexport.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.regstr.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/regstr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.wininet.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/wininet.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.urlmon.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.objectarray.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/objectarray.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.propsys.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.structuredquerycondition.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/structuredquerycondition.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propsys.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.msxmlintf.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/msxml2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shlguid.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/isguids.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/exdisp.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shldisp.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/knownfolders.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shlobj.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shobjidl.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shobjidl_core.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/sherrors.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shlobj_core.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.shellscaling.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/shellscalingapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.dialogs.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.commdlg.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.printers.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.winspool.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.stdctrls.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.comctrls.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.richedit.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/richedit.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.toolwin.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.extctrls.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.mask.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.maskutils.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.listactns.hpp","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_list.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/list","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/algorithm","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/sysconfmgr.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/defs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/inifiles.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.inifiles.hpp","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/utils.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/sstream","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/vector","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/xml.xmldoc.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/xml.xmldom.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/xml.xmlconst.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/xml.xmlintf.hpp","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/portprocthread.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_port.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/comport.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/classes.hpp","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/databasemgr.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_sensor.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/protocol_211.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/protocol_and3.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/protocol_modbus_rtu.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/datastream_ind3.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/datastream.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/bbfmgr.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/chartthread.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.chart.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.teeprocs.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcl.clipbrd.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.mmsystem.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.tecanvas.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.math.vectors.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.teengine.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.teegdiplus.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.gdipapi.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.directdraw.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ddraw.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dvp.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.math.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplus.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusmem.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusenums.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplustypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusinit.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluspixelformats.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluscolor.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusmetaheader.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusimaging.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluscolormatrix.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusgpstubs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusheaders.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusflat.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusimageattributes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusmatrix.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusbrush.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluspen.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusstringformat.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluspath.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluslinecaps.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusgraphics.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusmetafile.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdipluscachedbitmap.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusregion.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusfontcollection.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusfontfamily.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusfont.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusbitmap.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/gdiplusimagecodec.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/winapi.gdipobj.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.series.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/system.uiconsts.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/vcl/vcltee.teespline.hpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdint.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/excpt.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/basetsd.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ktmtypes.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/minwinbase.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/inaddr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dpapi.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winsmcrd.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/mcx.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xxexception","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xxatomic","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/systdate.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/syscurr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/syscomp.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/systvar.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/sysopen.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/rtl/systemrtti.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dxgiformat.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/dxgicommon.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/in6addr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/propkeydef.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xheap","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_list_impl.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/gl_time_utils.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/protocol.h","c:/prj/gorizont/rad studio c++ builder/gorizontlab/gl_1/modbus_tiny.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/winapifamily.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/sdkddkver.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_defs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_null.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/concurrencysal.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/specstrings_strict.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/sdv_driverspecs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/no_sal2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/pshpack4.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/poppack.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/pshpack2.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/pshpack8.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/pshpack1.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/apiset.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/apisetcconv.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/cderr.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/sdk/ime_cmodes.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xkeycheck.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_nfile.h"],"skipped_by_preprocessor":["112:2-114:7","115:2-117:7","215:2-218:7","290:2-297:6","300:2-303:7","311:2-313:7","4416:2-4418:7","5086:2-5088:6","6450:2-6458:7","10516:2-10535:7","10895:2-10897:7","10899:2-10908:7","10943:2-10945:6","11036:2-12861:7"],"types":[{"id":0,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,25,51,52,92,101],"uses":[]},{"id":1,"usr":5325538010885492392,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["272:16-272:23|-1|1|4"]},{"id":2,"usr":15474976488428305960,"detailed_name":"sqlite3","short_name_offset":0,"short_name_size":7,"kind":252,"hover":"typedef struct sqlite3 sqlite3","comments":"\n CAPI3REF: Database Connection Handle\n KEYWORDS: {database connection} {database connections}\n\n Each open SQLite database is represented by a pointer to an instance of\n the opaque structure named \"sqlite3\".  It is useful to think of an sqlite3\n pointer as an object.  The [sqlite3_open()], [sqlite3_open16()], and\n [sqlite3_open_v2()] interfaces are its constructors, and [sqlite3_close()]\n and [sqlite3_close_v2()] are its destructors.  There are many other\n interfaces (such as\n [sqlite3_prepare_v2()], [sqlite3_create_function()], and\n [sqlite3_busy_timeout()] to name but three) that are methods on an\n sqlite3 object.","declarations":[],"spell":"272:24-272:31|-1|1|2","extent":"272:1-272:31|-1|1|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["272:24-272:31|-1|1|4","353:30-353:37|-1|1|4","354:33-354:40|-1|1|4","428:3-428:10|-1|1|4","1716:34-1716:41|-1|1|4","2558:46-2558:53|-1|1|4","2620:52-2620:59|-1|1|4","2630:47-2630:54|-1|1|4","2695:32-2695:39|-1|1|4","2696:44-2696:51|-1|1|4","2737:38-2737:45|-1|1|4","2738:50-2738:57|-1|1|4","2779:35-2779:42|-1|1|4","2780:39-2780:46|-1|1|4","2877:37-2877:44|-1|1|4","2900:37-2900:44|-1|1|4","2976:3-2976:10|-1|1|4","3251:3-3251:10|-1|1|4","3358:50-3358:57|-1|1|4","3360:52-3360:59|-1|1|4","3452:3-3452:10|-1|1|4","3497:42-3497:49|-1|1|4","3779:3-3779:10|-1|1|4","3783:3-3783:10|-1|1|4","3787:3-3787:10|-1|1|4","4030:32-4030:39|-1|1|4","4031:41-4031:48|-1|1|4","4032:39-4032:46|-1|1|4","4033:41-4033:48|-1|1|4","4035:37-4035:44|-1|1|4","4103:30-4103:37|-1|1|4","4329:3-4329:10|-1|1|4","4336:3-4336:10|-1|1|4","4343:3-4343:10|-1|1|4","4351:3-4351:10|-1|1|4","4358:3-4358:10|-1|1|4","4365:3-4365:10|-1|1|4","5509:3-5509:10|-1|1|4","5519:3-5519:10|-1|1|4","5529:3-5529:10|-1|1|4","5540:3-5540:10|-1|1|4","5963:12-5963:19|-1|1|4","6088:41-6088:48|-1|1|4","6089:39-6089:46|-1|1|4","6390:3-6390:10|-1|1|4","6397:3-6397:10|-1|1|4","6405:3-6405:10|-1|1|4","6440:3-6440:10|-1|1|4","6442:17-6442:24|-1|1|4","6445:3-6445:10|-1|1|4","6447:17-6447:24|-1|1|4","6638:39-6638:46|-1|1|4","6651:12-6651:19|-1|1|4","6673:40-6673:47|-1|1|4","6705:49-6705:56|-1|1|4","6715:36-6715:43|-1|1|4","6733:34-6733:41|-1|1|4","6782:44-6782:51|-1|1|4","6831:38-6831:45|-1|1|4","6832:40-6832:47|-1|1|4","6893:3-6893:10|-1|1|4","6956:3-6956:10|-1|1|4","7035:42-7035:49|-1|1|4","7186:3-7186:10|-1|1|4","7242:3-7242:10|-1|1|4","7273:46-7273:53|-1|1|4","7359:18-7359:25|-1|1|4","7362:19-7362:26|-1|1|4","7635:3-7635:10|-1|1|4","7641:3-7641:10|-1|1|4","7661:3-7661:10|-1|1|4","7720:37-7720:44|-1|1|4","7739:42-7739:49|-1|1|4","7839:3-7839:10|-1|1|4","8291:44-8291:51|-1|1|4","8334:37-8334:44|-1|1|4","8498:41-8498:48|-1|1|4","8723:34-8723:41|-1|1|4","9389:3-9389:10|-1|1|4","9391:3-9391:10|-1|1|4","9515:3-9515:10|-1|1|4","9631:3-9631:10|-1|1|4","9632:17-9632:24|-1|1|4","9665:43-9665:50|-1|1|4","9687:39-9687:46|-1|1|4","9782:3-9782:10|-1|1|4","9821:36-9821:43|-1|1|4","9909:41-9909:48|-1|1|4","10418:38-10418:45|-1|1|4","10548:37-10548:44|-1|1|4","10626:3-10626:10|-1|1|4","10675:3-10675:10|-1|1|4","10746:61-10746:68|-1|1|4","10792:3-10792:10|-1|1|4","10858:3-10858:10|-1|1|4","10956:3-10956:10|-1|1|4","10982:3-10982:10|-1|1|4"]},{"id":3,"usr":19,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":4,"usr":6839292009854979829,"detailed_name":"sqlite_int64","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef __int64 sqlite_int64","comments":"","declarations":[],"spell":"298:19-298:31|-1|1|2","extent":"298:3-298:31|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["298:19-298:31|-1|1|4","304:9-304:21|-1|1|4"]},{"id":5,"usr":11,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":6,"usr":6139489007076807462,"detailed_name":"sqlite_uint64","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef unsigned __int64 sqlite_uint64","comments":"","declarations":[],"spell":"299:28-299:41|-1|1|2","extent":"299:3-299:41|-1|1|0","alias_of":5,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["299:28-299:41|-1|1|4","305:9-305:22|-1|1|4"]},{"id":7,"usr":18169246194022174028,"detailed_name":"sqlite3_int64","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef sqlite_int64 sqlite3_int64","comments":"","declarations":[],"spell":"304:22-304:35|-1|1|2","extent":"304:1-304:35|-1|1|0","alias_of":4,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[96,154],"uses":["304:22-304:35|-1|1|4","849:48-849:61|-1|1|4","850:55-850:68|-1|1|4","851:35-851:48|-1|1|4","853:35-853:48|-1|1|4","866:32-866:45|-1|1|4","867:34-867:47|-1|1|4","1506:42-1506:55|-1|1|4","2620:12-2620:25|-1|1|4","2630:56-2630:69|-1|1|4","2696:12-2696:25|-1|1|4","2738:12-2738:25|-1|1|4","3135:12-3135:25|-1|1|4","3136:12-3136:25|-1|1|4","3860:12-3860:25|-1|1|4","3860:75-3860:88|-1|1|4","4740:55-4740:68|-1|1|4","5309:12-5309:25|-1|1|4","5687:69-5687:82|-1|1|4","5688:29-5688:42|-1|1|4","5822:12-5822:25|-1|1|4","6266:56-6266:69|-1|1|4","6957:49-6957:62|-1|1|4","7101:12-7101:25|-1|1|4","7101:52-7101:65|-1|1|4","7102:12-7102:25|-1|1|4","7102:52-7102:65|-1|1|4","7375:39-7375:52|-1|1|4","7376:57-7376:70|-1|1|4","7528:3-7528:16|-1|1|4","7843:3-7843:16|-1|1|4","7871:52-7871:65|-1|1|4","8616:3-8616:16|-1|1|4","8617:3-8617:16|-1|1|4","10794:3-10794:16|-1|1|4","10861:3-10861:16|-1|1|4","10862:3-10862:16|-1|1|4","11010:3-11010:16|-1|1|4","13219:34-13219:47|-1|1|4","13220:51-13220:64|-1|1|4","13234:3-13234:16|-1|1|4"]},{"id":8,"usr":9180302406860453138,"detailed_name":"sqlite3_uint64","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef sqlite_uint64 sqlite3_uint64","comments":"","declarations":[],"spell":"305:23-305:37|-1|1|2","extent":"305:1-305:37|-1|1|0","alias_of":6,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[98],"uses":["305:23-305:37|-1|1|4","3106:35-3106:49|-1|1|4","3108:43-3108:57|-1|1|4","3110:12-3110:26|-1|1|4","3361:38-3361:52|-1|1|4","4736:69-4736:83|-1|1|4","4744:69-4744:83|-1|1|4","4749:60-4749:74|-1|1|4","6258:28-6258:42|-1|1|4","6269:69-6269:83|-1|1|4","6277:60-6277:74|-1|1|4","7532:3-7532:17|-1|1|4"]},{"id":9,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":10,"usr":8650652028331813000,"detailed_name":"sqlite3_callback","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef int (*sqlite3_callback)(void*,int,char**, char**)","comments":"\n The type for a callback function.\n This is legacy and deprecated.  It is included for historical\n compatibility and is not documented.","declarations":[],"spell":"361:15-361:31|-1|1|2","extent":"361:1-361:58|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["361:15-361:31|-1|1|4"]},{"id":11,"usr":10583503618131034090,"detailed_name":"sqlite3_file","short_name_offset":0,"short_name_size":12,"kind":23,"hover":"","comments":"","declarations":[],"spell":"739:8-739:20|-1|1|2","extent":"739:1-741:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[1],"instances":[],"uses":["738:16-738:28|-1|1|4"]},{"id":12,"usr":3132093874177638970,"detailed_name":"sqlite3_file","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef struct sqlite3_file sqlite3_file","comments":"\n CAPI3REF: OS Interface Open File Handle\n\n An [sqlite3_file] object represents an open file in the\n [sqlite3_vfs | OS interface layer].  Individual OS interface\n implementations will\n want to subclass this object by appending additional fields\n for their own use.  The pMethods entry is a pointer to an\n [sqlite3_io_methods] object that defines methods for performing\n I/O operations on the open file.","declarations":[],"spell":"738:29-738:41|-1|1|2","extent":"738:1-738:41|-1|1|0","alias_of":11,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["738:29-738:41|-1|1|4","848:17-848:29|-1|1|4","849:16-849:28|-1|1|4","850:17-850:29|-1|1|4","851:20-851:32|-1|1|4","852:16-852:28|-1|1|4","853:20-853:32|-1|1|4","854:16-854:28|-1|1|4","855:18-855:30|-1|1|4","856:29-856:41|-1|1|4","857:23-857:35|-1|1|4","858:22-858:34|-1|1|4","859:33-859:45|-1|1|4","861:18-861:30|-1|1|4","862:19-862:31|-1|1|4","863:23-863:35|-1|1|4","864:20-864:32|-1|1|4","866:17-866:29|-1|1|4","867:19-867:31|-1|1|4","1489:54-1489:66|-1|1|4","3911:12-3911:24|-1|1|4"]},{"id":13,"usr":2930819700177642454,"detailed_name":"sqlite3_io_methods","short_name_offset":0,"short_name_size":18,"kind":23,"hover":"","comments":"","declarations":[],"spell":"846:8-846:26|-1|1|2","extent":"846:1-870:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"instances":[1],"uses":["740:16-740:34|-1|1|4","845:16-845:34|-1|1|4"]},{"id":14,"usr":942112818154129662,"detailed_name":"sqlite3_io_methods","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef struct sqlite3_io_methods sqlite3_io_methods","comments":"\n CAPI3REF: OS Interface File Virtual Methods Object\n\n Every file opened by the [sqlite3_vfs.xOpen] method populates an\n [sqlite3_file] object (or, more commonly, a subclass of the\n [sqlite3_file] object) with a pointer to an instance of this object.\n This object defines the methods used to perform various operations\n against the open file represented by the [sqlite3_file] object.\n\n If the [sqlite3_vfs.xOpen] method sets the sqlite3_file.pMethods element\n to a non-NULL pointer, then the sqlite3_io_methods.xClose method\n may be invoked even if the [sqlite3_vfs.xOpen] reported that it failed.  The\n only way to prevent a call to xClose following a failed [sqlite3_vfs.xOpen]\n is for the [sqlite3_vfs.xOpen] to set the sqlite3_file.pMethods element\n to NULL.\n\n The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or\n [SQLITE_SYNC_FULL].  The first choice is the normal fsync().\n The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY]\n flag may be ORed in to indicate that only the data of the file\n and not its inode needs to be synced.\n\n The integer values to xLock() and xUnlock() are one of\n <ul>\n <li> [SQLITE_LOCK_NONE],\n <li> [SQLITE_LOCK_SHARED],\n <li> [SQLITE_LOCK_RESERVED],\n <li> [SQLITE_LOCK_PENDING], or\n <li> [SQLITE_LOCK_EXCLUSIVE].\n </ul>\n xLock() upgrades the database file lock.  In other words, xLock() moves the\n database file lock in the direction NONE toward EXCLUSIVE. The argument to\n xLock() is always one of SHARED, RESERVED, PENDING, or EXCLUSIVE, never\n SQLITE_LOCK_NONE.  If the database file lock is already at or above the\n requested lock, then the call to xLock() is a no-op.\n xUnlock() downgrades the database file lock to either SHARED or NONE.\n If the lock is already at or below the requested lock state, then the call\n to xUnlock() is a no-op.\n The xCheckReservedLock() method checks whether any database connection,\n either in this process or in some other process, is holding a RESERVED,\n PENDING, or EXCLUSIVE lock on the file.  It returns, via its output\n pointer parameter, true if such a lock exists and false otherwise.\n\n The xFileControl() method is a generic interface that allows custom\n VFS implementations to directly control an open file using the\n [sqlite3_file_control()] interface.  The second \"op\" argument is an\n integer opcode.  The third argument is a generic pointer intended to\n point to a structure that may contain arguments or space in which to\n write return values.  Potential uses for xFileControl() might be\n functions to enable blocking locks with timeouts, to change the\n locking strategy (for example to use dot-file locks), to inquire\n about the status of a lock, or to break stale locks.  The SQLite\n core reserves all opcodes less than 100 for its own use.\n A [file control opcodes | list of opcodes] less than 100 is available.\n Applications that define a custom xFileControl method should use opcodes\n greater than 100 to avoid conflicts.  VFS implementations should\n return [SQLITE_NOTFOUND] for file control opcodes that they do not\n recognize.\n\n The xSectorSize() method returns the sector size of the\n device that underlies the file.  The sector size is the\n minimum write that can be performed without disturbing\n other bytes in the file.  The xDeviceCharacteristics()\n method returns a bit vector describing behaviors of the\n underlying device:\n\n <ul>\n <li> [SQLITE_IOCAP_ATOMIC]\n <li> [SQLITE_IOCAP_ATOMIC512]\n <li> [SQLITE_IOCAP_ATOMIC1K]\n <li> [SQLITE_IOCAP_ATOMIC2K]\n <li> [SQLITE_IOCAP_ATOMIC4K]\n <li> [SQLITE_IOCAP_ATOMIC8K]\n <li> [SQLITE_IOCAP_ATOMIC16K]\n <li> [SQLITE_IOCAP_ATOMIC32K]\n <li> [SQLITE_IOCAP_ATOMIC64K]\n <li> [SQLITE_IOCAP_SAFE_APPEND]\n <li> [SQLITE_IOCAP_SEQUENTIAL]\n <li> [SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN]\n <li> [SQLITE_IOCAP_POWERSAFE_OVERWRITE]\n <li> [SQLITE_IOCAP_IMMUTABLE]\n <li> [SQLITE_IOCAP_BATCH_ATOMIC]\n <li> [SQLITE_IOCAP_SUBPAGE_READ]\n </ul>\n\n The SQLITE_IOCAP_ATOMIC property means that all writes of\n any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values\n mean that writes of blocks that are nnn bytes in size and\n are aligned to an address which is an integer multiple of\n nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means\n that when data is appended to a file, the data is appended\n first then the size of the file is extended, never the other\n way around.  The SQLITE_IOCAP_SEQUENTIAL property means that\n information is written to disk in the same order as calls\n to xWrite().\n\n If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill\n in the unread portions of the buffer with zeros.  A VFS that\n fails to zero-fill short reads might seem to work.  However,\n failure to zero-fill short reads will eventually lead to\n database corruption.","declarations":[],"spell":"845:35-845:53|-1|1|2","extent":"845:1-845:53|-1|1|0","alias_of":13,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["845:35-845:53|-1|1|4"]},{"id":15,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,21,22,23,53,78,80,83,84,86,89,91,93,94,97,100,114,140,145,151,152,153,156,157,162,186,193],"uses":[]},{"id":16,"usr":16396739826704086051,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1279:16-1279:29|-1|1|4"]},{"id":17,"usr":7772619972510393324,"detailed_name":"sqlite3_mutex","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef struct sqlite3_mutex sqlite3_mutex","comments":"\n CAPI3REF: Mutex Handle\n\n The mutex module within SQLite defines [sqlite3_mutex] to be an\n abstract type for a mutex object.  The SQLite core never looks\n at the internal representation of an [sqlite3_mutex].  It only\n deals with pointers to the [sqlite3_mutex] object.\n\n Mutexes are created using [sqlite3_mutex_alloc()].","declarations":[],"spell":"1279:30-1279:43|-1|1|2","extent":"1279:1-1279:43|-1|1|0","alias_of":16,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1279:30-1279:43|-1|1|4","8132:12-8132:25|-1|1|4","8133:36-8133:49|-1|1|4","8134:37-8134:50|-1|1|4","8135:34-8135:47|-1|1|4","8136:37-8136:50|-1|1|4","8207:3-8207:16|-1|1|4","8208:22-8208:35|-1|1|4","8209:23-8209:36|-1|1|4","8210:20-8210:33|-1|1|4","8211:23-8211:36|-1|1|4","8212:21-8212:34|-1|1|4","8213:24-8213:37|-1|1|4","8246:35-8246:48|-1|1|4","8247:38-8247:51|-1|1|4","8291:12-8291:25|-1|1|4"]},{"id":18,"usr":13815374200151613632,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1289:16-1289:36|-1|1|4"]},{"id":19,"usr":844342179940034102,"detailed_name":"sqlite3_api_routines","short_name_offset":0,"short_name_size":20,"kind":252,"hover":"typedef struct sqlite3_api_routines sqlite3_api_routines","comments":"\n CAPI3REF: Loadable Extension Thunk\n\n A pointer to the opaque sqlite3_api_routines structure is passed as\n the third parameter to entry points of [loadable extensions].  This\n structure must be typedefed in order to work around compiler warnings\n on some platforms.","declarations":[],"spell":"1289:37-1289:57|-1|1|2","extent":"1289:1-1289:57|-1|1|0","alias_of":18,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1289:37-1289:57|-1|1|4"]},{"id":20,"usr":3327758092298577986,"detailed_name":"sqlite3_filename","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef const char *sqlite3_filename","comments":"\n CAPI3REF: File Name\n\n Type [sqlite3_filename] is used by SQLite to pass filenames to the\n xOpen method of a [VFS]. It may be cast to (const char*) and treated\n as a normal, nul-terminated, UTF-8 buffer containing the filename, but\n may also be passed to special APIs such as:\n\n <ul>\n <li>  sqlite3_filename_database()\n <li>  sqlite3_filename_journal()\n <li>  sqlite3_filename_wal()\n <li>  sqlite3_uri_parameter()\n <li>  sqlite3_uri_boolean()\n <li>  sqlite3_uri_int64()\n <li>  sqlite3_uri_key()\n </ul>","declarations":[],"spell":"1309:21-1309:37|-1|1|2","extent":"1309:1-1309:37|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1309:21-1309:37|-1|1|4","1489:30-1489:46|-1|1|4","3858:46-3858:62|-1|1|4","3859:36-3859:52|-1|1|4","3860:44-3860:60|-1|1|4","3861:40-3861:56|-1|1|4","3890:50-3890:66|-1|1|4","3891:49-3891:65|-1|1|4","3892:45-3892:61|-1|1|4","3958:12-3958:28|-1|1|4","3965:39-3965:55|-1|1|4","6705:12-6705:28|-1|1|4"]},{"id":21,"usr":10812984793284621692,"detailed_name":"sqlite3_vfs","short_name_offset":0,"short_name_size":11,"kind":23,"hover":"","comments":"","declarations":[],"spell":"1482:8-1482:19|-1|1|2","extent":"1482:1-1519:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"instances":[24],"uses":["1480:16-1480:27|-1|1|4","1486:3-1486:14|-1|1|4","1489:16-1489:27|-1|1|4","1491:18-1491:29|-1|1|4","1492:18-1492:29|-1|1|4","1493:24-1493:35|-1|1|4","1494:20-1494:31|-1|1|4","1495:20-1495:31|-1|1|4","1496:20-1496:31|-1|1|4","1497:20-1497:31|-1|1|4","1498:22-1498:33|-1|1|4","1499:17-1499:28|-1|1|4","1500:23-1500:34|-1|1|4","1501:24-1501:35|-1|1|4","1506:28-1506:39|-1|1|4","1511:25-1511:36|-1|1|4","1512:41-1512:52|-1|1|4","1513:34-1513:45|-1|1|4"]},{"id":22,"usr":6853617899809654889,"detailed_name":"sqlite3_vfs","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef struct sqlite3_vfs sqlite3_vfs","comments":"\n CAPI3REF: OS Interface Object\n\n An instance of the sqlite3_vfs object defines the interface between\n the SQLite core and the underlying operating system.  The \"vfs\"\n in the name of the object stands for \"virtual file system\".  See\n the [VFS | VFS documentation] for further information.\n\n The VFS interface is sometimes extended by adding new methods onto\n the end.  Each time such an extension occurs, the iVersion field\n is incremented.  The iVersion value started out as 1 in\n SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2\n with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased\n to 3 with SQLite [version 3.7.6] on [dateof:3.7.6].  Additional fields\n may be appended to the sqlite3_vfs object and the iVersion value\n may increase again in future versions of SQLite.\n Note that due to an oversight, the structure\n of the sqlite3_vfs object changed in the transition from\n SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0]\n and yet the iVersion field was not increased.\n\n The szOsFile field is the size of the subclassed [sqlite3_file]\n structure used by this VFS.  mxPathname is the maximum length of\n a pathname in this VFS.\n\n Registered sqlite3_vfs objects are kept on a linked list formed by\n the pNext pointer.  The [sqlite3_vfs_register()]\n and [sqlite3_vfs_unregister()] interfaces manage this list\n in a thread-safe way.  The [sqlite3_vfs_find()] interface\n searches the list.  Neither the application code nor the VFS\n implementation should use the pNext pointer.\n\n The pNext field is the only field in the sqlite3_vfs\n structure that SQLite will ever modify.  SQLite will only access\n or modify this field while holding a particular static mutex.\n The application should never modify anything within the sqlite3_vfs\n object once the object has been registered.\n\n The zName field holds the name of the VFS module.  The name must\n be unique across all VFS modules.\n\n [[sqlite3_vfs.xOpen]]\n ^SQLite guarantees that the zFilename parameter to xOpen\n is either a NULL pointer or string obtained\n from xFullPathname() with an optional suffix added.\n ^If a suffix is added to the zFilename parameter, it will\n consist of a single \"-\" character followed by no more than\n 11 alphanumeric and/or \"-\" characters.\n ^SQLite further guarantees that\n the string will be valid and unchanged until xClose() is\n called. Because of the previous sentence,\n the [sqlite3_file] can safely store a pointer to the\n filename if it needs to remember the filename for some reason.\n If the zFilename parameter to xOpen is a NULL pointer then xOpen\n must invent its own temporary name for the file.  ^Whenever the\n xFilename parameter is NULL it will also be the case that the\n flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].\n\n The flags argument to xOpen() includes all bits set in\n the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]\n or [sqlite3_open16()] is used, then flags includes at least\n [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE].\n If xOpen() opens a file read-only then it sets *pOutFlags to\n include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.\n\n ^(SQLite will also add one of the following flags to the xOpen()\n call, depending on the object being opened:\n\n <ul>\n <li>  [SQLITE_OPEN_MAIN_DB]\n <li>  [SQLITE_OPEN_MAIN_JOURNAL]\n <li>  [SQLITE_OPEN_TEMP_DB]\n <li>  [SQLITE_OPEN_TEMP_JOURNAL]\n <li>  [SQLITE_OPEN_TRANSIENT_DB]\n <li>  [SQLITE_OPEN_SUBJOURNAL]\n <li>  [SQLITE_OPEN_SUPER_JOURNAL]\n <li>  [SQLITE_OPEN_WAL]\n </ul>)^\n\n The file I/O implementation can use the object type flags to\n change the way it deals with files.  For example, an application\n that does not care about crash recovery or rollback might make\n the open of a journal file a no-op.  Writes to this journal would\n also be no-ops, and any attempt to read the journal would return\n SQLITE_IOERR.  Or the implementation might recognize that a database\n file will be doing page-aligned sector reads and writes in a random\n order and set up its I/O subsystem accordingly.\n\n SQLite might also add one of the following flags to the xOpen method:\n\n <ul>\n <li> [SQLITE_OPEN_DELETEONCLOSE]\n <li> [SQLITE_OPEN_EXCLUSIVE]\n </ul>\n\n The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be\n deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE]\n will be set for TEMP databases and their journals, transient\n databases, and subjournals.\n\n ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction\n with the [SQLITE_OPEN_CREATE] flag, which are both directly\n analogous to the O_EXCL and O_CREAT flags of the POSIX open()\n API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the\n SQLITE_OPEN_CREATE, is used to indicate that file should always\n be created, and that it is an error if it already exists.\n It is <i>not</i> used to indicate the file should be opened\n for exclusive access.\n\n ^At least szOsFile bytes of memory are allocated by SQLite\n to hold the [sqlite3_file] structure passed as the third\n argument to xOpen.  The xOpen method does not have to\n allocate the structure; it should just fill it in.  Note that\n the xOpen method must set the sqlite3_file.pMethods to either\n a valid [sqlite3_io_methods] object or to NULL.  xOpen must do\n this even if the open fails.  SQLite expects that the sqlite3_file.pMethods\n element will be valid after xOpen returns regardless of the success\n or failure of the xOpen call.\n\n [[sqlite3_vfs.xAccess]]\n ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]\n to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to\n test whether a file is readable and writable, or [SQLITE_ACCESS_READ]\n to test whether a file is at least readable.  The SQLITE_ACCESS_READ\n flag is never actually used and is not implemented in the built-in\n VFSes of SQLite.  The file is named by the second argument and can be a\n directory. The xAccess method returns [SQLITE_OK] on success or some\n non-zero error code if there is an I/O error or if the name of\n the file given in the second argument is illegal.  If SQLITE_OK\n is returned, then non-zero or zero is written into *pResOut to indicate\n whether or not the file is accessible.\n\n ^SQLite will always allocate at least mxPathname+1 bytes for the\n output buffer xFullPathname.  The exact size of the output buffer\n is also passed as a parameter to both  methods. If the output buffer\n is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is\n handled as a fatal error by SQLite, vfs implementations should endeavor\n to prevent this by setting mxPathname to a sufficiently large value.\n\n The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64()\n interfaces are not strictly a part of the filesystem, but they are\n included in the VFS structure for completeness.\n The xRandomness() function attempts to return nBytes bytes\n of good-quality randomness into zOut.  The return value is\n the actual number of bytes of randomness obtained.\n The xSleep() method causes the calling thread to sleep for at\n least the number of microseconds given.  ^The xCurrentTime()\n method returns a Julian Day Number for the current date and time as\n a floating point value.\n ^The xCurrentTimeInt64() method returns, as an integer, the Julian\n Day Number multiplied by 86400000 (the number of milliseconds in\n a 24-hour day).\n ^SQLite will use the xCurrentTimeInt64() method to get the current\n date and time if that method is available (if iVersion is 2 or\n greater and the function pointer is not NULL) and will fall back\n to xCurrentTime() if xCurrentTimeInt64() is unavailable.\n\n ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces\n are not used by the SQLite core.  These optional interfaces are provided\n by some VFSes to facilitate testing of the VFS code. By overriding\n system calls with functions under its control, a test program can\n simulate faults and error conditions that would otherwise be difficult\n or impossible to induce.  The set of system calls that can be overridden\n varies from one VFS to another, and from one version of the same VFS to the\n next.  Applications that use these interfaces must be prepared for any\n or all of these interfaces to be NULL or for their behavior to change\n from one release to the next.  Applications must not attempt to access\n any of these methods if the iVersion of the VFS is less than 3.","declarations":[],"spell":"1480:28-1480:39|-1|1|2","extent":"1480:1-1480:39|-1|1|0","alias_of":21,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1480:28-1480:39|-1|1|4","8012:12-8012:23|-1|1|4","8013:37-8013:48|-1|1|4","8014:39-8014:50|-1|1|4"]},{"id":23,"usr":17204389740015354607,"detailed_name":"sqlite3_syscall_ptr","short_name_offset":0,"short_name_size":19,"kind":252,"hover":"typedef void (*sqlite3_syscall_ptr)(void)","comments":"","declarations":[],"spell":"1481:16-1481:35|-1|1|2","extent":"1481:1-1481:42|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1481:16-1481:35|-1|1|4","1511:58-1511:77|-1|1|4","1512:3-1512:22|-1|1|4"]},{"id":24,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[26,50,112,113,115,127,139,142,144,147],"uses":[]},{"id":25,"usr":42141700817639553,"detailed_name":"sqlite3_mem_methods","short_name_offset":0,"short_name_size":19,"kind":23,"hover":"","comments":"","declarations":[],"spell":"1782:8-1782:27|-1|1|2","extent":"1782:1-1791:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[43,44,45,46,47,48,49,50],"instances":[],"uses":["1781:16-1781:35|-1|1|4"]},{"id":26,"usr":10001259028853875124,"detailed_name":"sqlite3_mem_methods","short_name_offset":0,"short_name_size":19,"kind":252,"hover":"typedef struct sqlite3_mem_methods sqlite3_mem_methods","comments":"\n CAPI3REF: Memory Allocation Routines\n\n An instance of this object defines the interface between SQLite\n and low-level memory allocation routines.\n\n This object is used in only one place in the SQLite interface.\n A pointer to an instance of this object is the argument to\n [sqlite3_config()] when the configuration option is\n [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].\n By creating an instance of this object\n and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC])\n during configuration, an application can specify an alternative\n memory allocation subsystem for SQLite to use for all of its\n dynamic memory needs.\n\n Note that SQLite comes with several [built-in memory allocators]\n that are perfectly adequate for the overwhelming majority of applications\n and that this object is only useful to a tiny minority of applications\n with specialized memory allocation requirements.  This object is\n also used during testing of SQLite in order to specify an alternative\n memory allocator that simulates memory out-of-memory conditions in\n order to verify that SQLite recovers gracefully from such\n conditions.\n\n The xMalloc, xRealloc, and xFree methods must work like the\n malloc(), realloc() and free() functions from the standard C library.\n ^SQLite guarantees that the second argument to\n xRealloc is always a value returned by a prior call to xRoundup.\n\n xSize should return the allocated size of a memory allocation\n previously obtained from xMalloc or xRealloc.  The allocated size\n is always at least as big as the requested size but may be larger.\n\n The xRoundup method returns what would be the allocated size of\n a memory allocation given a particular requested size.  Most memory\n allocators round up memory allocations at least to the next multiple\n of 8.  Some allocators round up to a larger multiple or to a power of 2.\n Every memory allocation request coming in through [sqlite3_malloc()]\n or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0,\n that causes the corresponding memory allocation to fail.\n\n The xInit method initializes the memory allocator.  For example,\n it might allocate any required mutexes or initialize internal data\n structures.  The xShutdown method is invoked (indirectly) by\n [sqlite3_shutdown()] and should deallocate any resources acquired\n by xInit.  The pAppData pointer is used as the only parameter to\n xInit and xShutdown.\n\n SQLite holds the [SQLITE_MUTEX_STATIC_MAIN] mutex when it invokes\n the xInit method, so the xInit method need not be threadsafe.  The\n xShutdown method is only called from [sqlite3_shutdown()] so it does\n not need to be threadsafe either.  For all other methods, SQLite\n holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the\n [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which\n it is by default) and so the methods are automatically serialized.\n However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other\n methods must be threadsafe or else make their own arrangements for\n serialization.\n\n SQLite will never invoke xInit() more than once without an intervening\n call to xShutdown().","declarations":[],"spell":"1781:36-1781:55|-1|1|2","extent":"1781:1-1781:55|-1|1|0","alias_of":25,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1781:36-1781:55|-1|1|4"]},{"id":27,"usr":48278838616049939,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["3026:48-3026:55|-1|1|4","3028:59-3028:66|-1|1|4","8548:73-8548:80|-1|1|4"]},{"id":28,"usr":2063595362533932653,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["4061:16-4061:28|-1|1|4"]},{"id":29,"usr":1606238621817327394,"detailed_name":"sqlite3_stmt","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef struct sqlite3_stmt sqlite3_stmt","comments":"\n CAPI3REF: Prepared Statement Object\n KEYWORDS: {prepared statement} {prepared statements}\n\n An instance of this object represents a single SQL statement that\n has been compiled into binary form and is ready to be evaluated.\n\n Think of each SQL statement as a separate computer program.  The\n original SQL text is source code.  A prepared statement object\n is the compiled object code.  All SQL must be converted into a\n prepared statement before it can be run.\n\n The life-cycle of a prepared statement object usually goes like this:\n\n <ol>\n <li> Create the prepared statement object using [sqlite3_prepare_v2()].\n <li> Bind values to [parameters] using the sqlite3_bind_*()\n      interfaces.\n <li> Run the SQL by calling [sqlite3_step()] one or more times.\n <li> Reset the prepared statement using [sqlite3_reset()] then go back\n      to step 2.  Do this zero or more times.\n <li> Destroy the object using [sqlite3_finalize()].\n </ol>","declarations":[],"spell":"4061:29-4061:41|-1|1|2","extent":"4061:1-4061:41|-1|1|0","alias_of":28,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["4061:29-4061:41|-1|1|4","4332:3-4332:15|-1|1|4","4339:3-4339:15|-1|1|4","4347:3-4347:15|-1|1|4","4354:3-4354:15|-1|1|4","4361:3-4361:15|-1|1|4","4369:3-4369:15|-1|1|4","4414:36-4414:48|-1|1|4","4415:39-4415:51|-1|1|4","4467:38-4467:50|-1|1|4","4479:39-4479:51|-1|1|4","4514:37-4514:49|-1|1|4","4535:34-4535:46|-1|1|4","4735:34-4735:46|-1|1|4","4736:36-4736:48|-1|1|4","4738:36-4738:48|-1|1|4","4739:33-4739:45|-1|1|4","4740:35-4740:47|-1|1|4","4741:34-4741:46|-1|1|4","4742:34-4742:46|-1|1|4","4743:36-4743:48|-1|1|4","4744:36-4744:48|-1|1|4","4746:35-4746:47|-1|1|4","4747:37-4747:49|-1|1|4","4748:38-4748:50|-1|1|4","4749:40-4749:52|-1|1|4","4770:45-4770:57|-1|1|4","4798:52-4798:64|-1|1|4","4816:45-4816:57|-1|1|4","4826:39-4826:51|-1|1|4","4842:37-4842:49|-1|1|4","4871:44-4871:56|-1|1|4","4872:46-4872:58|-1|1|4","4916:53-4916:65|-1|1|4","4917:55-4917:67|-1|1|4","4918:50-4918:62|-1|1|4","4919:52-4919:64|-1|1|4","4920:51-4920:63|-1|1|4","4921:53-4921:65|-1|1|4","4953:48-4953:60|-1|1|4","4954:50-4954:62|-1|1|4","5038:29-5038:41|-1|1|4","5059:35-5059:47|-1|1|4","5306:44-5306:56|-1|1|4","5307:41-5307:53|-1|1|4","5308:35-5308:47|-1|1|4","5309:47-5309:59|-1|1|4","5310:53-5310:65|-1|1|4","5311:46-5311:58|-1|1|4","5312:48-5312:60|-1|1|4","5313:37-5313:49|-1|1|4","5314:39-5314:51|-1|1|4","5315:36-5315:48|-1|1|4","5343:33-5343:45|-1|1|4","5382:30-5382:42|-1|1|4","5683:50-5683:62|-1|1|4","5684:60-5684:72|-1|1|4","5684:75-5684:87|-1|1|4","6651:39-6651:51|-1|1|4","6782:12-6782:24|-1|1|4","6782:58-6782:70|-1|1|4","8876:36-8876:48|-1|1|4","10357:3-10357:15|-1|1|4","10363:3-10363:15|-1|1|4","10385:47-10385:59|-1|1|4"]},{"id":30,"usr":11778180945312196997,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["4579:16-4579:29|-1|1|4"]},{"id":31,"usr":11109536171669871784,"detailed_name":"sqlite3_value","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef struct sqlite3_value sqlite3_value","comments":"\n CAPI3REF: Dynamically Typed Value Object\n KEYWORDS: {protected sqlite3_value} {unprotected sqlite3_value}\n\n SQLite uses the sqlite3_value object to represent all values\n that can be stored in a database table. SQLite uses dynamic typing\n for the values it stores.  ^Values stored in sqlite3_value objects\n can be integers, floating point values, strings, BLOBs, or NULL.\n\n An sqlite3_value object may be either \"protected\" or \"unprotected\".\n Some interfaces require a protected sqlite3_value.  Other interfaces\n will accept either a protected or an unprotected sqlite3_value.\n Every interface that accepts sqlite3_value arguments specifies\n whether or not it requires a protected sqlite3_value.  The\n [sqlite3_value_dup()] interface can be used to construct a new\n protected sqlite3_value from an unprotected sqlite3_value.\n\n The terms \"protected\" and \"unprotected\" refer to whether or not\n a mutex is held.  An internal mutex is held for a protected\n sqlite3_value object but no mutex is held for an unprotected\n sqlite3_value object.  If SQLite is compiled to be single-threaded\n (with [SQLITE_THREADSAFE=0] and with [sqlite3_threadsafe()] returning 0)\n or if SQLite is run in one of reduced mutex modes\n [SQLITE_CONFIG_SINGLETHREAD] or [SQLITE_CONFIG_MULTITHREAD]\n then there is no distinction between protected and unprotected\n sqlite3_value objects and they can be used interchangeably.  However,\n for maximum code portability it is recommended that applications\n still make the distinction between protected and unprotected\n sqlite3_value objects even when not strictly required.\n\n ^The sqlite3_value objects that are passed as parameters into the\n implementation of [application-defined SQL functions] are protected.\n ^The sqlite3_value objects returned by [sqlite3_vtab_rhs_value()]\n are protected.\n ^The sqlite3_value object returned by\n [sqlite3_column_value()] is unprotected.\n Unprotected sqlite3_value objects may only be used as arguments\n to [sqlite3_result_value()], [sqlite3_bind_value()], and\n [sqlite3_value_dup()].\n The [sqlite3_value_blob | sqlite3_value_type()] family of\n interfaces require protected sqlite3_value objects.","declarations":[],"spell":"4579:30-4579:43|-1|1|2","extent":"4579:1-4579:43|-1|1|0","alias_of":30,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[159],"uses":["4579:30-4579:43|-1|1|4","4746:61-4746:74|-1|1|4","5312:12-5312:25|-1|1|4","5514:38-5514:51|-1|1|4","5515:38-5515:51|-1|1|4","5524:38-5524:51|-1|1|4","5525:38-5525:51|-1|1|4","5534:38-5534:51|-1|1|4","5535:38-5535:51|-1|1|4","5545:38-5545:51|-1|1|4","5548:41-5548:54|-1|1|4","5819:43-5819:56|-1|1|4","5820:40-5820:53|-1|1|4","5821:34-5821:47|-1|1|4","5822:46-5822:59|-1|1|4","5823:40-5823:53|-1|1|4","5824:52-5824:65|-1|1|4","5825:45-5825:58|-1|1|4","5826:47-5826:60|-1|1|4","5827:47-5827:60|-1|1|4","5828:36-5828:49|-1|1|4","5829:38-5829:51|-1|1|4","5830:35-5830:48|-1|1|4","5831:43-5831:56|-1|1|4","5832:39-5832:52|-1|1|4","5833:39-5833:52|-1|1|4","5855:39-5855:52|-1|1|4","5873:47-5873:60|-1|1|4","5890:12-5890:25|-1|1|4","5890:51-5890:64|-1|1|4","5891:36-5891:49|-1|1|4","6274:56-6274:69|-1|1|4","7371:27-7371:40|-1|1|4","7376:39-7376:52|-1|1|4","7382:61-7382:74|-1|1|4","10184:38-10184:51|-1|1|4","10184:59-10184:72|-1|1|4","10185:37-10185:50|-1|1|4","10185:58-10185:71|-1|1|4","10227:65-10227:78|-1|1|4","11016:3-11016:16|-1|1|4","12909:3-12909:16|-1|1|4"]},{"id":32,"usr":1178518666670492552,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["4593:16-4593:31|-1|1|4"]},{"id":33,"usr":13514928835430527754,"detailed_name":"sqlite3_context","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"typedef struct sqlite3_context sqlite3_context","comments":"\n CAPI3REF: SQL Function Context Object\n\n The context in which an SQL function executes is stored in an\n sqlite3_context object.  ^A pointer to an sqlite3_context object\n is always first parameter to [application-defined SQL functions].\n The application-defined SQL function implementation will pass this\n pointer through into calls to [sqlite3_result_int | sqlite3_result()],\n [sqlite3_aggregate_context()], [sqlite3_user_data()],\n [sqlite3_context_db_handle()], [sqlite3_get_auxdata()],\n and/or [sqlite3_set_auxdata()].","declarations":[],"spell":"4593:32-4593:47|-1|1|2","extent":"4593:1-4593:47|-1|1|0","alias_of":32,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["4593:32-4593:47|-1|1|4","5514:17-5514:32|-1|1|4","5515:17-5515:32|-1|1|4","5516:18-5516:33|-1|1|4","5524:17-5524:32|-1|1|4","5525:17-5525:32|-1|1|4","5526:18-5526:33|-1|1|4","5534:17-5534:32|-1|1|4","5535:17-5535:32|-1|1|4","5536:18-5536:33|-1|1|4","5545:17-5545:32|-1|1|4","5546:18-5546:33|-1|1|4","5547:18-5547:33|-1|1|4","5548:20-5548:35|-1|1|4","5682:58-5682:73|-1|1|4","5936:44-5936:59|-1|1|4","5951:36-5951:51|-1|1|4","5963:47-5963:62|-1|1|4","6032:38-6032:53|-1|1|4","6033:37-6033:52|-1|1|4","6256:37-6256:52|-1|1|4","6257:39-6257:54|-1|1|4","6259:39-6259:54|-1|1|4","6260:38-6260:53|-1|1|4","6261:40-6261:55|-1|1|4","6262:45-6262:60|-1|1|4","6263:44-6263:59|-1|1|4","6264:43-6264:58|-1|1|4","6265:36-6265:51|-1|1|4","6266:38-6266:53|-1|1|4","6267:37-6267:52|-1|1|4","6268:37-6268:52|-1|1|4","6269:39-6269:54|-1|1|4","6271:39-6271:54|-1|1|4","6272:41-6272:56|-1|1|4","6273:41-6273:56|-1|1|4","6274:38-6274:53|-1|1|4","6275:40-6275:55|-1|1|4","6276:41-6276:56|-1|1|4","6277:42-6277:57|-1|1|4","6306:40-6306:55|-1|1|4","7374:40-7374:55|-1|1|4","7382:40-7382:55|-1|1|4","9935:38-9935:53|-1|1|4","12907:3-12907:18|-1|1|4"]},{"id":34,"usr":4238890825921571298,"detailed_name":"sqlite3_destructor_type","short_name_offset":0,"short_name_size":23,"kind":252,"hover":"typedef void (*sqlite3_destructor_type)(void*)","comments":"\n CAPI3REF: Constants Defining Special Destructor Behavior\n\n These are special values for the destructor that is passed in as the\n final argument to routines like [sqlite3_result_blob()].  ^If the destructor\n argument is SQLITE_STATIC, it means that the content pointer is constant\n and will never change.  It does not need to be destroyed.  ^The\n SQLITE_TRANSIENT value means that the content will likely change in\n the near future and that SQLite should make its own private copy of\n the content before returning.\n\n The typedef is necessary to work around problems in certain\n C++ compilers.","declarations":[],"spell":"6105:16-6105:39|-1|1|2","extent":"6105:1-6105:47|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["6105:16-6105:39|-1|1|4"]},{"id":35,"usr":3748688976169878033,"detailed_name":"sqlite3_vtab","short_name_offset":0,"short_name_size":12,"kind":23,"hover":"","comments":"\n CAPI3REF: Virtual Table Instance Object\n KEYWORDS: sqlite3_vtab\n\n Every [virtual table module] implementation uses a subclass\n of this object to describe a particular instance\n of the [virtual table].  Each subclass will\n be tailored to the specific needs of the module implementation.\n The purpose of this superclass is to define certain fields that are\n common to all module implementations.\n\n ^Virtual tables methods can set an error message by assigning a\n string obtained from [sqlite3_mprintf()] to zErrMsg.  The method should\n take care that any prior string is freed by a call to [sqlite3_free()]\n prior to assigning a new string to zErrMsg.  ^After the error message\n is delivered up to the client application, the string will be automatically\n freed by sqlite3_free() and the zErrMsg field will be zeroed.","declarations":[],"spell":"7683:8-7683:20|-1|1|2","extent":"7683:1-7688:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[99,100,101],"instances":[],"uses":["7336:16-7336:28|-1|1|4"]},{"id":36,"usr":642924233493995130,"detailed_name":"sqlite3_vtab","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef struct sqlite3_vtab sqlite3_vtab","comments":"\n Structures used by the virtual table interface","declarations":[],"spell":"7336:29-7336:41|-1|1|2","extent":"7336:1-7336:41|-1|1|0","alias_of":35,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[102],"uses":["7336:29-7336:41|-1|1|4","7361:16-7361:28|-1|1|4","7364:16-7364:28|-1|1|4","7365:21-7365:33|-1|1|4","7366:22-7366:34|-1|1|4","7367:19-7367:31|-1|1|4","7368:16-7368:28|-1|1|4","7376:18-7376:30|-1|1|4","7377:17-7377:29|-1|1|4","7378:16-7378:28|-1|1|4","7379:18-7379:30|-1|1|4","7380:20-7380:32|-1|1|4","7381:24-7381:36|-1|1|4","7384:18-7384:30|-1|1|4","7387:21-7387:33|-1|1|4","7388:19-7388:31|-1|1|4","7389:22-7389:34|-1|1|4","7395:21-7395:33|-1|1|4","7708:3-7708:15|-1|1|4"]},{"id":37,"usr":11050904046560404519,"detailed_name":"sqlite3_index_info","short_name_offset":0,"short_name_size":18,"kind":23,"hover":"","comments":"\n CAPI3REF: Virtual Table Indexing Information\n KEYWORDS: sqlite3_index_info\n\n The sqlite3_index_info structure and its substructures is used as part\n of the [virtual table] interface to\n pass information into and receive the reply from the [xBestIndex]\n method of a [virtual table module].  The fields under **Inputs** are the\n inputs to xBestIndex and are read-only.  xBestIndex inserts its\n results into the **Outputs** fields.\n\n ^(The aConstraint[] array records WHERE clause constraints of the form:\n\n <blockquote>column OP expr</blockquote>\n\n where OP is =, &lt;, &lt;=, &gt;, or &gt;=.)^  ^(The particular operator is\n stored in aConstraint[].op using one of the\n [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^\n ^(The index of the column is stored in\n aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the\n expr on the right-hand side can be evaluated (and thus the constraint\n is usable) and false if it cannot.)^\n\n ^The optimizer automatically inverts terms of the form \"expr OP column\"\n and makes other simplifications to the WHERE clause in an attempt to\n get as many WHERE clause terms into the form shown above as possible.\n ^The aConstraint[] array only reports WHERE clause terms that are\n relevant to the particular virtual table being queried.\n\n ^Information about the ORDER BY clause is stored in aOrderBy[].\n ^Each term of aOrderBy records a column of the ORDER BY clause.\n\n The colUsed field indicates which columns of the virtual table may be\n required by the current scan. Virtual table columns are numbered from\n zero in the order in which they appear within the CREATE TABLE statement\n passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),\n the corresponding bit is set within the colUsed mask if the column may be\n required by SQLite. If the table has at least 64 columns and any column\n to the right of the first 63 is required, then bit 63 of colUsed is also\n set. In other words, column iCol may be required if the expression\n (colUsed & ((sqlite3_uint64)1 << (iCol>=63 ? 63 : iCol))) evaluates to\n non-zero.\n\n The [xBestIndex] method must fill aConstraintUsage[] with information\n about what parameters to pass to xFilter.  ^If argvIndex>0 then\n the right-hand side of the corresponding aConstraint[] is evaluated\n and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit\n is true, then the constraint is assumed to be fully handled by the\n virtual table and might not be checked again by the byte code.)^ ^(The\n aConstraintUsage[].omit flag is an optimization hint. When the omit flag\n is left in its default setting of false, the constraint will always be\n checked separately in byte code.  If the omit flag is change to true, then\n the constraint may or may not be checked in byte code.  In other words,\n when the omit flag is true there is no guarantee that the constraint will\n not be checked again using byte code.)^\n\n ^The idxNum and idxStr values are recorded and passed into the\n [xFilter] method.\n ^[sqlite3_free()] is used to free idxStr if and only if\n needToFreeIdxStr is true.\n\n ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in\n the correct order to satisfy the ORDER BY clause so that no separate\n sorting step is required.\n\n ^The estimatedCost value is an estimate of the cost of a particular\n strategy. A cost of N indicates that the cost of the strategy is similar\n to a linear scan of an SQLite table with N rows. A cost of log(N)\n indicates that the expense of the operation is similar to that of a\n binary search on a unique indexed field of an SQLite table with N rows.\n\n ^The estimatedRows value is an estimate of the number of rows that\n will be returned by the strategy.\n\n The xBestIndex method may optionally populate the idxFlags field with a\n mask of SQLITE_INDEX_SCAN_* flags. One such flag is\n [SQLITE_INDEX_SCAN_HEX], which if set causes the [EXPLAIN QUERY PLAN]\n output to show the idxNum has hex instead of as decimal.  Another flag is\n SQLITE_INDEX_SCAN_UNIQUE, which if set indicates that the query plan will\n return at most one row.\n\n Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then\n SQLite also assumes that if a call to the xUpdate() method is made as\n part of the same statement to delete or update a virtual table row and the\n implementation returns SQLITE_CONSTRAINT, then there is no need to rollback\n any database changes. In other words, if the xUpdate() returns\n SQLITE_CONSTRAINT, the database contents must be exactly as they were\n before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not\n set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by\n the xUpdate method are automatically rolled back by SQLite.\n\n IMPORTANT: The estimatedRows field was added to the sqlite3_index_info\n structure for SQLite [version 3.8.2] ([dateof:3.8.2]).\n If a virtual table extension is\n used with an SQLite version earlier than 3.8.2, the results of attempting\n to read or write the estimatedRows field are undefined (but are likely\n to include crashing the application). The estimatedRows field should\n therefore only be used if [sqlite3_libversion_number()] returns a\n value greater than or equal to 3008002. Similarly, the idxFlags field\n was added for [version 3.9.0] ([dateof:3.9.0]).\n It may therefore only be used if\n sqlite3_libversion_number() returns a value greater than or equal to\n 3009000.","declarations":[],"spell":"7503:8-7503:26|-1|1|2","extent":"7503:1-7533:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[78,79,84,85,88,91,92,93,94,95,96,97,98],"instances":[],"uses":["7337:16-7337:34|-1|1|4"]},{"id":38,"usr":7224751841253349137,"detailed_name":"sqlite3_index_info","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef struct sqlite3_index_info sqlite3_index_info","comments":"","declarations":[],"spell":"7337:35-7337:53|-1|1|2","extent":"7337:1-7337:53|-1|1|0","alias_of":37,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["7337:35-7337:53|-1|1|4","7365:42-7365:60|-1|1|4","9970:47-9970:65|-1|1|4","10064:38-10064:56|-1|1|4","10137:32-10137:50|-1|1|4","10227:39-10227:57|-1|1|4"]},{"id":39,"usr":14851734733658602794,"detailed_name":"sqlite3_vtab_cursor","short_name_offset":0,"short_name_size":19,"kind":23,"hover":"","comments":"\n CAPI3REF: Virtual Table Cursor Object\n KEYWORDS: sqlite3_vtab_cursor {virtual table cursor}\n\n Every [virtual table module] implementation uses a subclass of the\n following structure to describe cursors that point into the\n [virtual table] and are used\n to loop through the virtual table.  Cursors are created using the\n [sqlite3_module.xOpen | xOpen] method of the module and are destroyed\n by the [sqlite3_module.xClose | xClose] method.  Cursors are used\n by the [xFilter], [xNext], [xEof], [xColumn], and [xRowid] methods\n of the module.  Each module implementation will define\n the content of a cursor structure to suit its own needs.\n\n This superclass exists in order to define fields of the cursor that\n are common to all implementations.","declarations":[],"spell":"7707:8-7707:27|-1|1|2","extent":"7707:1-7710:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[102],"instances":[],"uses":["7338:16-7338:35|-1|1|4"]},{"id":40,"usr":7095154297708568833,"detailed_name":"sqlite3_vtab_cursor","short_name_offset":0,"short_name_size":19,"kind":252,"hover":"typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor","comments":"","declarations":[],"spell":"7338:36-7338:55|-1|1|2","extent":"7338:1-7338:55|-1|1|0","alias_of":39,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["7338:36-7338:55|-1|1|4","7368:37-7368:56|-1|1|4","7369:17-7369:36|-1|1|4","7370:18-7370:37|-1|1|4","7372:16-7372:35|-1|1|4","7373:15-7373:34|-1|1|4","7374:18-7374:37|-1|1|4","7375:17-7375:36|-1|1|4"]},{"id":41,"usr":10654449094153856632,"detailed_name":"sqlite3_module","short_name_offset":0,"short_name_size":14,"kind":23,"hover":"","comments":"\n CAPI3REF: Virtual Table Object\n KEYWORDS: sqlite3_module {virtual table module}\n\n This structure, sometimes called a \"virtual table module\",\n defines the implementation of a [virtual table].\n This structure consists mostly of methods for the module.\n\n ^A virtual table module is created by filling in a persistent\n instance of this structure and passing a pointer to that instance\n to [sqlite3_create_module()] or [sqlite3_create_module_v2()].\n ^The registration remains valid until it is replaced by a different\n module or until the [database connection] closes.  The content\n of this structure must not change while it is registered with\n any database connection.","declarations":[],"spell":"7357:8-7357:22|-1|1|2","extent":"7357:1-7397:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"instances":[],"uses":["7339:16-7339:30|-1|1|4"]},{"id":42,"usr":15298796814700214384,"detailed_name":"sqlite3_module","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef struct sqlite3_module sqlite3_module","comments":"","declarations":[],"spell":"7339:31-7339:45|-1|1|2","extent":"7339:1-7339:45|-1|1|0","alias_of":41,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[99],"uses":["7339:31-7339:45|-1|1|4","7637:9-7637:23|-1|1|4","7643:9-7643:23|-1|1|4","7684:9-7684:23|-1|1|4"]},{"id":43,"usr":15587372683835116597,"detailed_name":"sqlite3_index_info::sqlite3_index_constraint","short_name_offset":20,"short_name_size":24,"kind":23,"hover":"","comments":"","declarations":[],"spell":"7506:10-7506:34|37|2|2","extent":"7506:3-7511:4|37|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[80,81,82,83],"instances":[79],"uses":[]},{"id":44,"usr":5,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[81,82,87,90,138,160,161],"uses":[]},{"id":45,"usr":7525942504712340105,"detailed_name":"sqlite3_index_info::sqlite3_index_orderby","short_name_offset":20,"short_name_size":21,"kind":23,"hover":"","comments":"","declarations":[],"spell":"7513:10-7513:31|37|2|2","extent":"7513:3-7516:4|37|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[86,87],"instances":[85],"uses":[]},{"id":46,"usr":13198732786789339422,"detailed_name":"sqlite3_index_info::sqlite3_index_constraint_usage","short_name_offset":20,"short_name_size":30,"kind":23,"hover":"","comments":"Outputs","declarations":[],"spell":"7518:10-7518:40|37|2|2","extent":"7518:3-7521:4|37|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[89,90],"instances":[88],"uses":[]},{"id":47,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[95],"uses":[]},{"id":48,"usr":5155032911517876994,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["7753:16-7753:28|-1|1|4"]},{"id":49,"usr":9067869411066738086,"detailed_name":"sqlite3_blob","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef struct sqlite3_blob sqlite3_blob","comments":"\n CAPI3REF: A Handle To An Open BLOB\n KEYWORDS: {BLOB handle} {BLOB handles}\n\n An instance of this object represents an open BLOB on which\n [sqlite3_blob_open | incremental BLOB I/O] can be performed.\n ^Objects of this type are created by [sqlite3_blob_open()]\n and destroyed by [sqlite3_blob_close()].\n ^The [sqlite3_blob_read()] and [sqlite3_blob_write()] interfaces\n can be used to read or write small subsections of the BLOB.\n ^The [sqlite3_blob_bytes()] interface returns the size of the BLOB in bytes.","declarations":[],"spell":"7753:29-7753:41|-1|1|2","extent":"7753:1-7753:41|-1|1|0","alias_of":48,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["7753:29-7753:41|-1|1|4","7845:3-7845:15|-1|1|4","7871:36-7871:48|-1|1|4","7894:35-7894:47|-1|1|4","7910:35-7910:47|-1|1|4","7939:34-7939:46|-1|1|4","7981:35-7981:47|-1|1|4"]},{"id":50,"usr":11746888501328479419,"detailed_name":"sqlite3_mutex_methods","short_name_offset":0,"short_name_size":21,"kind":23,"hover":"","comments":"","declarations":[],"spell":"8204:8-8204:29|-1|1|2","extent":"8204:1-8214:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[103,104,105,106,107,108,109,110,111],"instances":[],"uses":["8203:16-8203:37|-1|1|4"]},{"id":51,"usr":10790719993337261188,"detailed_name":"sqlite3_mutex_methods","short_name_offset":0,"short_name_size":21,"kind":252,"hover":"typedef struct sqlite3_mutex_methods sqlite3_mutex_methods","comments":"\n CAPI3REF: Mutex Methods Object\n\n An instance of this structure defines the low-level routines\n used to allocate and use mutexes.\n\n Usually, the default mutex implementations provided by SQLite are\n sufficient, however the application has the option of substituting a custom\n implementation for specialized deployments or systems for which SQLite\n does not provide a suitable implementation. In this case, the application\n creates and populates an instance of this structure to pass\n to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.\n Additionally, an instance of this structure can be used as an\n output variable when querying the system for the current mutex\n implementation, using the [SQLITE_CONFIG_GETMUTEX] option.\n\n ^The xMutexInit method defined by this structure is invoked as\n part of system initialization by the sqlite3_initialize() function.\n ^The xMutexInit routine is called by SQLite exactly once for each\n effective call to [sqlite3_initialize()].\n\n ^The xMutexEnd method defined by this structure is invoked as\n part of system shutdown by the sqlite3_shutdown() function. The\n implementation of this method is expected to release all outstanding\n resources obtained by the mutex methods implementation, especially\n those obtained by the xMutexInit method.  ^The xMutexEnd()\n interface is invoked exactly once for each call to [sqlite3_shutdown()].\n\n ^(The remaining seven methods defined by this structure (xMutexAlloc,\n xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and\n xMutexNotheld) implement the following interfaces (respectively):\n\n <ul>\n   <li>  [sqlite3_mutex_alloc()] </li>\n   <li>  [sqlite3_mutex_free()] </li>\n   <li>  [sqlite3_mutex_enter()] </li>\n   <li>  [sqlite3_mutex_try()] </li>\n   <li>  [sqlite3_mutex_leave()] </li>\n   <li>  [sqlite3_mutex_held()] </li>\n   <li>  [sqlite3_mutex_notheld()] </li>\n </ul>)^\n\n The only difference is that the public sqlite3_XXX functions enumerated\n above silently ignore any invocations that pass a NULL pointer instead\n of a valid mutex handle. The implementations of the methods defined\n by this structure are not required to handle this case. The results\n of passing a NULL pointer instead of a valid mutex handle are undefined\n (i.e. it is acceptable to provide an implementation that segfaults if\n it is passed a NULL pointer).\n\n The xMutexInit() method must be threadsafe.  It must be harmless to\n invoke xMutexInit() multiple times within the same process and without\n intervening calls to xMutexEnd().  Second and subsequent calls to\n xMutexInit() must be no-ops.\n\n xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()]\n and its associates).  Similarly, xMutexAlloc() must not use SQLite memory\n allocation for a static mutex.  ^However xMutexAlloc() may use SQLite\n memory allocation for a fast or recursive mutex.\n\n ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is\n called, but only if the prior call to xMutexInit returned SQLITE_OK.\n If xMutexInit fails in any way, it is expected to clean up after itself\n prior to returning.","declarations":[],"spell":"8203:38-8203:59|-1|1|2","extent":"8203:1-8203:59|-1|1|0","alias_of":50,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8203:38-8203:59|-1|1|4"]},{"id":52,"usr":10328401096755843706,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8471:16-8471:27|-1|1|4"]},{"id":53,"usr":16810731268067913587,"detailed_name":"sqlite3_str","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef struct sqlite3_str sqlite3_str","comments":"\n CAPI3REF: Dynamic String Object\n KEYWORDS: {dynamic string}\n\n An instance of the sqlite3_str object contains a dynamically-sized\n string under construction.\n\n The lifecycle of an sqlite3_str object is as follows:\n <ol>\n <li> ^The sqlite3_str object is created using [sqlite3_str_new()].\n <li> ^Text is appended to the sqlite3_str object using various\n methods, such as [sqlite3_str_appendf()].\n <li> ^The sqlite3_str object is destroyed and the string it created\n is returned using the [sqlite3_str_finish()] interface.\n </ol>","declarations":[],"spell":"8471:28-8471:39|-1|1|2","extent":"8471:1-8471:39|-1|1|0","alias_of":52,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8471:28-8471:39|-1|1|4","8498:12-8498:23|-1|1|4","8513:37-8513:48|-1|1|4","8547:37-8547:48|-1|1|4","8548:38-8548:49|-1|1|4","8549:36-8549:47|-1|1|4","8550:39-8550:50|-1|1|4","8551:40-8551:51|-1|1|4","8552:35-8552:46|-1|1|4","8583:36-8583:47|-1|1|4","8584:35-8584:46|-1|1|4","8585:36-8585:47|-1|1|4"]},{"id":54,"usr":7785925801352537607,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8964:16-8964:30|-1|1|4"]},{"id":55,"usr":6808123098702562130,"detailed_name":"sqlite3_pcache","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef struct sqlite3_pcache sqlite3_pcache","comments":"\n CAPI3REF: Custom Page Cache Object\n\n The sqlite3_pcache type is opaque.  It is implemented by\n the pluggable module.  The SQLite core has no knowledge of\n its size or internal structure and never deals with the\n sqlite3_pcache object except by holding and passing pointers\n to the object.\n\n See [sqlite3_pcache_methods2] for additional information.","declarations":[],"spell":"8964:31-8964:45|-1|1|2","extent":"8964:1-8964:45|-1|1|0","alias_of":54,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8964:31-8964:45|-1|1|4","9147:3-9147:17|-1|1|4","9148:22-9148:36|-1|1|4","9149:21-9149:35|-1|1|4","9150:34-9150:48|-1|1|4","9151:18-9151:32|-1|1|4","9152:18-9152:32|-1|1|4","9154:21-9154:35|-1|1|4","9155:20-9155:34|-1|1|4","9156:19-9156:33|-1|1|4","9169:3-9169:17|-1|1|4","9170:22-9170:36|-1|1|4","9171:21-9171:35|-1|1|4","9172:19-9172:33|-1|1|4","9173:18-9173:32|-1|1|4","9174:18-9174:32|-1|1|4","9175:21-9175:35|-1|1|4","9176:20-9176:34|-1|1|4"]},{"id":56,"usr":1508623654712092068,"detailed_name":"sqlite3_pcache_page","short_name_offset":0,"short_name_size":19,"kind":23,"hover":"","comments":"","declarations":[],"spell":"8977:8-8977:27|-1|1|2","extent":"8977:1-8980:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[112,113],"instances":[],"uses":["8976:16-8976:35|-1|1|4"]},{"id":57,"usr":11239720443920485272,"detailed_name":"sqlite3_pcache_page","short_name_offset":0,"short_name_size":19,"kind":252,"hover":"typedef struct sqlite3_pcache_page sqlite3_pcache_page","comments":"\n CAPI3REF: Custom Page Cache Object\n\n The sqlite3_pcache_page object represents a single page in the\n page cache.  The page cache will allocate instances of this\n object.  Various methods of the page cache use pointers to instances\n of this object as parameters or as their return value.\n\n See [sqlite3_pcache_methods2] for additional information.","declarations":[],"spell":"8976:36-8976:55|-1|1|2","extent":"8976:1-8976:55|-1|1|0","alias_of":56,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["8976:36-8976:55|-1|1|4","9150:3-9150:22|-1|1|4","9151:35-9151:54|-1|1|4","9152:35-9152:54|-1|1|4"]},{"id":58,"usr":3095624085613894782,"detailed_name":"sqlite3_pcache_methods2","short_name_offset":0,"short_name_size":23,"kind":23,"hover":"","comments":"","declarations":[],"spell":"9142:8-9142:31|-1|1|2","extent":"9142:1-9157:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[114,115,116,117,118,119,120,121,122,123,124,125,126],"instances":[],"uses":["9141:16-9141:39|-1|1|4"]},{"id":59,"usr":8075300129632726662,"detailed_name":"sqlite3_pcache_methods2","short_name_offset":0,"short_name_size":23,"kind":252,"hover":"typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2","comments":"\n CAPI3REF: Application Defined Page Cache.\n KEYWORDS: {page cache}\n\n ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can\n register an alternative page cache implementation by passing in an\n instance of the sqlite3_pcache_methods2 structure.)^\n In many applications, most of the heap memory allocated by\n SQLite is used for the page cache.\n By implementing a\n custom page cache using this API, an application can better control\n the amount of memory consumed by SQLite, the way in which\n that memory is allocated and released, and the policies used to\n determine exactly which parts of a database file are cached and for\n how long.\n\n The alternative page cache mechanism is an\n extreme measure that is only needed by the most demanding applications.\n The built-in page cache is recommended for most uses.\n\n ^(The contents of the sqlite3_pcache_methods2 structure are copied to an\n internal buffer by SQLite within the call to [sqlite3_config].  Hence\n the application may discard the parameter after the call to\n [sqlite3_config()] returns.)^\n\n [[the xInit() page cache method]]\n ^(The xInit() method is called once for each effective\n call to [sqlite3_initialize()])^\n (usually only once during the lifetime of the process). ^(The xInit()\n method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^\n The intent of the xInit() method is to set up global data structures\n required by the custom page cache implementation.\n ^(If the xInit() method is NULL, then the\n built-in default page cache is used instead of the application defined\n page cache.)^\n\n [[the xShutdown() page cache method]]\n ^The xShutdown() method is called by [sqlite3_shutdown()].\n It can be used to clean up\n any outstanding resources before process shutdown, if required.\n ^The xShutdown() method may be NULL.\n\n ^SQLite automatically serializes calls to the xInit method,\n so the xInit method need not be threadsafe.  ^The\n xShutdown method is only called from [sqlite3_shutdown()] so it does\n not need to be threadsafe either.  All other methods must be threadsafe\n in multithreaded applications.\n\n ^SQLite will never invoke xInit() more than once without an intervening\n call to xShutdown().\n\n [[the xCreate() page cache methods]]\n ^SQLite invokes the xCreate() method to construct a new cache instance.\n SQLite will typically create one cache instance for each open database file,\n though this is not guaranteed. ^The\n first parameter, szPage, is the size in bytes of the pages that must\n be allocated by the cache.  ^szPage will always a power of two.  ^The\n second parameter szExtra is a number of bytes of extra storage\n associated with each page cache entry.  ^The szExtra parameter will\n a number less than 250.  SQLite will use the\n extra szExtra bytes on each page to store metadata about the underlying\n database page on disk.  The value passed into szExtra depends\n on the SQLite version, the target platform, and how SQLite was compiled.\n ^The third argument to xCreate(), bPurgeable, is true if the cache being\n created will be used to cache database pages of a file stored on disk, or\n false if it is used for an in-memory database. The cache implementation\n does not have to do anything special based with the value of bPurgeable;\n it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will\n never invoke xUnpin() except to deliberately delete a page.\n ^In other words, calls to xUnpin() on a cache with bPurgeable set to\n false will always have the \"discard\" flag set to true.\n ^Hence, a cache created with bPurgeable false will\n never contain any unpinned pages.\n\n [[the xCachesize() page cache method]]\n ^(The xCachesize() method may be called at any time by SQLite to set the\n suggested maximum cache-size (number of pages stored by) the cache\n instance passed as the first argument. This is the value configured using\n the SQLite \"[PRAGMA cache_size]\" command.)^  As with the bPurgeable\n parameter, the implementation is not required to do anything with this\n value; it is advisory only.\n\n [[the xPagecount() page cache methods]]\n The xPagecount() method must return the number of pages currently\n stored in the cache, both pinned and unpinned.\n\n [[the xFetch() page cache methods]]\n The xFetch() method locates a page in the cache and returns a pointer to\n an sqlite3_pcache_page object associated with that page, or a NULL pointer.\n The pBuf element of the returned sqlite3_pcache_page object will be a\n pointer to a buffer of szPage bytes used to store the content of a\n single database page.  The pExtra element of sqlite3_pcache_page will be\n a pointer to the szExtra bytes of extra storage that SQLite has requested\n for each entry in the page cache.\n\n The page to be fetched is determined by the key. ^The minimum key value\n is 1.  After it has been retrieved using xFetch, the page is considered\n to be \"pinned\".\n\n If the requested page is already in the page cache, then the page cache\n implementation must return a pointer to the page buffer with its content\n intact.  If the requested page is not already in the cache, then the\n cache implementation should use the value of the createFlag\n parameter to help it determined what action to take:\n\n <table border=1 width=85% align=center>\n <tr><th> createFlag <th> Behavior when page is not already in cache\n <tr><td> 0 <td> Do not allocate a new page.  Return NULL.\n <tr><td> 1 <td> Allocate a new page if it easy and convenient to do so.\n                 Otherwise return NULL.\n <tr><td> 2 <td> Make every effort to allocate a new page.  Only return\n                 NULL if allocating a new page is effectively impossible.\n </table>\n\n ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite\n will only use a createFlag of 2 after a prior call with a createFlag of 1\n failed.)^  In between the xFetch() calls, SQLite may\n attempt to unpin one or more cache pages by spilling the content of\n pinned pages to disk and synching the operating system disk cache.\n\n [[the xUnpin() page cache method]]\n ^xUnpin() is called by SQLite with a pointer to a currently pinned page\n as its second argument.  If the third parameter, discard, is non-zero,\n then the page must be evicted from the cache.\n ^If the discard parameter is\n zero, then the page may be discarded or retained at the discretion of\n page cache implementation. ^The page cache implementation\n may choose to evict unpinned pages at any time.\n\n The cache must not perform any reference counting. A single\n call to xUnpin() unpins the page regardless of the number of prior calls\n to xFetch().\n\n [[the xRekey() page cache methods]]\n The xRekey() method is used to change the key value associated with the\n page passed as the second argument. If the cache\n previously contains an entry associated with newKey, it must be\n discarded. ^Any prior cache entry associated with newKey is guaranteed not\n to be pinned.\n\n When SQLite calls the xTruncate() method, the cache must discard all\n existing cache entries with page numbers (keys) greater than or equal\n to the value of the iLimit parameter passed to xTruncate(). If any\n of these pages are pinned, they are implicitly unpinned, meaning that\n they can be safely discarded.\n\n [[the xDestroy() page cache method]]\n ^The xDestroy() method is used to delete a cache allocated by xCreate().\n All resources associated with the specified cache should be freed. ^After\n calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]\n handle invalid, and will not use it with any other sqlite3_pcache_methods2\n functions.\n\n [[the xShrink() page cache method]]\n ^SQLite invokes the xShrink() method when it wants the page cache to\n free up as much of heap memory as possible.  The page cache implementation\n is not obligated to free any memory, but well-behaved implementations should\n do their best.","declarations":[],"spell":"9141:40-9141:63|-1|1|2","extent":"9141:1-9141:63|-1|1|0","alias_of":58,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["9141:40-9141:63|-1|1|4"]},{"id":60,"usr":15519863272415923394,"detailed_name":"sqlite3_pcache_methods","short_name_offset":0,"short_name_size":22,"kind":23,"hover":"","comments":"","declarations":[],"spell":"9165:8-9165:30|-1|1|2","extent":"9165:1-9177:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[127,128,129,130,131,132,133,134,135,136,137],"instances":[],"uses":["9164:16-9164:38|-1|1|4"]},{"id":61,"usr":2849512529520040985,"detailed_name":"sqlite3_pcache_methods","short_name_offset":0,"short_name_size":22,"kind":252,"hover":"typedef struct sqlite3_pcache_methods sqlite3_pcache_methods","comments":"\n This is the obsolete pcache_methods object that has now been replaced\n by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is\n retained in the header file for backwards compatibility only.","declarations":[],"spell":"9164:39-9164:61|-1|1|2","extent":"9164:1-9164:61|-1|1|0","alias_of":60,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["9164:39-9164:61|-1|1|4"]},{"id":62,"usr":7265322721996506537,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["9190:16-9190:30|-1|1|4"]},{"id":63,"usr":6917351814927469228,"detailed_name":"sqlite3_backup","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef struct sqlite3_backup sqlite3_backup","comments":"\n CAPI3REF: Online Backup Object\n\n The sqlite3_backup object records state information about an ongoing\n online backup operation.  ^The sqlite3_backup object is created by\n a call to [sqlite3_backup_init()] and is destroyed by a call to\n [sqlite3_backup_finish()].\n\n See Also: [Using the SQLite Online Backup API]","declarations":[],"spell":"9190:31-9190:45|-1|1|2","extent":"9190:1-9190:45|-1|1|0","alias_of":62,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["9190:31-9190:45|-1|1|4","9388:12-9388:26|-1|1|4","9394:36-9394:50|-1|1|4","9395:38-9395:52|-1|1|4","9396:41-9396:55|-1|1|4","9397:41-9397:55|-1|1|4"]},{"id":64,"usr":11394061410005513096,"detailed_name":"sqlite3_snapshot","short_name_offset":0,"short_name_size":16,"kind":23,"hover":"","comments":"\n CAPI3REF: Database Snapshot\n KEYWORDS: {snapshot} {sqlite3_snapshot}\n\n An instance of the snapshot object records the state of a [WAL mode]\n database for some specific point in history.\n\n In [WAL mode], multiple [database connections] that are open on the\n same database file can each be reading a different historical version\n of the database file.  When a [database connection] begins a read\n transaction, that connection sees an unchanging copy of the database\n as it existed for the point in time when the transaction first started.\n Subsequent changes to the database from other connections are not seen\n by the reader until a new read transaction is started.\n\n The sqlite3_snapshot object records state information about an historical\n version of the database file so that it is possible to later open a new read\n transaction that sees that historical version of the database rather than\n the most recent version.","declarations":[],"spell":"10570:16-10570:32|-1|1|2","extent":"10570:9-10572:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[138],"instances":[],"uses":[]},{"id":65,"usr":8281665751800257327,"detailed_name":"sqlite3_snapshot","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef struct sqlite3_snapshot {\n  unsigned char hidden[48];\n} sqlite3_snapshot","comments":"","declarations":[],"spell":"10572:3-10572:19|-1|1|2","extent":"10570:1-10572:19|-1|1|0","alias_of":64,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["10572:3-10572:19|-1|1|4","10628:3-10628:19|-1|1|4","10677:3-10677:19|-1|1|4","10691:59-10691:75|-1|1|4","10719:3-10719:19|-1|1|4","10720:3-10720:19|-1|1|4"]},{"id":66,"usr":14685578016889070962,"detailed_name":"sqlite3_rtree_geometry","short_name_offset":0,"short_name_size":22,"kind":23,"hover":"","comments":"\n A pointer to a structure of the following type is passed as the first\n argument to callbacks registered using rtree_geometry_callback().","declarations":[],"spell":"10967:8-10967:30|-1|1|2","extent":"10967:1-10973:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[139,140,141,142,143],"instances":[],"uses":["10937:16-10937:38|-1|1|4"]},{"id":67,"usr":11114280510961883058,"detailed_name":"sqlite3_rtree_geometry","short_name_offset":0,"short_name_size":22,"kind":252,"hover":"typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry","comments":"","declarations":[],"spell":"10937:39-10937:61|-1|1|2","extent":"10937:1-10937:61|-1|1|0","alias_of":66,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["10937:39-10937:61|-1|1|4","10958:16-10958:38|-1|1|4"]},{"id":68,"usr":2473089691974536282,"detailed_name":"sqlite3_rtree_query_info","short_name_offset":0,"short_name_size":24,"kind":23,"hover":"","comments":"\n A pointer to a structure of the following type is passed as the\n argument to scored geometry callback registered using\n sqlite3_rtree_query_callback().\n\n Note that the first 5 fields of this structure are identical to\n sqlite3_rtree_geometry.  This structure is a subclass of\n sqlite3_rtree_geometry.","declarations":[],"spell":"10999:8-10999:32|-1|1|2","extent":"10999:1-11017:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"instances":[],"uses":["10938:16-10938:40|-1|1|4"]},{"id":69,"usr":14521350383480618993,"detailed_name":"sqlite3_rtree_query_info","short_name_offset":0,"short_name_size":24,"kind":252,"hover":"typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info","comments":"","declarations":[],"spell":"10938:41-10938:65|-1|1|2","extent":"10938:1-10938:65|-1|1|0","alias_of":68,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["10938:41-10938:65|-1|1|4","10984:21-10984:45|-1|1|4"]},{"id":70,"usr":12221016981109524635,"detailed_name":"sqlite3_rtree_dbl","short_name_offset":0,"short_name_size":17,"kind":252,"hover":"typedef double sqlite3_rtree_dbl","comments":"","declarations":[],"spell":"10946:18-10946:35|-1|1|2","extent":"10946:3-10946:35|-1|1|0","alias_of":47,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[141,146,149,155,158],"uses":["10946:18-10946:35|-1|1|4","10958:46-10958:63|-1|1|4","10970:3-10970:20|-1|1|4","11002:3-11002:20|-1|1|4","11005:3-11005:20|-1|1|4","11011:3-11011:20|-1|1|4","11014:3-11014:20|-1|1|4"]},{"id":71,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[150],"uses":[]},{"id":72,"usr":1708971481304659339,"detailed_name":"Fts5ExtensionApi","short_name_offset":0,"short_name_size":16,"kind":23,"hover":"","comments":"\n EXTENSION API FUNCTIONS\n\n xUserData(pFts):\n   Return a copy of the pUserData pointer passed to the xCreateFunction()\n   API when the extension function was registered.\n\n xColumnTotalSize(pFts, iCol, pnToken):\n   If parameter iCol is less than zero, set output variable *pnToken\n   to the total number of tokens in the FTS5 table. Or, if iCol is\n   non-negative but less than the number of columns in the table, return\n   the total number of tokens in column iCol, considering all rows in\n   the FTS5 table.\n\n   If parameter iCol is greater than or equal to the number of columns\n   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.\n   an OOM condition or IO error), an appropriate SQLite error code is\n   returned.\n\n xColumnCount(pFts):\n   Return the number of columns in the table.\n\n xColumnSize(pFts, iCol, pnToken):\n   If parameter iCol is less than zero, set output variable *pnToken\n   to the total number of tokens in the current row. Or, if iCol is\n   non-negative but less than the number of columns in the table, set\n   *pnToken to the number of tokens in column iCol of the current row.\n\n   If parameter iCol is greater than or equal to the number of columns\n   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.\n   an OOM condition or IO error), an appropriate SQLite error code is\n   returned.\n\n   This function may be quite inefficient if used with an FTS5 table\n   created with the \"columnsize=0\" option.\n\n xColumnText:\n   If parameter iCol is less than zero, or greater than or equal to the\n   number of columns in the table, SQLITE_RANGE is returned.\n\n   Otherwise, this function attempts to retrieve the text of column iCol of\n   the current document. If successful, (*pz) is set to point to a buffer\n   containing the text in utf-8 encoding, (*pn) is set to the size in bytes\n   (not characters) of the buffer and SQLITE_OK is returned. Otherwise,\n   if an error occurs, an SQLite error code is returned and the final values\n   of (*pz) and (*pn) are undefined.\n\n xPhraseCount:\n   Returns the number of phrases in the current query expression.\n\n xPhraseSize:\n   If parameter iCol is less than zero, or greater than or equal to the\n   number of phrases in the current query, as returned by xPhraseCount,\n   0 is returned. Otherwise, this function returns the number of tokens in\n   phrase iPhrase of the query. Phrases are numbered starting from zero.\n\n xInstCount:\n   Set *pnInst to the total number of occurrences of all phrases within\n   the query within the current row. Return SQLITE_OK if successful, or\n   an error code (i.e. SQLITE_NOMEM) if an error occurs.\n\n   This API can be quite slow if used with an FTS5 table created with the\n   \"detail=none\" or \"detail=column\" option. If the FTS5 table is created\n   with either \"detail=none\" or \"detail=column\" and \"content=\" option\n   (i.e. if it is a contentless table), then this API always returns 0.\n\n xInst:\n   Query for the details of phrase match iIdx within the current row.\n   Phrase matches are numbered starting from zero, so the iIdx argument\n   should be greater than or equal to zero and smaller than the value\n   output by xInstCount(). If iIdx is less than zero or greater than\n   or equal to the value returned by xInstCount(), SQLITE_RANGE is returned.\n\n   Otherwise, output parameter *piPhrase is set to the phrase number, *piCol\n   to the column in which it occurs and *piOff the token offset of the\n   first token of the phrase. SQLITE_OK is returned if successful, or an\n   error code (i.e. SQLITE_NOMEM) if an error occurs.\n\n   This API can be quite slow if used with an FTS5 table created with the\n   \"detail=none\" or \"detail=column\" option.\n\n xRowid:\n   Returns the rowid of the current row.\n\n xTokenize:\n   Tokenize text using the tokenizer belonging to the FTS5 table.\n\n xQueryPhrase(pFts5, iPhrase, pUserData, xCallback):\n   This API function is used to query the FTS table for phrase iPhrase\n   of the current query. Specifically, a query equivalent to:\n\n       ... FROM ftstable WHERE ftstable MATCH $p ORDER BY rowid\n\n   with $p set to a phrase equivalent to the phrase iPhrase of the\n   current query is executed. Any column filter that applies to\n   phrase iPhrase of the current query is included in $p. For each\n   row visited, the callback function passed as the fourth argument\n   is invoked. The context and API objects passed to the callback\n   function may be used to access the properties of each matched row.\n   Invoking Api.xUserData() returns a copy of the pointer passed as\n   the third argument to pUserData.\n\n   If parameter iPhrase is less than zero, or greater than or equal to\n   the number of phrases in the query, as returned by xPhraseCount(),\n   this function returns SQLITE_RANGE.\n\n   If the callback function returns any value other than SQLITE_OK, the\n   query is abandoned and the xQueryPhrase function returns immediately.\n   If the returned value is SQLITE_DONE, xQueryPhrase returns SQLITE_OK.\n   Otherwise, the error code is propagated upwards.\n\n   If the query runs to completion without incident, SQLITE_OK is returned.\n   Or, if some error occurs before the query completes or is aborted by\n   the callback, an SQLite error code is returned.\n\n\n xSetAuxdata(pFts5, pAux, xDelete)\n\n   Save the pointer passed as the second argument as the extension function's\n   \"auxiliary data\". The pointer may then be retrieved by the current or any\n   future invocation of the same fts5 extension function made as part of\n   the same MATCH query using the xGetAuxdata() API.\n\n   Each extension function is allocated a single auxiliary data slot for\n   each FTS query (MATCH expression). If the extension function is invoked\n   more than once for a single FTS query, then all invocations share a\n   single auxiliary data context.\n\n   If there is already an auxiliary data pointer when this function is\n   invoked, then it is replaced by the new pointer. If an xDelete callback\n   was specified along with the original pointer, it is invoked at this\n   point.\n\n   The xDelete callback, if one is specified, is also invoked on the\n   auxiliary data pointer after the FTS5 query has finished.\n\n   If an error (e.g. an OOM condition) occurs within this function,\n   the auxiliary data is set to NULL and an error code returned. If the\n   xDelete parameter was not NULL, it is invoked on the auxiliary data\n   pointer before returning.\n\n\n xGetAuxdata(pFts5, bClear)\n\n   Returns the current auxiliary data pointer for the fts5 extension\n   function. See the xSetAuxdata() method for details.\n\n   If the bClear argument is non-zero, then the auxiliary data is cleared\n   (set to NULL) before this function returns. In this case the xDelete,\n   if any, is not invoked.\n\n\n xRowCount(pFts5, pnRow)\n\n   This function is used to retrieve the total number of rows in the table.\n   In other words, the same value that would be returned by:\n\n        SELECT count(*) FROM ftstable;\n\n xPhraseFirst()\n   This function is used, along with type Fts5PhraseIter and the xPhraseNext\n   method, to iterate through all instances of a single query phrase within\n   the current row. This is the same information as is accessible via the\n   xInstCount/xInst APIs. While the xInstCount/xInst APIs are more convenient\n   to use, this API may be faster under some circumstances. To iterate\n   through instances of phrase iPhrase, use the following code:\n\n       Fts5PhraseIter iter;\n       int iCol, iOff;\n       for(pApi->xPhraseFirst(pFts, iPhrase, &iter, &iCol, &iOff);\n           iCol>=0;\n           pApi->xPhraseNext(pFts, &iter, &iCol, &iOff)\n       ){\n         // An instance of phrase iPhrase at offset iOff of column iCol\n       }\n\n   The Fts5PhraseIter structure is defined above. Applications should not\n   modify this structure directly - it should only be used as shown above\n   with the xPhraseFirst() and xPhraseNext() API methods (and by\n   xPhraseFirstColumn() and xPhraseNextColumn() as illustrated below).\n\n   This API can be quite slow if used with an FTS5 table created with the\n   \"detail=none\" or \"detail=column\" option. If the FTS5 table is created\n   with either \"detail=none\" or \"detail=column\" and \"content=\" option\n   (i.e. if it is a contentless table), then this API always iterates\n   through an empty set (all calls to xPhraseFirst() set iCol to -1).\n\n   In all cases, matches are visited in (column ASC, offset ASC) order.\n   i.e. all those in column 0, sorted by offset, followed by those in\n   column 1, etc.\n\n xPhraseNext()\n   See xPhraseFirst above.\n\n xPhraseFirstColumn()\n   This function and xPhraseNextColumn() are similar to the xPhraseFirst()\n   and xPhraseNext() APIs described above. The difference is that instead\n   of iterating through all instances of a phrase in the current row, these\n   APIs are used to iterate through the set of columns in the current row\n   that contain one or more instances of a specified phrase. For example:\n\n       Fts5PhraseIter iter;\n       int iCol;\n       for(pApi->xPhraseFirstColumn(pFts, iPhrase, &iter, &iCol);\n           iCol>=0;\n           pApi->xPhraseNextColumn(pFts, &iter, &iCol)\n       ){\n         // Column iCol contains at least one instance of phrase iPhrase\n       }\n\n   This API can be quite slow if used with an FTS5 table created with the\n   \"detail=none\" option. If the FTS5 table is created with either\n   \"detail=none\" \"content=\" option (i.e. if it is a contentless table),\n   then this API always iterates through an empty set (all calls to\n   xPhraseFirstColumn() set iCol to -1).\n\n   The information accessed using this API and its companion\n   xPhraseFirstColumn() may also be obtained using xPhraseFirst/xPhraseNext\n   (or xInst/xInstCount). The chief advantage of this API is that it is\n   significantly more efficient than those alternatives when used with\n   \"detail=column\" tables.\n\n xPhraseNextColumn()\n   See xPhraseFirstColumn above.\n\n xQueryToken(pFts5, iPhrase, iToken, ppToken, pnToken)\n   This is used to access token iToken of phrase iPhrase of the current\n   query. Before returning, output parameter *ppToken is set to point\n   to a buffer containing the requested token, and *pnToken to the\n   size of this buffer in bytes.\n\n   If iPhrase or iToken are less than zero, or if iPhrase is greater than\n   or equal to the number of phrases in the query as reported by\n   xPhraseCount(), or if iToken is equal to or greater than the number of\n   tokens in the phrase, SQLITE_RANGE is returned and *ppToken and *pnToken\n   are both zeroed.\n\n   The output text is not a copy of the query text that specified the\n   token. It is the output of the tokenizer module. For tokendata=1\n   tables, this includes any embedded 0x00 and trailing data.\n\n xInstToken(pFts5, iIdx, iToken, ppToken, pnToken)\n   This is used to access token iToken of phrase hit iIdx within the\n   current row. If iIdx is less than zero or greater than or equal to the\n   value returned by xInstCount(), SQLITE_RANGE is returned.  Otherwise,\n   output variable (*ppToken) is set to point to a buffer containing the\n   matching document token, and (*pnToken) to the size of that buffer in\n   bytes.\n\n   The output text is not a copy of the document text that was tokenized.\n   It is the output of the tokenizer module. For tokendata=1 tables, this\n   includes any embedded 0x00 and trailing data.\n\n   This API may be slow in some cases if the token identified by parameters\n   iIdx and iToken matched a prefix token in the query. In most cases, the\n   first call to this API for each prefix token in the query is forced\n   to scan the portion of the full-text index that matches the prefix\n   token to collect the extra data required by this API. If the prefix\n   token matches a large number of token instances in the document set,\n   this may be a performance problem.\n\n   If the user knows in advance that a query may use this API for a\n   prefix token, FTS5 may be configured to collect all required data as part\n   of the initial querying of the full-text index, avoiding the second scan\n   entirely. This also causes prefix queries that do not use this API to\n   run more slowly and use more memory. FTS5 may be configured in this way\n   either on a per-table basis using the [FTS5 insttoken | 'insttoken']\n   option, or on a per-query basis using the\n   [fts5_insttoken | fts5_insttoken()] user function.\n\n   This API can be quite slow if used with an FTS5 table created with the\n   \"detail=none\" or \"detail=column\" option.\n\n xColumnLocale(pFts5, iIdx, pzLocale, pnLocale)\n   If parameter iCol is less than zero, or greater than or equal to the\n   number of columns in the table, SQLITE_RANGE is returned.\n\n   Otherwise, this function attempts to retrieve the locale associated\n   with column iCol of the current row. Usually, there is no associated\n   locale, and output parameters (*pzLocale) and (*pnLocale) are set\n   to NULL and 0, respectively. However, if the fts5_locale() function\n   was used to associate a locale with the value when it was inserted\n   into the fts5 table, then (*pzLocale) is set to point to a nul-terminated\n   buffer containing the name of the locale in utf-8 encoding. (*pnLocale)\n   is set to the size in bytes of the buffer, not including the\n   nul-terminator.\n\n   If successful, SQLITE_OK is returned. Or, if an error occurs, an\n   SQLite error code is returned. The final value of the output parameters\n   is undefined in this case.\n\n xTokenize_v2:\n   Tokenize text using the tokenizer belonging to the FTS5 table. This\n   API is the same as the xTokenize() API, except that it allows a tokenizer\n   locale to be specified.","declarations":[],"spell":"13213:8-13213:24|-1|1|2","extent":"13213:1-13265:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185],"instances":[],"uses":["12900:16-12900:32|-1|1|4","13239:18-13239:34|-1|1|4"]},{"id":73,"usr":1197259043917800615,"detailed_name":"Fts5ExtensionApi","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef struct Fts5ExtensionApi Fts5ExtensionApi","comments":"\nCUSTOM AUXILIARY FUNCTIONS\n\nVirtual table implementations may overload SQL functions by implementing\nthe sqlite3_module.xFindFunction() method.","declarations":[],"spell":"12900:33-12900:49|-1|1|2","extent":"12900:1-12900:49|-1|1|0","alias_of":72,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["12900:33-12900:49|-1|1|4","12905:9-12905:25|-1|1|4"]},{"id":74,"usr":14071495782725791562,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["12901:16-12901:27|-1|1|4"]},{"id":75,"usr":13197849977987190968,"detailed_name":"Fts5Context","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef struct Fts5Context Fts5Context","comments":"","declarations":[],"spell":"12901:28-12901:39|-1|1|2","extent":"12901:1-12901:39|-1|1|0","alias_of":74,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["12901:28-12901:39|-1|1|4","12906:3-12906:14|-1|1|4","13216:22-13216:33|-1|1|4","13218:23-13218:34|-1|1|4","13219:20-13219:31|-1|1|4","13220:27-13220:38|-1|1|4","13222:20-13222:31|-1|1|4","13228:23-13228:34|-1|1|4","13229:22-13229:33|-1|1|4","13231:21-13231:32|-1|1|4","13232:16-13232:27|-1|1|4","13234:27-13234:38|-1|1|4","13235:22-13235:33|-1|1|4","13236:22-13236:33|-1|1|4","13238:23-13238:34|-1|1|4","13239:36-13239:47|-1|1|4","13241:22-13241:33|-1|1|4","13242:24-13242:35|-1|1|4","13244:23-13244:34|-1|1|4","13245:23-13245:34|-1|1|4","13247:29-13247:40|-1|1|4","13248:29-13248:40|-1|1|4","13251:22-13251:33|-1|1|4","13255:21-13255:32|-1|1|4","13258:24-13258:35|-1|1|4","13259:23-13259:34|-1|1|4"]},{"id":76,"usr":13736076028612165045,"detailed_name":"Fts5PhraseIter","short_name_offset":0,"short_name_size":14,"kind":23,"hover":"","comments":"","declarations":[],"spell":"12912:8-12912:22|-1|1|2","extent":"12912:1-12915:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[160,161],"instances":[],"uses":["12902:16-12902:30|-1|1|4"]},{"id":77,"usr":17686672791018226265,"detailed_name":"Fts5PhraseIter","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef struct Fts5PhraseIter Fts5PhraseIter","comments":"","declarations":[],"spell":"12902:31-12902:45|-1|1|2","extent":"12902:1-12902:45|-1|1|0","alias_of":76,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["12902:31-12902:45|-1|1|4","13244:50-13244:64|-1|1|4","13245:37-13245:51|-1|1|4","13247:56-13247:70|-1|1|4","13248:43-13248:57|-1|1|4"]},{"id":78,"usr":12685134312312558309,"detailed_name":"fts5_extension_function","short_name_offset":0,"short_name_size":23,"kind":252,"hover":"","comments":"","declarations":[],"spell":"12904:16-12904:39|-1|1|2","extent":"12904:1-12910:2|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["12904:16-12904:39|-1|1|4","13585:5-13585:28|-1|1|4"]},{"id":79,"usr":9874418429459599035,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13494:16-13494:29|-1|1|4"]},{"id":80,"usr":2121109813438223797,"detailed_name":"Fts5Tokenizer","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef struct Fts5Tokenizer Fts5Tokenizer","comments":"\nCUSTOM TOKENIZERS\n\nApplications may also register custom tokenizer types. A tokenizer\nis registered by providing fts5 with a populated instance of the\nfollowing structure. All structure methods must be defined, setting\nany member of the fts5_tokenizer struct to NULL leads to undefined\nbehaviour. The structure methods are expected to function as follows:\n\nxCreate:\nThis function is used to allocate and initialize a tokenizer instance.\nA tokenizer instance is required to actually tokenize text.\n\nThe first argument passed to this function is a copy of the (void*)\npointer provided by the application when the fts5_tokenizer_v2 object\nwas registered with FTS5 (the third argument to xCreateTokenizer()).\nThe second and third arguments are an array of nul-terminated strings\ncontaining the tokenizer arguments, if any, specified following the\ntokenizer name as part of the CREATE VIRTUAL TABLE statement used\nto create the FTS5 table.\n\nThe final argument is an output variable. If successful, (*ppOut)\nshould be set to point to the new tokenizer handle and SQLITE_OK\nreturned. If an error occurs, some value other than SQLITE_OK should\nbe returned. In this case, fts5 assumes that the final value of *ppOut\nis undefined.\n\nxDelete:\nThis function is invoked to delete a tokenizer handle previously\nallocated using xCreate(). Fts5 guarantees that this function will\nbe invoked exactly once for each successful call to xCreate().\n\nxTokenize:\nThis function is expected to tokenize the nText byte string indicated\nby argument pText. pText may or may not be nul-terminated. The first\nargument passed to this function is a pointer to an Fts5Tokenizer object\nreturned by an earlier call to xCreate().\n\nThe third argument indicates the reason that FTS5 is requesting\ntokenization of the supplied text. This is always one of the following\nfour values:\n\nul><li> <b>FTS5_TOKENIZE_DOCUMENT</b> - A document is being inserted into\nor removed from the FTS table. The tokenizer is being invoked to\ndetermine the set of tokens to add to (or delete from) the\nFTS index.\n\nli> <b>FTS5_TOKENIZE_QUERY</b> - A MATCH query is being executed\nagainst the FTS index. The tokenizer is being called to tokenize\na bareword or quoted string specified as part of the query.\n\nli> <b>(FTS5_TOKENIZE_QUERY | FTS5_TOKENIZE_PREFIX)</b> - Same as\nFTS5_TOKENIZE_QUERY, except that the bareword or quoted string is\nfollowed by a \"*\" character, indicating that the last token\nreturned by the tokenizer will be treated as a token prefix.\n\nli> <b>FTS5_TOKENIZE_AUX</b> - The tokenizer is being invoked to\nsatisfy an fts5_api.xTokenize() request made by an auxiliary\nfunction. Or an fts5_api.xColumnSize() request made by the same\non a columnsize=0 database.\nul>\n\nThe sixth and seventh arguments passed to xTokenize() - pLocale and\nnLocale - are a pointer to a buffer containing the locale to use for\ntokenization (e.g. \"en_US\") and its size in bytes, respectively. The\npLocale buffer is not nul-terminated. pLocale may be passed NULL (in\nwhich case nLocale is always 0) to indicate that the tokenizer should\nuse its default locale.\n\nFor each token in the input string, the supplied callback xToken() must\nbe invoked. The first argument to it should be a copy of the pointer\npassed as the second argument to xTokenize(). The third and fourth\narguments are a pointer to a buffer containing the token text, and the\nsize of the token in bytes. The 4th and 5th arguments are the byte offsets\nof the first byte of and first byte immediately following the text from\nwhich the token is derived within the input.\n\nThe second argument passed to the xToken() callback (\"tflags\") should\nnormally be set to 0. The exception is if the tokenizer supports\nsynonyms. In this case see the discussion below for details.\n\nFTS5 assumes the xToken() callback is invoked for each token in the\norder that they occur within the input text.\n\nIf an xToken() callback returns any value other than SQLITE_OK, then\nthe tokenization should be abandoned and the xTokenize() method should\nimmediately return a copy of the xToken() return value. Or, if the\ninput buffer is exhausted, xTokenize() should return SQLITE_OK. Finally,\nif an error occurs with the xTokenize() implementation itself, it\nmay abandon the tokenization and return any error code other than\nSQLITE_OK or SQLITE_DONE.\n\nIf the tokenizer is registered using an fts5_tokenizer_v2 object,\nthen the xTokenize() method has two additional arguments - pLocale\nand nLocale. These specify the locale that the tokenizer should use\nfor the current request. If pLocale and nLocale are both 0, then the\ntokenizer should use its default locale. Otherwise, pLocale points to\nan nLocale byte buffer containing the name of the locale to use as utf-8\ntext. pLocale is not nul-terminated.\n\nFTS5_TOKENIZER\n\nThere is also an fts5_tokenizer object. This is an older, deprecated,\nversion of fts5_tokenizer_v2. It is similar except that:\n\nul>\nli> There is no \"iVersion\" field, and\nli> The xTokenize() method does not take a locale argument.\nul>\n\nLegacy fts5_tokenizer tokenizers must be registered using the\nlegacy xCreateTokenizer() function, instead of xCreateTokenizer_v2().\n\nTokenizer implementations registered using either API may be retrieved\nusing both xFindTokenizer() and xFindTokenizer_v2().\n\nSYNONYM SUPPORT\n\nCustom tokenizers may also support synonyms. Consider a case in which a\nuser wishes to query for a phrase such as \"first place\". Using the\nbuilt-in tokenizers, the FTS5 query 'first + place' will match instances\nof \"first place\" within the document set, but not alternative forms\nsuch as \"1st place\". In some applications, it would be better to match\nall instances of \"first place\" or \"1st place\" regardless of which form\nthe user specified in the MATCH query text.\n\nThere are several ways to approach this in FTS5:\n\nol><li> By mapping all synonyms to a single token. In this case, using\nthe above example, this means that the tokenizer returns the\nsame token for inputs \"first\" and \"1st\". Say that token is in\nfact \"first\", so that when the user inserts the document \"I won\n1st place\" entries are added to the index for tokens \"i\", \"won\",\n\"first\" and \"place\". If the user then queries for '1st + place',\nthe tokenizer substitutes \"first\" for \"1st\" and the query works\nas expected.\n\nli> By querying the index for all synonyms of each query term\nseparately. In this case, when tokenizing query text, the\ntokenizer may provide multiple synonyms for a single term\nwithin the document. FTS5 then queries the index for each\nsynonym individually. For example, faced with the query:\n\ncodeblock>\n... MATCH 'first place'</codeblock>\n\nthe tokenizer offers both \"1st\" and \"first\" as synonyms for the\nfirst token in the MATCH query and FTS5 effectively runs a query\nsimilar to:\n\ncodeblock>\n... MATCH '(first OR 1st) place'</codeblock>\n\nexcept that, for the purposes of auxiliary functions, the query\nstill appears to contain just two phrases - \"(first OR 1st)\"\nbeing treated as a single phrase.\n\nli> By adding multiple synonyms for a single term to the FTS index.\nUsing this method, when tokenizing document text, the tokenizer\nprovides multiple synonyms for each token. So that when a\ndocument such as \"I won first place\" is tokenized, entries are\nadded to the FTS index for \"i\", \"won\", \"first\", \"1st\" and\n\"place\".\n\nThis way, even if the tokenizer does not provide synonyms\nwhen tokenizing query text (it should not - to do so would be\ninefficient), it doesn't matter if the user queries for\n'first + place' or '1st + place', as there are entries in the\nFTS index corresponding to both forms of the first token.\nol>\n\nWhether it is parsing document or query text, any call to xToken that\nspecifies a <i>tflags</i> argument with the FTS5_TOKEN_COLOCATED bit\nis considered to supply a synonym for the previous token. For example,\nwhen parsing the document \"I won first place\", a tokenizer that supports\nsynonyms would call xToken() 5 times, as follows:\n\ncodeblock>\nxToken(pCtx, 0, \"i\",                      1,  0,  1);\nxToken(pCtx, 0, \"won\",                    3,  2,  5);\nxToken(pCtx, 0, \"first\",                  5,  6, 11);\nxToken(pCtx, FTS5_TOKEN_COLOCATED, \"1st\", 3,  6, 11);\nxToken(pCtx, 0, \"place\",                  5, 12, 17);\ncodeblock>\n\nIt is an error to specify the FTS5_TOKEN_COLOCATED flag the first time\nxToken() is called. Multiple synonyms may be specified for a single token\nby making multiple calls to xToken(FTS5_TOKEN_COLOCATED) in sequence.\nThere is no limit to the number of synonyms that may be provided for a\nsingle token.\n\nIn many cases, method (1) above is the best approach. It does not add\nextra data to the FTS index or require FTS5 to query for multiple terms,\nso it is efficient in terms of disk space and query speed. However, it\ndoes not support prefix queries very well. If, as suggested above, the\ntoken \"first\" is substituted for \"1st\" by the tokenizer, then the query:\n\ncodeblock>\n... MATCH '1s*'</codeblock>\n\nwill not match documents that contain the token \"1st\" (as the tokenizer\nwill probably not map \"1s\" to any prefix of \"first\").\n\nFor full prefix support, method (3) may be preferred. In this case,\nbecause the index contains entries for both \"first\" and \"1st\", prefix\nqueries such as 'fi*' or '1s*' will match correctly. However, because\nextra entries are added to the FTS index, this method uses more space\nwithin the database.\n\nMethod (2) offers a midpoint between (1) and (3). Using this method,\na query such as '1s*' will match documents that contain the literal\ntoken \"1st\", but not \"first\" (assuming the tokenizer is not able to\nprovide synonyms for prefixes). However, a non-prefix query like '1st'\nwill match against \"1st\" and \"first\". This method does not require\nextra disk space, as no extra entries are added to the FTS index.\nOn the other hand, it may require more CPU cycles to run MATCH queries,\nas separate queries of the FTS index are required for each synonym.\n\nWhen using methods (2) or (3), it is important that the tokenizer only\nprovide synonyms when tokenizing document text (method (3)) or query\ntext (method (2)), not both. Doing so will not cause any errors, but is\ninefficient.","declarations":[],"spell":"13494:30-13494:43|-1|1|2","extent":"13494:1-13494:43|-1|1|0","alias_of":79,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13494:30-13494:43|-1|1|4","13499:55-13499:68|-1|1|4","13500:19-13500:32|-1|1|4","13501:20-13501:33|-1|1|4","13524:55-13524:68|-1|1|4","13525:19-13525:32|-1|1|4","13526:20-13526:33|-1|1|4"]},{"id":81,"usr":10079255287457623635,"detailed_name":"fts5_tokenizer_v2","short_name_offset":0,"short_name_size":17,"kind":23,"hover":"","comments":"","declarations":[],"spell":"13496:8-13496:25|-1|1|2","extent":"13496:1-13515:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[186,187,188,189],"instances":[],"uses":["13495:16-13495:33|-1|1|4"]},{"id":82,"usr":15200568213644539545,"detailed_name":"fts5_tokenizer_v2","short_name_offset":0,"short_name_size":17,"kind":252,"hover":"typedef struct fts5_tokenizer_v2 fts5_tokenizer_v2","comments":"","declarations":[],"spell":"13495:34-13495:51|-1|1|2","extent":"13495:1-13495:51|-1|1|0","alias_of":81,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13495:34-13495:51|-1|1|4","13596:5-13596:22|-1|1|4","13605:5-13605:22|-1|1|4"]},{"id":83,"usr":8352856203261453899,"detailed_name":"fts5_tokenizer","short_name_offset":0,"short_name_size":14,"kind":23,"hover":"","comments":"","declarations":[],"spell":"13523:8-13523:22|-1|1|2","extent":"13523:1-13539:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[190,191,192],"instances":[],"uses":["13522:16-13522:30|-1|1|4"]},{"id":84,"usr":13713771925262030345,"detailed_name":"fts5_tokenizer","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef struct fts5_tokenizer fts5_tokenizer","comments":"\n New code should use the fts5_tokenizer_v2 type to define tokenizer\n implementations. The following type is included for legacy applications\n that still use it.","declarations":[],"spell":"13522:31-13522:45|-1|1|2","extent":"13522:1-13522:45|-1|1|0","alias_of":83,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13522:31-13522:45|-1|1|4","13568:5-13568:19|-1|1|4","13577:5-13577:19|-1|1|4"]},{"id":85,"usr":428261431932951662,"detailed_name":"fts5_api","short_name_offset":0,"short_name_size":8,"kind":23,"hover":"","comments":"","declarations":[],"spell":"13560:8-13560:16|-1|1|2","extent":"13560:1-13607:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[193,194,195,196,197,198],"instances":[],"uses":["13559:16-13559:24|-1|1|4","13565:5-13565:13|-1|1|4","13574:5-13574:13|-1|1|4","13582:5-13582:13|-1|1|4","13593:5-13593:13|-1|1|4","13602:5-13602:13|-1|1|4"]},{"id":86,"usr":7240506933465184259,"detailed_name":"fts5_api","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"typedef struct fts5_api fts5_api","comments":"\nFTS5 EXTENSION REGISTRATION API","declarations":[],"spell":"13559:25-13559:33|-1|1|2","extent":"13559:1-13559:33|-1|1|0","alias_of":85,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13559:25-13559:33|-1|1|4"]}],"funcs":[{"id":0,"usr":6442713711173885707,"detailed_name":"const char *sqlite3_libversion()","short_name_offset":12,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"186:24-186:42|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":9021027737552284527,"detailed_name":"const char *sqlite3_sourceid()","short_name_offset":12,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"187:24-187:40|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":15021410193096100270,"detailed_name":"int sqlite3_libversion_number()","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"188:16-188:41|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":10905098577914192497,"detailed_name":"int sqlite3_compileoption_used(const char *zOptName)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"213:16-213:42|-1|1|1","param_spellings":["213:55-213:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":1409653323892248101,"detailed_name":"const char *sqlite3_compileoption_get(int N)","short_name_offset":12,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"214:24-214:49|-1|1|1","param_spellings":["214:54-214:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":18204120612623218144,"detailed_name":"int sqlite3_threadsafe()","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Test To See If The Library Is Threadsafe\n\n ^The sqlite3_threadsafe() function returns zero if and only if\n SQLite was compiled with mutexing code omitted due to the\n [SQLITE_THREADSAFE] compile-time option being set to 0.\n\n SQLite can be compiled with or without mutexes.  When\n the [SQLITE_THREADSAFE] C preprocessor macro is 1 or 2, mutexes\n are enabled and SQLite is threadsafe.  When the\n [SQLITE_THREADSAFE] macro is 0,\n the mutexes are omitted.  Without the mutexes, it is not safe\n to use SQLite concurrently from more than one thread.\n\n Enabling mutexes incurs a measurable performance penalty.\n So if speed is of utmost importance, it makes sense to disable\n the mutexes.  But for maximum safety, mutexes should be enabled.\n ^The default behavior is for mutexes to be enabled.\n\n This interface can be used by an application to make sure that the\n version of SQLite that it is linking against was compiled with\n the desired setting of the [SQLITE_THREADSAFE] macro.\n\n This interface only reports on the compile-time mutex setting\n of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with\n SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but\n can be fully or partially disabled using a call to [sqlite3_config()]\n with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD],\n or [SQLITE_CONFIG_SERIALIZED].  ^(The return value of the\n sqlite3_threadsafe() function shows only the compile-time setting of\n thread safety, not any run-time changes to that setting made by\n sqlite3_config(). In other words, the return value from sqlite3_threadsafe()\n is unchanged by calls to sqlite3_config().)^\n\n See the [threading mode] documentation for additional information.","declarations":[{"spell":"256:16-256:34|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":4770279971788159355,"detailed_name":"int sqlite3_close(sqlite3 *)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Closing A Database Connection\n DESTRUCTOR: sqlite3\n\n ^The sqlite3_close() and sqlite3_close_v2() routines are destructors\n for the [sqlite3] object.\n ^Calls to sqlite3_close() and sqlite3_close_v2() return [SQLITE_OK] if\n the [sqlite3] object is successfully destroyed and all associated\n resources are deallocated.\n\n Ideally, applications should [sqlite3_finalize | finalize] all\n [prepared statements], [sqlite3_blob_close | close] all [BLOB handles], and\n [sqlite3_backup_finish | finish] all [sqlite3_backup] objects associated\n with the [sqlite3] object prior to attempting to close the object.\n ^If the database connection is associated with unfinalized prepared\n statements, BLOB handlers, and/or unfinished sqlite3_backup objects then\n sqlite3_close() will leave the database connection open and return\n [SQLITE_BUSY]. ^If sqlite3_close_v2() is called with unfinalized prepared\n statements, unclosed BLOB handlers, and/or unfinished sqlite3_backups,\n it returns [SQLITE_OK] regardless, but instead of deallocating the database\n connection immediately, it marks the database connection as an unusable\n \"zombie\" and makes arrangements to automatically deallocate the database\n connection after all prepared statements are finalized, all BLOB handles\n are closed, and all backups have finished. The sqlite3_close_v2() interface\n is intended for use with host languages that are garbage collected, and\n where the order in which destructors are called is arbitrary.\n\n ^If an [sqlite3] object is destroyed while a transaction is open,\n the transaction is automatically rolled back.\n\n The C parameter to [sqlite3_close(C)] and [sqlite3_close_v2(C)]\n must be either a NULL\n pointer or an [sqlite3] object pointer obtained\n from [sqlite3_open()], [sqlite3_open16()], or\n [sqlite3_open_v2()], and not previously closed.\n ^Calling sqlite3_close() or sqlite3_close_v2() with a NULL pointer\n argument is a harmless no-op.","declarations":[{"spell":"353:16-353:29|-1|1|1","param_spellings":["353:38-353:38"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":5391633052628945940,"detailed_name":"int sqlite3_close_v2(sqlite3 *)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"354:16-354:32|-1|1|1","param_spellings":["354:41-354:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":324039484681040392,"detailed_name":"int sqlite3_exec(sqlite3 *, const char *sql, int (*)(void *, int, char **, char **) callback, void *, char **errmsg)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: One-Step Query Execution Interface\n METHOD: sqlite3\n\n The sqlite3_exec() interface is a convenience wrapper around\n [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],\n that allows an application to run multiple statements of SQL\n without having to use a lot of C code.\n\n ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,\n semicolon-separate SQL statements passed into its 2nd argument,\n in the context of the [database connection] passed in as its 1st\n argument.  ^If the callback function of the 3rd argument to\n sqlite3_exec() is not NULL, then it is invoked for each result row\n coming out of the evaluated SQL statements.  ^The 4th argument to\n sqlite3_exec() is relayed through to the 1st argument of each\n callback invocation.  ^If the callback pointer to sqlite3_exec()\n is NULL, then no callback is ever invoked and result rows are\n ignored.\n\n ^If an error occurs while evaluating the SQL statements passed into\n sqlite3_exec(), then execution of the current statement stops and\n subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()\n is not NULL then any error message is written into memory obtained\n from [sqlite3_malloc()] and passed back through the 5th parameter.\n To avoid memory leaks, the application should invoke [sqlite3_free()]\n on error message strings returned through the 5th parameter of\n sqlite3_exec() after the error message string is no longer needed.\n ^If the 5th parameter to sqlite3_exec() is not NULL and no errors\n occur, then sqlite3_exec() sets the pointer in its 5th parameter to\n NULL before returning.\n\n ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()\n routine returns SQLITE_ABORT without invoking the callback again and\n without running any subsequent SQL statements.\n\n ^The 2nd argument to the sqlite3_exec() callback function is the\n number of columns in the result.  ^The 3rd argument to the sqlite3_exec()\n callback is an array of pointers to strings obtained as if from\n [sqlite3_column_text()], one for each column.  ^If an element of a\n result row is NULL then the corresponding string pointer for the\n sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the\n sqlite3_exec() callback is an array of pointers to strings where each\n entry represents the name of corresponding result column as obtained\n from [sqlite3_column_name()].\n\n ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer\n to an empty string, or a pointer that contains only whitespace and/or\n SQL comments, then no SQL statements are evaluated and the database\n is not changed.\n\n Restrictions:\n\n <ul>\n <li> The application must ensure that the 1st parameter to sqlite3_exec()\n      is a valid and open [database connection].\n <li> The application must not close the [database connection] specified by\n      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.\n <li> The application must not modify the SQL statement text passed into\n      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.\n <li> The application must not dereference the arrays or string pointers\n       passed as the 3rd and 4th callback parameters after it returns.\n </ul>","declarations":[{"spell":"427:16-427:28|-1|1|1","param_spellings":["428:11-428:11","429:15-429:18","430:9-430:17","431:9-431:9","432:10-432:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":2284793773945539547,"detailed_name":"int sqlite3_initialize()","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Initialize The SQLite Library\n\n ^The sqlite3_initialize() routine initializes the\n SQLite library.  ^The sqlite3_shutdown() routine\n deallocates any resources that were allocated by sqlite3_initialize().\n These routines are designed to aid in process initialization and\n shutdown on embedded systems.  Workstation applications using\n SQLite normally do not need to invoke either of these routines.\n\n A call to sqlite3_initialize() is an \"effective\" call if it is\n the first time sqlite3_initialize() is invoked during the lifetime of\n the process, or if it is the first time sqlite3_initialize() is invoked\n following a call to sqlite3_shutdown().  ^(Only an effective call\n of sqlite3_initialize() does any initialization.  All other calls\n are harmless no-ops.)^\n\n A call to sqlite3_shutdown() is an \"effective\" call if it is the first\n call to sqlite3_shutdown() since the last sqlite3_initialize().  ^(Only\n an effective call to sqlite3_shutdown() does any deinitialization.\n All other valid calls to sqlite3_shutdown() are harmless no-ops.)^\n\n The sqlite3_initialize() interface is threadsafe, but sqlite3_shutdown()\n is not.  The sqlite3_shutdown() interface must only be called from a\n single thread.  All open [database connections] must be closed and all\n other SQLite resources must be deallocated prior to invoking\n sqlite3_shutdown().\n\n Among other things, ^sqlite3_initialize() will invoke\n sqlite3_os_init().  Similarly, ^sqlite3_shutdown()\n will invoke sqlite3_os_end().\n\n ^The sqlite3_initialize() routine returns [SQLITE_OK] on success.\n ^If for some reason, sqlite3_initialize() is unable to initialize\n the library (perhaps it is unable to allocate a needed resource such\n as a mutex) it returns an [error code] other than [SQLITE_OK].\n\n ^The sqlite3_initialize() routine is called internally by many other\n SQLite interfaces so that an application usually does not need to\n invoke sqlite3_initialize() directly.  For example, [sqlite3_open()]\n calls sqlite3_initialize() so the SQLite library will be automatically\n initialized when [sqlite3_open()] is called if it has not be initialized\n already.  ^However, if SQLite is compiled with the [SQLITE_OMIT_AUTOINIT]\n compile-time option, then the automatic calls to sqlite3_initialize()\n are omitted and the application must call sqlite3_initialize() directly\n prior to using any other SQLite interface.  For maximum portability,\n it is recommended that applications always invoke sqlite3_initialize()\n directly prior to using any other SQLite interface.  Future releases\n of SQLite may require this.  In other words, the behavior exhibited\n when SQLite is compiled with [SQLITE_OMIT_AUTOINIT] might become the\n default behavior in some future release of SQLite.\n\n The sqlite3_os_init() routine does operating-system specific\n initialization of the SQLite library.  The sqlite3_os_end()\n routine undoes the effect of sqlite3_os_init().  Typical tasks\n performed by these routines include allocation or deallocation\n of static resources, initialization of global variables,\n setting up a default [sqlite3_vfs] module, or setting up\n a default configuration using [sqlite3_config()].\n\n The application should never invoke either sqlite3_os_init()\n or sqlite3_os_end() directly.  The application should only invoke\n sqlite3_initialize() and sqlite3_shutdown().  The sqlite3_os_init()\n interface is called automatically by sqlite3_initialize() and\n sqlite3_os_end() is called by sqlite3_shutdown().  Appropriate\n implementations for sqlite3_os_init() and sqlite3_os_end()\n are built into SQLite when it is compiled for Unix, Windows, or OS/2.\n When [custom builds | built for other platforms]\n (using the [SQLITE_OS_OTHER=1] compile-time\n option) the application must supply a suitable implementation for\n sqlite3_os_init() and sqlite3_os_end().  An application-supplied\n implementation of sqlite3_os_init() or sqlite3_os_end()\n must return [SQLITE_OK] on success and some other [error code] upon\n failure.","declarations":[{"spell":"1658:16-1658:34|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":15972257960593389384,"detailed_name":"int sqlite3_shutdown()","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1659:16-1659:32|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":16682162892453564984,"detailed_name":"int sqlite3_os_init()","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1660:16-1660:31|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":8031533923767200152,"detailed_name":"int sqlite3_os_end()","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1661:16-1661:30|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":10256050963608388877,"detailed_name":"int sqlite3_config(int, ...)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Configuring The SQLite Library\n\n The sqlite3_config() interface is used to make global configuration\n changes to SQLite in order to tune SQLite to the specific needs of\n the application.  The default configuration is recommended for most\n applications and so this routine is usually not necessary.  It is\n provided to support rare applications with unusual needs.\n\n <b>The sqlite3_config() interface is not threadsafe. The application\n must ensure that no other SQLite interfaces are invoked by other\n threads while sqlite3_config() is running.</b>\n\n The first argument to sqlite3_config() is an integer\n [configuration option] that determines\n what property of SQLite is to be configured.  Subsequent arguments\n vary depending on the [configuration option]\n in the first argument.\n\n For most configuration options, the sqlite3_config() interface\n may only be invoked prior to library initialization using\n [sqlite3_initialize()] or after shutdown by [sqlite3_shutdown()].\n The exceptional configuration options that may be invoked at any time\n are called \"anytime configuration options\".\n ^If sqlite3_config() is called after [sqlite3_initialize()] and before\n [sqlite3_shutdown()] with a first argument that is not an anytime\n configuration option, then the sqlite3_config() call will return SQLITE_MISUSE.\n Note, however, that ^sqlite3_config() can be called as part of the\n implementation of an application-defined [sqlite3_os_init()].\n\n ^When a configuration option is set, sqlite3_config() returns [SQLITE_OK].\n ^If the option is unknown or SQLite is unable to set the option\n then this routine returns a non-zero [error code].","declarations":[{"spell":"1697:16-1697:30|-1|1|1","param_spellings":["1697:34-1697:34"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":17657551682854350115,"detailed_name":"int sqlite3_db_config(sqlite3 *, int op, ...)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Configure database connections\n METHOD: sqlite3\n\n The sqlite3_db_config() interface is used to make configuration\n changes to a [database connection].  The interface is similar to\n [sqlite3_config()] except that the changes apply to a single\n [database connection] (specified in the first argument).\n\n The second argument to sqlite3_db_config(D,V,...)  is the\n [SQLITE_DBCONFIG_LOOKASIDE | configuration verb] - an integer code\n that indicates what aspect of the [database connection] is being configured.\n Subsequent arguments vary depending on the configuration verb.\n\n ^Calls to sqlite3_db_config() return SQLITE_OK if and only if\n the call is considered successful.","declarations":[{"spell":"1716:16-1716:33|-1|1|1","param_spellings":["1716:42-1716:42","1716:48-1716:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":12591028495318981361,"detailed_name":"int sqlite3_extended_result_codes(sqlite3 *, int onoff)","short_name_offset":4,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Enable Or Disable Extended Result Codes\n METHOD: sqlite3\n\n ^The sqlite3_extended_result_codes() routine enables or disables the\n [extended result codes] feature of SQLite. ^The extended result\n codes are disabled by default for historical compatibility.","declarations":[{"spell":"2558:16-2558:45|-1|1|1","param_spellings":["2558:54-2558:54","2558:60-2558:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":7076630749477425289,"detailed_name":"sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *)","short_name_offset":14,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Last Insert Rowid\n METHOD: sqlite3\n\n ^Each entry in most SQLite tables (except for [WITHOUT ROWID] tables)\n has a unique 64-bit signed\n integer key called the [ROWID | \"rowid\"]. ^The rowid is always available\n as an undeclared column named ROWID, OID, or _ROWID_ as long as those\n names are not also used by explicitly declared columns. ^If\n the table has a column of type [INTEGER PRIMARY KEY] then that column\n is another alias for the rowid.\n\n ^The sqlite3_last_insert_rowid(D) interface usually returns the [rowid] of\n the most recent successful [INSERT] into a rowid table or [virtual table]\n on database connection D. ^Inserts into [WITHOUT ROWID] tables are not\n recorded. ^If no successful [INSERT]s into rowid tables have ever occurred\n on the database connection D, then sqlite3_last_insert_rowid(D) returns\n zero.\n\n As well as being set automatically as rows are inserted into database\n tables, the value returned by this function may be set explicitly by\n [sqlite3_set_last_insert_rowid()]\n\n Some virtual table implementations may INSERT rows into rowid tables as\n part of committing a transaction (e.g. to flush data accumulated in memory\n to disk). In this case subsequent calls to this function return the rowid\n associated with these internal INSERT operations, which leads to\n unintuitive results. Virtual table implementations that do write to rowid\n tables in this way can avoid this problem by restoring the original\n rowid value using [sqlite3_set_last_insert_rowid()] before returning\n control to the user.\n\n ^(If an [INSERT] occurs within a trigger then this routine will\n return the [rowid] of the inserted row as long as the trigger is\n running. Once the trigger program ends, the value returned\n by this routine reverts to what it was before the trigger was fired.)^\n\n ^An [INSERT] that fails due to a constraint violation is not a\n successful [INSERT] and does not change the value returned by this\n routine.  ^Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK,\n and INSERT OR ABORT make no changes to the return value of this\n routine when their insertion fails.  ^(When INSERT OR REPLACE\n encounters a constraint violation, it does not fail.  The\n INSERT continues to completion after deleting rows that caused\n the constraint problem so INSERT OR REPLACE will always change\n the return value of this interface.)^\n\n ^For the purposes of this routine, an [INSERT] is considered to\n be successful even if it is subsequently rolled back.\n\n This function is accessible to SQL statements via the\n [last_insert_rowid() SQL function].\n\n If a separate thread performs a new [INSERT] on the same\n database connection while the [sqlite3_last_insert_rowid()]\n function is running and thus changes the last insert [rowid],\n then the value returned by [sqlite3_last_insert_rowid()] is\n unpredictable and might not equal either the old or the new\n last insert [rowid].","declarations":[{"spell":"2620:26-2620:51|-1|1|1","param_spellings":["2620:60-2620:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":3002583050252509846,"detailed_name":"void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Set the Last Insert Rowid value.\n METHOD: sqlite3\n\n The sqlite3_set_last_insert_rowid(D, R) method allows the application to\n set the value returned by calling sqlite3_last_insert_rowid(D) to R\n without inserting a row into the database.","declarations":[{"spell":"2630:17-2630:46|-1|1|1","param_spellings":["2630:55-2630:55","2630:69-2630:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":11939922124119918211,"detailed_name":"int sqlite3_changes(sqlite3 *)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Count The Number Of Rows Modified\n METHOD: sqlite3\n\n ^These functions return the number of rows modified, inserted or\n deleted by the most recently completed INSERT, UPDATE or DELETE\n statement on the database connection specified by the only parameter.\n The two functions are identical except for the type of the return value\n and that if the number of rows modified by the most recent INSERT, UPDATE,\n or DELETE is greater than the maximum value supported by type \"int\", then\n the return value of sqlite3_changes() is undefined. ^Executing any other\n type of SQL statement does not modify the value returned by these functions.\n For the purposes of this interface, a CREATE TABLE AS SELECT statement\n does not count as an INSERT, UPDATE or DELETE statement and hence the rows\n added to the new table by the CREATE TABLE AS SELECT statement are not\n counted.\n\n ^Only changes made directly by the INSERT, UPDATE or DELETE statement are\n considered - auxiliary changes caused by [CREATE TRIGGER | triggers],\n [foreign key actions] or [REPLACE] constraint resolution are not counted.\n\n Changes to a view that are intercepted by\n [INSTEAD OF trigger | INSTEAD OF triggers] are not counted. ^The value\n returned by sqlite3_changes() immediately after an INSERT, UPDATE or\n DELETE statement run on a view is always zero. Only changes made to real\n tables are counted.\n\n Things are more complicated if the sqlite3_changes() function is\n executed while a trigger program is running. This may happen if the\n program uses the [changes() SQL function], or if some other callback\n function invokes sqlite3_changes() directly. Essentially:\n\n <ul>\n   <li> ^(Before entering a trigger program the value returned by\n        sqlite3_changes() function is saved. After the trigger program\n        has finished, the original value is restored.)^\n\n   <li> ^(Within a trigger program each INSERT, UPDATE and DELETE\n        statement sets the value returned by sqlite3_changes()\n        upon completion as normal. Of course, this value will not include\n        any changes performed by sub-triggers, as the sqlite3_changes()\n        value will be saved and restored after each sub-trigger has run.)^\n </ul>\n\n ^This means that if the changes() SQL function (or similar) is used\n by the first INSERT, UPDATE or DELETE statement within a trigger, it\n returns the value as set when the calling statement began executing.\n ^If it is used by the second or subsequent such statement within a trigger\n program, the value returned reflects the number of rows modified by the\n previous INSERT, UPDATE or DELETE statement within the same trigger.\n\n If a separate thread makes changes on the same database connection\n while [sqlite3_changes()] is running then the value returned\n is unpredictable and not meaningful.\n\n See also:\n <ul>\n <li> the [sqlite3_total_changes()] interface\n <li> the [count_changes pragma]\n <li> the [changes() SQL function]\n <li> the [data_version pragma]\n </ul>","declarations":[{"spell":"2695:16-2695:31|-1|1|1","param_spellings":["2695:40-2695:40"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":1962067016437394924,"detailed_name":"sqlite3_int64 sqlite3_changes64(sqlite3 *)","short_name_offset":14,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"2696:26-2696:43|-1|1|1","param_spellings":["2696:52-2696:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":10950859615820211229,"detailed_name":"int sqlite3_total_changes(sqlite3 *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Total Number Of Rows Modified\n METHOD: sqlite3\n\n ^These functions return the total number of rows inserted, modified or\n deleted by all [INSERT], [UPDATE] or [DELETE] statements completed\n since the database connection was opened, including those executed as\n part of trigger programs. The two functions are identical except for the\n type of the return value and that if the number of rows modified by the\n connection exceeds the maximum value supported by type \"int\", then\n the return value of sqlite3_total_changes() is undefined. ^Executing\n any other type of SQL statement does not affect the value returned by\n sqlite3_total_changes().\n\n ^Changes made as part of [foreign key actions] are included in the\n count, but those made as part of REPLACE constraint resolution are\n not. ^Changes to a view that are intercepted by INSTEAD OF triggers\n are not counted.\n\n The [sqlite3_total_changes(D)] interface only reports the number\n of rows that changed due to SQL statement run against database\n connection D.  Any changes by other database connections are ignored.\n To detect changes against a database file from other database\n connections use the [PRAGMA data_version] command or the\n [SQLITE_FCNTL_DATA_VERSION] [file control].\n\n If a separate thread makes changes on the same database connection\n while [sqlite3_total_changes()] is running then the value\n returned is unpredictable and not meaningful.\n\n See also:\n <ul>\n <li> the [sqlite3_changes()] interface\n <li> the [count_changes pragma]\n <li> the [changes() SQL function]\n <li> the [data_version pragma]\n <li> the [SQLITE_FCNTL_DATA_VERSION] [file control]\n </ul>","declarations":[{"spell":"2737:16-2737:37|-1|1|1","param_spellings":["2737:46-2737:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":2679275555376152835,"detailed_name":"sqlite3_int64 sqlite3_total_changes64(sqlite3 *)","short_name_offset":14,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"2738:26-2738:49|-1|1|1","param_spellings":["2738:58-2738:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":1537121066241743588,"detailed_name":"void sqlite3_interrupt(sqlite3 *)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Interrupt A Long-Running Query\n METHOD: sqlite3\n\n ^This function causes any pending database operation to abort and\n return at its earliest opportunity. This routine is typically\n called in response to a user action such as pressing \"Cancel\"\n or Ctrl-C where the user wants a long query operation to halt\n immediately.\n\n ^It is safe to call this routine from a thread different from the\n thread that is currently running the database operation.  But it\n is not safe to call this routine with a [database connection] that\n is closed or might close before sqlite3_interrupt() returns.\n\n ^If an SQL operation is very nearly finished at the time when\n sqlite3_interrupt() is called, then it might not have an opportunity\n to be interrupted and might continue to completion.\n\n ^An SQL operation that is interrupted will return [SQLITE_INTERRUPT].\n ^If the interrupted SQL operation is an INSERT, UPDATE, or DELETE\n that is inside an explicit transaction, then the entire transaction\n will be rolled back automatically.\n\n ^The sqlite3_interrupt(D) call is in effect until all currently running\n SQL statements on [database connection] D complete.  ^Any new SQL statements\n that are started after the sqlite3_interrupt() call and before the\n running statement count reaches zero are interrupted as if they had been\n running prior to the sqlite3_interrupt() call.  ^New SQL statements\n that are started after the running statement count reaches zero are\n not effected by the sqlite3_interrupt().\n ^A call to sqlite3_interrupt(D) that occurs when there are no running\n SQL statements is a no-op and has no effect on SQL statements\n that are started after the sqlite3_interrupt() call returns.\n\n ^The [sqlite3_is_interrupted(D)] interface can be used to determine whether\n or not an interrupt is currently in effect for [database connection] D.\n It returns 1 if an interrupt is currently in effect, or 0 otherwise.","declarations":[{"spell":"2779:17-2779:34|-1|1|1","param_spellings":["2779:43-2779:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":14656938026249531677,"detailed_name":"int sqlite3_is_interrupted(sqlite3 *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"2780:16-2780:38|-1|1|1","param_spellings":["2780:47-2780:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":13975976670472034897,"detailed_name":"int sqlite3_complete(const char *sql)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine If An SQL Statement Is Complete\n\n These routines are useful during command-line input to determine if the\n currently entered text seems to form a complete SQL statement or\n if additional input is needed before sending the text into\n SQLite for parsing.  ^These routines return 1 if the input string\n appears to be a complete SQL statement.  ^A statement is judged to be\n complete if it ends with a semicolon token and is not a prefix of a\n well-formed CREATE TRIGGER statement.  ^Semicolons that are embedded within\n string literals or quoted identifier names or comments are not\n independent tokens (they are part of the token in which they are\n embedded) and thus do not count as a statement terminator.  ^Whitespace\n and comments that follow the final semicolon are ignored.\n\n ^These routines return 0 if the statement is incomplete.  ^If a\n memory allocation fails, then SQLITE_NOMEM is returned.\n\n ^These routines do not parse the SQL statements thus\n will not detect syntactically incorrect SQL.\n\n ^(If SQLite has not been initialized using [sqlite3_initialize()] prior\n to invoking sqlite3_complete16() then sqlite3_initialize() is invoked\n automatically by sqlite3_complete16().  If that initialization fails,\n then the return value from sqlite3_complete16() will be non-zero\n regardless of whether or not the input SQL is complete.)^\n\n The input to [sqlite3_complete()] must be a zero-terminated\n UTF-8 string.\n\n The input to [sqlite3_complete16()] must be a zero-terminated\n UTF-16 string in native byte order.","declarations":[{"spell":"2815:16-2815:32|-1|1|1","param_spellings":["2815:45-2815:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":11865786124064444745,"detailed_name":"int sqlite3_complete16(const void *sql)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"2816:16-2816:34|-1|1|1","param_spellings":["2816:47-2816:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":10748938097254849572,"detailed_name":"int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors\n KEYWORDS: {busy-handler callback} {busy handler}\n METHOD: sqlite3\n\n ^The sqlite3_busy_handler(D,X,P) routine sets a callback function X\n that might be invoked with argument P whenever\n an attempt is made to access a database table associated with\n [database connection] D when another thread\n or process has the table locked.\n The sqlite3_busy_handler() interface is used to implement\n [sqlite3_busy_timeout()] and [PRAGMA busy_timeout].\n\n ^If the busy callback is NULL, then [SQLITE_BUSY]\n is returned immediately upon encountering the lock.  ^If the busy callback\n is not NULL, then the callback might be invoked with two arguments.\n\n ^The first argument to the busy handler is a copy of the void* pointer which\n is the third argument to sqlite3_busy_handler().  ^The second argument to\n the busy handler callback is the number of times that the busy handler has\n been invoked previously for the same locking event.  ^If the\n busy callback returns 0, then no additional attempts are made to\n access the database and [SQLITE_BUSY] is returned\n to the application.\n ^If the callback returns non-zero, then another attempt\n is made to access the database and the cycle repeats.\n\n The presence of a busy handler does not guarantee that it will be invoked\n when there is lock contention. ^If SQLite determines that invoking the busy\n handler could result in a deadlock, it will go ahead and return [SQLITE_BUSY]\n to the application instead of invoking the\n busy handler.\n Consider a scenario where one process is holding a read lock that\n it is trying to promote to a reserved lock and\n a second process is holding a reserved lock that it is trying\n to promote to an exclusive lock.  The first process cannot proceed\n because it is blocked by the second and the second process cannot\n proceed because it is blocked by the first.  If both processes\n invoke the busy handlers, neither will make any progress.  Therefore,\n SQLite returns [SQLITE_BUSY] for the first process, hoping that this\n will induce the first process to release its read lock and allow\n the second process to proceed.\n\n ^The default busy callback is NULL.\n\n ^(There can only be a single busy handler defined for each\n [database connection].  Setting a new busy handler clears any\n previously set handler.)^  ^Note that calling [sqlite3_busy_timeout()]\n or evaluating [PRAGMA busy_timeout=N] will change the\n busy handler and thus clear any previously set busy handler.\n\n The busy callback should not take any actions which modify the\n database connection that invoked the busy handler.  In other words,\n the busy handler is not reentrant.  Any such actions\n result in undefined behavior.\n\n A busy handler must not close the database connection\n or [prepared statement] that invoked the busy handler.","declarations":[{"spell":"2877:16-2877:36|-1|1|1","param_spellings":["2877:45-2877:45","2877:51-2877:51","2877:69-2877:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":10872296672224609694,"detailed_name":"int sqlite3_busy_timeout(sqlite3 *, int ms)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Set A Busy Timeout\n METHOD: sqlite3\n\n ^This routine sets a [sqlite3_busy_handler | busy handler] that sleeps\n for a specified amount of time when a table is locked.  ^The handler\n will sleep multiple times until at least \"ms\" milliseconds of sleeping\n have accumulated.  ^After at least \"ms\" milliseconds of sleeping,\n the handler returns 0 which causes [sqlite3_step()] to return\n [SQLITE_BUSY].\n\n ^Calling this routine with an argument less than or equal to zero\n turns off all busy handlers.\n\n ^(There can only be a single busy handler for a particular\n [database connection] at any given moment.  If another busy handler\n was defined  (using [sqlite3_busy_handler()]) prior to calling\n this routine, that other busy handler is cleared.)^\n\n See also:  [PRAGMA busy_timeout]","declarations":[{"spell":"2900:16-2900:36|-1|1|1","param_spellings":["2900:45-2900:45","2900:51-2900:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":17473809417838148527,"detailed_name":"int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Convenience Routines For Running Queries\n METHOD: sqlite3\n\n This is a legacy interface that is preserved for backwards compatibility.\n Use of this interface is not recommended.\n\n Definition: A <b>result table</b> is memory data structure created by the\n [sqlite3_get_table()] interface.  A result table records the\n complete query results from one or more queries.\n\n The table conceptually has a number of rows and columns.  But\n these numbers are not part of the result table itself.  These\n numbers are obtained separately.  Let N be the number of rows\n and M be the number of columns.\n\n A result table is an array of pointers to zero-terminated UTF-8 strings.\n There are (N+1)*M elements in the array.  The first M pointers point\n to zero-terminated strings that  contain the names of the columns.\n The remaining entries all point to query results.  NULL values result\n in NULL pointers.  All other values are in their UTF-8 zero-terminated\n string representation as returned by [sqlite3_column_text()].\n\n A result table might consist of one or more memory allocations.\n It is not safe to pass a result table directly to [sqlite3_free()].\n A result table should be deallocated using [sqlite3_free_table()].\n\n ^(As an example of the result table format, suppose a query result\n is as follows:\n\n <blockquote><pre>\n        Name        | Age\n        -----------------------\n        Alice       | 43\n        Bob         | 28\n        Cindy       | 21\n </pre></blockquote>\n\n There are two columns (M==2) and three rows (N==3).  Thus the\n result table has 8 entries.  Suppose the result table is stored\n in an array named azResult.  Then azResult holds this content:\n\n <blockquote><pre>\n        azResult&#91;0] = \"Name\";\n        azResult&#91;1] = \"Age\";\n        azResult&#91;2] = \"Alice\";\n        azResult&#91;3] = \"43\";\n        azResult&#91;4] = \"Bob\";\n        azResult&#91;5] = \"28\";\n        azResult&#91;6] = \"Cindy\";\n        azResult&#91;7] = \"21\";\n </pre></blockquote>)^\n\n ^The sqlite3_get_table() function evaluates one or more\n semicolon-separated SQL statements in the zero-terminated UTF-8\n string of its 2nd parameter and returns a result table to the\n pointer given in its 3rd parameter.\n\n After the application has finished with the result from sqlite3_get_table(),\n it must pass the result table pointer to sqlite3_free_table() in order to\n release the memory that was malloced.  Because of the way the\n [sqlite3_malloc()] happens within sqlite3_get_table(), the calling\n function must not try to call [sqlite3_free()] directly.  Only\n [sqlite3_free_table()] is able to release the memory properly and safely.\n\n The sqlite3_get_table() interface is implemented as a wrapper around\n [sqlite3_exec()].  The sqlite3_get_table() routine does not have access\n to any internal data structures of SQLite.  It uses only the public\n interface defined here.  As a consequence, errors that occur in the\n wrapper layer outside of the internal [sqlite3_exec()] call are not\n reflected in subsequent calls to [sqlite3_errcode()] or\n [sqlite3_errmsg()].","declarations":[{"spell":"2975:16-2975:33|-1|1|1","param_spellings":["2976:12-2976:14","2977:15-2977:19","2978:11-2978:20","2979:8-2979:13","2980:8-2980:16","2981:10-2981:18"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":17935552371102727766,"detailed_name":"void sqlite3_free_table(char **result)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"2983:17-2983:35|-1|1|1","param_spellings":["2983:43-2983:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":667076927587943304,"detailed_name":"char *sqlite3_mprintf(const char *, ...)","short_name_offset":6,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Formatted String Printing Functions\n\n These routines are work-alikes of the \"printf()\" family of functions\n from the standard C library.\n These routines understand most of the common formatting options from\n the standard library printf()\n plus some additional non-standard formats ([%q], [%Q], [%w], and [%z]).\n See the [built-in printf()] documentation for details.\n\n ^The sqlite3_mprintf() and sqlite3_vmprintf() routines write their\n results into memory obtained from [sqlite3_malloc64()].\n The strings returned by these two routines should be\n released by [sqlite3_free()].  ^Both routines return a\n NULL pointer if [sqlite3_malloc64()] is unable to allocate enough\n memory to hold the resulting string.\n\n ^(The sqlite3_snprintf() routine is similar to \"snprintf()\" from\n the standard C library.  The result is written into the\n buffer supplied as the second parameter whose size is given by\n the first parameter. Note that the order of the\n first two parameters is reversed from snprintf().)^  This is an\n historical accident that cannot be fixed without breaking\n backwards compatibility.  ^(Note also that sqlite3_snprintf()\n returns a pointer to its buffer instead of the number of\n characters actually written into the buffer.)^  We admit that\n the number of characters written would be a more useful return\n value but we cannot change the implementation of sqlite3_snprintf()\n now without breaking compatibility.\n\n ^As long as the buffer size is greater than zero, sqlite3_snprintf()\n guarantees that the buffer is always zero-terminated.  ^The first\n parameter \"n\" is the total size of the buffer, including space for\n the zero terminator.  So the longest string that can be completely\n written will be n-1 characters.\n\n ^The sqlite3_vsnprintf() routine is a varargs version of sqlite3_snprintf().\n\n See also:  [built-in printf()], [printf() SQL function]","declarations":[{"spell":"3025:18-3025:33|-1|1|1","param_spellings":["3025:45-3025:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":854071514831447439,"detailed_name":"char *sqlite3_vmprintf(const char *, std::va_list)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3026:18-3026:34|-1|1|1","param_spellings":["3026:46-3026:46","3026:55-3026:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":15544599967115550947,"detailed_name":"char *sqlite3_snprintf(int, char *, const char *, ...)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3027:18-3027:34|-1|1|1","param_spellings":["3027:38-3027:38","3027:44-3027:44","3027:56-3027:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":15799839227161429002,"detailed_name":"char *sqlite3_vsnprintf(int, char *, const char *, std::va_list)","short_name_offset":6,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3028:18-3028:35|-1|1|1","param_spellings":["3028:39-3028:39","3028:45-3028:45","3028:57-3028:57","3028:66-3028:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":10751638063834916032,"detailed_name":"void *sqlite3_malloc(int)","short_name_offset":6,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Memory Allocation Subsystem\n\n The SQLite core uses these three routines for all of its own\n internal memory allocation needs. \"Core\" in the previous sentence\n does not include operating-system specific [VFS] implementation.  The\n Windows VFS uses native malloc() and free() for some operations.\n\n ^The sqlite3_malloc() routine returns a pointer to a block\n of memory at least N bytes in length, where N is the parameter.\n ^If sqlite3_malloc() is unable to obtain sufficient free\n memory, it returns a NULL pointer.  ^If the parameter N to\n sqlite3_malloc() is zero or negative then sqlite3_malloc() returns\n a NULL pointer.\n\n ^The sqlite3_malloc64(N) routine works just like\n sqlite3_malloc(N) except that N is an unsigned 64-bit integer instead\n of a signed 32-bit integer.\n\n ^Calling sqlite3_free() with a pointer previously returned\n by sqlite3_malloc() or sqlite3_realloc() releases that memory so\n that it might be reused.  ^The sqlite3_free() routine is\n a no-op if is called with a NULL pointer.  Passing a NULL pointer\n to sqlite3_free() is harmless.  After being freed, memory\n should neither be read nor written.  Even reading previously freed\n memory might result in a segmentation fault or other severe error.\n Memory corruption, a segmentation fault, or other severe error\n might result if sqlite3_free() is called with a non-NULL pointer that\n was not obtained from sqlite3_malloc() or sqlite3_realloc().\n\n ^The sqlite3_realloc(X,N) interface attempts to resize a\n prior memory allocation X to be at least N bytes.\n ^If the X parameter to sqlite3_realloc(X,N)\n is a NULL pointer then its behavior is identical to calling\n sqlite3_malloc(N).\n ^If the N parameter to sqlite3_realloc(X,N) is zero or\n negative then the behavior is exactly the same as calling\n sqlite3_free(X).\n ^sqlite3_realloc(X,N) returns a pointer to a memory allocation\n of at least N bytes in size or NULL if insufficient memory is available.\n ^If M is the size of the prior allocation, then min(N,M) bytes\n of the prior allocation are copied into the beginning of buffer returned\n by sqlite3_realloc(X,N) and the prior allocation is freed.\n ^If sqlite3_realloc(X,N) returns NULL and N is positive, then the\n prior allocation is not freed.\n\n ^The sqlite3_realloc64(X,N) interfaces works the same as\n sqlite3_realloc(X,N) except that N is a 64-bit unsigned integer instead\n of a 32-bit signed integer.\n\n ^If X is a memory allocation previously obtained from sqlite3_malloc(),\n sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then\n sqlite3_msize(X) returns the size of that memory allocation in bytes.\n ^The value returned by sqlite3_msize(X) might be larger than the number\n of bytes requested when X was allocated.  ^If X is a NULL pointer then\n sqlite3_msize(X) returns zero.  If X points to something that is not\n the beginning of memory allocation, or if it points to a formerly\n valid memory allocation that has now been freed, then the behavior\n of sqlite3_msize(X) is undefined and possibly harmful.\n\n ^The memory returned by sqlite3_malloc(), sqlite3_realloc(),\n sqlite3_malloc64(), and sqlite3_realloc64()\n is always aligned to at least an 8 byte boundary, or to a\n 4 byte boundary if the [SQLITE_4_BYTE_ALIGNED_MALLOC] compile-time\n option is used.\n\n The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()]\n must be either NULL or else pointers obtained from a prior\n invocation of [sqlite3_malloc()] or [sqlite3_realloc()] that have\n not yet been released.\n\n The application must not read or write any part of\n a block of memory after it has been released using\n [sqlite3_free()] or [sqlite3_realloc()].","declarations":[{"spell":"3105:18-3105:32|-1|1|1","param_spellings":["3105:36-3105:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":14773667057719788410,"detailed_name":"void *sqlite3_malloc64(sqlite3_uint64)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3106:18-3106:34|-1|1|1","param_spellings":["3106:49-3106:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":14356856440884207239,"detailed_name":"void *sqlite3_realloc(void *, int)","short_name_offset":6,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3107:18-3107:33|-1|1|1","param_spellings":["3107:39-3107:39","3107:44-3107:44"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":5187337014206104119,"detailed_name":"void *sqlite3_realloc64(void *, sqlite3_uint64)","short_name_offset":6,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3108:18-3108:35|-1|1|1","param_spellings":["3108:41-3108:41","3108:57-3108:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":6053077123309239026,"detailed_name":"void sqlite3_free(void *)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3109:17-3109:29|-1|1|1","param_spellings":["3109:35-3109:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":16492642688579583298,"detailed_name":"sqlite3_uint64 sqlite3_msize(void *)","short_name_offset":15,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3110:27-3110:40|-1|1|1","param_spellings":["3110:46-3110:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":5617961586718213567,"detailed_name":"sqlite3_int64 sqlite3_memory_used()","short_name_offset":14,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Memory Allocator Statistics\n\n SQLite provides these two interfaces for reporting on the status\n of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()]\n routines, which form the built-in memory allocation subsystem.\n\n ^The [sqlite3_memory_used()] routine returns the number of bytes\n of memory currently outstanding (malloced but not freed).\n ^The [sqlite3_memory_highwater()] routine returns the maximum\n value of [sqlite3_memory_used()] since the high-water mark\n was last reset.  ^The values returned by [sqlite3_memory_used()] and\n [sqlite3_memory_highwater()] include any overhead\n added by SQLite in its implementation of [sqlite3_malloc()],\n but not overhead added by the any underlying system library\n routines that [sqlite3_malloc()] may call.\n\n ^The memory high-water mark is reset to the current value of\n [sqlite3_memory_used()] if and only if the parameter to\n [sqlite3_memory_highwater()] is true.  ^The value returned\n by [sqlite3_memory_highwater(1)] is the high-water mark\n prior to the reset.","declarations":[{"spell":"3135:26-3135:45|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":17396839529414666422,"detailed_name":"sqlite3_int64 sqlite3_memory_highwater(int resetFlag)","short_name_offset":14,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3136:26-3136:50|-1|1|1","param_spellings":["3136:55-3136:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":5169320427132587095,"detailed_name":"void sqlite3_randomness(int N, void *P)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Pseudo-Random Number Generator\n\n SQLite contains a high-quality pseudo-random number generator (PRNG) used to\n select random [ROWID | ROWIDs] when inserting new records into a table that\n already uses the largest possible [ROWID].  The PRNG is also used for\n the built-in random() and randomblob() SQL functions.  This interface allows\n applications to access the same PRNG for other purposes.\n\n ^A call to this routine stores N bytes of randomness into buffer P.\n ^The P parameter can be a NULL pointer.\n\n ^If this routine has not been previously called or if the previous\n call had N less than one or a NULL pointer for P, then the PRNG is\n seeded using randomness obtained from the xRandomness method of\n the default [sqlite3_vfs] object.\n ^If the previous call to this routine had an N of 1 or more and a\n non-NULL P then the pseudo-randomness is generated\n internally and without recourse to the [sqlite3_vfs] xRandomness\n method.","declarations":[{"spell":"3159:17-3159:35|-1|1|1","param_spellings":["3159:40-3159:41","3159:49-3159:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":6029952636061484431,"detailed_name":"int sqlite3_set_authorizer(sqlite3 *, int (*)(void *, int, const char *, const char *, const char *, const char *) xAuth, void *pUserData)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Compile-Time Authorization Callbacks\n METHOD: sqlite3\n KEYWORDS: {authorizer callback}\n\n ^This routine registers an authorizer callback with a particular\n [database connection], supplied in the first argument.\n ^The authorizer callback is invoked as SQL statements are being compiled\n by [sqlite3_prepare()] or its variants [sqlite3_prepare_v2()],\n [sqlite3_prepare_v3()], [sqlite3_prepare16()], [sqlite3_prepare16_v2()],\n and [sqlite3_prepare16_v3()].  ^At various\n points during the compilation process, as logic is being created\n to perform various actions, the authorizer callback is invoked to\n see if those actions are allowed.  ^The authorizer callback should\n return [SQLITE_OK] to allow the action, [SQLITE_IGNORE] to disallow the\n specific action but allow the SQL statement to continue to be\n compiled, or [SQLITE_DENY] to cause the entire SQL statement to be\n rejected with an error.  ^If the authorizer callback returns\n any value other than [SQLITE_IGNORE], [SQLITE_OK], or [SQLITE_DENY]\n then the [sqlite3_prepare_v2()] or equivalent call that triggered\n the authorizer will fail with an error message.\n\n When the callback returns [SQLITE_OK], that means the operation\n requested is ok.  ^When the callback returns [SQLITE_DENY], the\n [sqlite3_prepare_v2()] or equivalent call that triggered the\n authorizer will fail with an error message explaining that\n access is denied.\n\n ^The first parameter to the authorizer callback is a copy of the third\n parameter to the sqlite3_set_authorizer() interface. ^The second parameter\n to the callback is an integer [SQLITE_COPY | action code] that specifies\n the particular action to be authorized. ^The third through sixth parameters\n to the callback are either NULL pointers or zero-terminated strings\n that contain additional details about the action to be authorized.\n Applications must always be prepared to encounter a NULL pointer in any\n of the third through the sixth parameters of the authorization callback.\n\n ^If the action code is [SQLITE_READ]\n and the callback returns [SQLITE_IGNORE] then the\n [prepared statement] statement is constructed to substitute\n a NULL value in place of the table column that would have\n been read if [SQLITE_OK] had been returned.  The [SQLITE_IGNORE]\n return can be used to deny an untrusted user access to individual\n columns of a table.\n ^When a table is referenced by a [SELECT] but no column values are\n extracted from that table (for example in a query like\n \"SELECT count(*) FROM tab\") then the [SQLITE_READ] authorizer callback\n is invoked once for that table with a column name that is an empty string.\n ^If the action code is [SQLITE_DELETE] and the callback returns\n [SQLITE_IGNORE] then the [DELETE] operation proceeds but the\n [truncate optimization] is disabled and all rows are deleted individually.\n\n An authorizer is used when [sqlite3_prepare | preparing]\n SQL statements from an untrusted source, to ensure that the SQL statements\n do not try to access data they are not allowed to see, or that they do not\n try to execute malicious statements that damage the database.  For\n example, an application may allow a user to enter arbitrary\n SQL queries for evaluation by a database.  But the application does\n not want the user to be able to make arbitrary changes to the\n database.  An authorizer could then be put in place while the\n user-entered SQL is being [sqlite3_prepare | prepared] that\n disallows everything except [SELECT] statements.\n\n Applications that need to process SQL from untrusted sources\n might also consider lowering resource limits using [sqlite3_limit()]\n and limiting database size using the [max_page_count] [PRAGMA]\n in addition to using an authorizer.\n\n ^(Only a single authorizer can be in place on a database connection\n at a time.  Each call to sqlite3_set_authorizer overrides the\n previous call.)^  ^Disable the authorizer by installing a NULL callback.\n The authorizer is disabled by default.\n\n The authorizer callback must not do anything that will modify\n the database connection that invoked the authorizer callback.\n Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n database connections for the meaning of \"modify\" in this paragraph.\n\n ^When [sqlite3_prepare_v2()] is used to prepare a statement, the\n statement might be re-prepared during [sqlite3_step()] due to a\n schema change.  Hence, the application should ensure that the\n correct authorizer callback remains in place during the [sqlite3_step()].\n\n ^Note that the authorizer callback is invoked only during\n [sqlite3_prepare()] or its variants.  Authorization is not\n performed during statement evaluation in [sqlite3_step()], unless\n as stated in the previous paragraph, sqlite3_step() invokes\n sqlite3_prepare_v2() to reprepare a statement after a schema change.","declarations":[{"spell":"3250:16-3250:38|-1|1|1","param_spellings":["3251:11-3251:11","3252:9-3252:14","3253:9-3253:18"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":801825808241692262,"detailed_name":"void *sqlite3_trace(sqlite3 *, void (*)(void *, const char *) xTrace, void *)","short_name_offset":6,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Deprecated Tracing And Profiling Functions\n DEPRECATED\n\n These routines are deprecated. Use the [sqlite3_trace_v2()] interface\n instead of the routines described here.\n\n These routines register callback functions that can be used for\n tracing and profiling the execution of SQL statements.\n\n ^The callback function registered by sqlite3_trace() is invoked at\n various times when an SQL statement is being run by [sqlite3_step()].\n ^The sqlite3_trace() callback is invoked with a UTF-8 rendering of the\n SQL statement text as the statement first begins executing.\n ^(Additional sqlite3_trace() callbacks might occur\n as each triggered subprogram is entered.  The callbacks for triggers\n contain a UTF-8 SQL comment that identifies the trigger.)^\n\n The [SQLITE_TRACE_SIZE_LIMIT] compile-time option can be used to limit\n the length of [bound parameter] expansion in the output of sqlite3_trace().\n\n ^The callback function registered by sqlite3_profile() is invoked\n as each SQL statement finishes.  ^The profile callback contains\n the original statement text and an estimate of wall-clock time\n of how long that statement took to run.  ^The profile callback\n time is in units of nanoseconds, however the current implementation\n is only capable of millisecond resolution so the six least significant\n digits in the time are meaningless.  Future versions of SQLite\n might provide greater resolution on the profiler callback.  Invoking\n either [sqlite3_trace()] or [sqlite3_trace_v2()] will cancel the\n profile callback.","declarations":[{"spell":"3358:36-3358:49|-1|1|1","param_spellings":["3358:58-3358:58","3359:10-3359:16","3359:43-3359:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":13399092726547394026,"detailed_name":"void *sqlite3_profile(sqlite3 *, void (*)(void *, const char *, sqlite3_uint64) xProfile, void *)","short_name_offset":6,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3360:36-3360:51|-1|1|1","param_spellings":["3360:60-3360:60","3361:10-3361:18","3361:60-3361:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":9133417124688985264,"detailed_name":"int sqlite3_trace_v2(sqlite3 *, unsigned int uMask, int (*)(unsigned int, void *, void *, void *) xCallback, void *pCtx)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: SQL Trace Hook\n METHOD: sqlite3\n\n ^The sqlite3_trace_v2(D,M,X,P) interface registers a trace callback\n function X against [database connection] D, using property mask M\n and context pointer P.  ^If the X callback is\n NULL or if the M mask is zero, then tracing is disabled.  The\n M argument should be the bitwise OR-ed combination of\n zero or more [SQLITE_TRACE] constants.\n\n ^Each call to either sqlite3_trace(D,X,P) or sqlite3_trace_v2(D,M,X,P)\n overrides (cancels) all prior calls to sqlite3_trace(D,X,P) or\n sqlite3_trace_v2(D,M,X,P) for the [database connection] D.  Each\n database connection may have at most one trace callback.\n\n ^The X callback is invoked whenever any of the events identified by\n mask M occur.  ^The integer return value from the callback is currently\n ignored, though this may change in future releases.  Callback\n implementations should return zero to ensure future compatibility.\n\n ^A trace callback is invoked with four arguments: callback(T,C,P,X).\n ^The T argument is one of the [SQLITE_TRACE]\n constants to indicate why the callback was invoked.\n ^The C argument is a copy of the context pointer.\n The P and X arguments are pointers whose meanings depend on T.\n\n The sqlite3_trace_v2() interface is intended to replace the legacy\n interfaces [sqlite3_trace()] and [sqlite3_profile()], both of which\n are deprecated.","declarations":[{"spell":"3451:16-3451:32|-1|1|1","param_spellings":["3452:11-3452:11","3453:12-3453:17","3454:8-3454:17","3455:9-3455:13"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":14325431076118611073,"detailed_name":"void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Query Progress Callbacks\n METHOD: sqlite3\n\n ^The sqlite3_progress_handler(D,N,X,P) interface causes the callback\n function X to be invoked periodically during long running calls to\n [sqlite3_step()] and [sqlite3_prepare()] and similar for\n database connection D.  An example use for this\n interface is to keep a GUI updated during a large query.\n\n ^The parameter P is passed through as the only parameter to the\n callback function X.  ^The parameter N is the approximate number of\n [virtual machine instructions] that are evaluated between successive\n invocations of the callback X.  ^If N is less than one then the progress\n handler is disabled.\n\n ^Only a single progress handler may be defined at one time per\n [database connection]; setting a new progress handler cancels the\n old one.  ^Setting parameter X to NULL disables the progress handler.\n ^The progress handler is also disabled by setting N to a value less\n than 1.\n\n ^If the progress callback returns non-zero, the operation is\n interrupted.  This feature can be used to implement a\n \"Cancel\" button on a GUI progress dialog box.\n\n The progress handler callback must not do anything that will modify\n the database connection that invoked the progress handler.\n Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n database connections for the meaning of \"modify\" in this paragraph.\n\n The progress handler callback would originally only be invoked from the\n bytecode engine.  It still might be invoked during [sqlite3_prepare()]\n and similar because those routines might force a reparse of the schema\n which involves running the bytecode engine.  However, beginning with\n SQLite version 3.41.0, the progress handler callback might also be\n invoked directly from [sqlite3_prepare()] while analyzing and generating\n code for complex queries.","declarations":[{"spell":"3497:17-3497:41|-1|1|1","param_spellings":["3497:50-3497:50","3497:55-3497:55","3497:62-3497:62","3497:77-3497:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":15993828701280574266,"detailed_name":"int sqlite3_open(const char *filename, sqlite3 **ppDb)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Opening A New Database Connection\n CONSTRUCTOR: sqlite3\n\n ^These routines open an SQLite database file as specified by the\n filename argument. ^The filename argument is interpreted as UTF-8 for\n sqlite3_open() and sqlite3_open_v2() and as UTF-16 in the native byte\n order for sqlite3_open16(). ^(A [database connection] handle is usually\n returned in *ppDb, even if an error occurs.  The only exception is that\n if SQLite is unable to allocate memory to hold the [sqlite3] object,\n a NULL will be written into *ppDb instead of a pointer to the [sqlite3]\n object.)^ ^(If the database is opened (and/or created) successfully, then\n [SQLITE_OK] is returned.  Otherwise an [error code] is returned.)^ ^The\n [sqlite3_errmsg()] or [sqlite3_errmsg16()] routines can be used to obtain\n an English language description of the error following a failure of any\n of the sqlite3_open() routines.\n\n ^The default encoding will be UTF-8 for databases created using\n sqlite3_open() or sqlite3_open_v2().  ^The default encoding for databases\n created using sqlite3_open16() will be UTF-16 in the native byte order.\n\n Whether or not an error occurs when it is opened, resources\n associated with the [database connection] handle should be released by\n passing it to [sqlite3_close()] when it is no longer required.\n\n The sqlite3_open_v2() interface works like sqlite3_open()\n except that it accepts two additional parameters for additional control\n over the new database connection.  ^(The flags parameter to\n sqlite3_open_v2() must include, at a minimum, one of the following\n three flag combinations:)^\n\n <dl>\n ^(<dt>[SQLITE_OPEN_READONLY]</dt>\n <dd>The database is opened in read-only mode.  If the database does\n not already exist, an error is returned.</dd>)^\n\n ^(<dt>[SQLITE_OPEN_READWRITE]</dt>\n <dd>The database is opened for reading and writing if possible, or\n reading only if the file is write protected by the operating\n system.  In either case the database must already exist, otherwise\n an error is returned.  For historical reasons, if opening in\n read-write mode fails due to OS-level permissions, an attempt is\n made to open it in read-only mode. [sqlite3_db_readonly()] can be\n used to determine whether the database is actually\n read-write.</dd>)^\n\n ^(<dt>[SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]</dt>\n <dd>The database is opened for reading and writing, and is created if\n it does not already exist. This is the behavior that is always used for\n sqlite3_open() and sqlite3_open16().</dd>)^\n </dl>\n\n In addition to the required flags, the following optional flags are\n also supported:\n\n <dl>\n ^(<dt>[SQLITE_OPEN_URI]</dt>\n <dd>The filename can be interpreted as a URI if this flag is set.</dd>)^\n\n ^(<dt>[SQLITE_OPEN_MEMORY]</dt>\n <dd>The database will be opened as an in-memory database.  The database\n is named by the \"filename\" argument for the purposes of cache-sharing,\n if shared cache mode is enabled, but the \"filename\" is otherwise ignored.\n </dd>)^\n\n ^(<dt>[SQLITE_OPEN_NOMUTEX]</dt>\n <dd>The new database connection will use the \"multi-thread\"\n [threading mode].)^  This means that separate threads are allowed\n to use SQLite at the same time, as long as each thread is using\n a different [database connection].\n\n ^(<dt>[SQLITE_OPEN_FULLMUTEX]</dt>\n <dd>The new database connection will use the \"serialized\"\n [threading mode].)^  This means the multiple threads can safely\n attempt to use the same database connection at the same time.\n (Mutexes will block any actual concurrency, but in this mode\n there is no harm in trying.)\n\n ^(<dt>[SQLITE_OPEN_SHAREDCACHE]</dt>\n <dd>The database is opened [shared cache] enabled, overriding\n the default shared cache setting provided by\n [sqlite3_enable_shared_cache()].)^\n The [use of shared cache mode is discouraged] and hence shared cache\n capabilities may be omitted from many builds of SQLite.  In such cases,\n this option is a no-op.\n\n ^(<dt>[SQLITE_OPEN_PRIVATECACHE]</dt>\n <dd>The database is opened [shared cache] disabled, overriding\n the default shared cache setting provided by\n [sqlite3_enable_shared_cache()].)^\n\n [[OPEN_EXRESCODE]] ^(<dt>[SQLITE_OPEN_EXRESCODE]</dt>\n <dd>The database connection comes up in \"extended result code mode\".\n In other words, the database behaves as if\n [sqlite3_extended_result_codes(db,1)] were called on the database\n connection as soon as the connection is created. In addition to setting\n the extended result code mode, this flag also causes [sqlite3_open_v2()]\n to return an extended result code.</dd>\n\n [[OPEN_NOFOLLOW]] ^(<dt>[SQLITE_OPEN_NOFOLLOW]</dt>\n <dd>The database filename is not allowed to contain a symbolic link</dd>\n </dl>)^\n\n If the 3rd parameter to sqlite3_open_v2() is not one of the\n required combinations shown above optionally combined with other\n [SQLITE_OPEN_READONLY | SQLITE_OPEN_* bits]\n then the behavior is undefined.  Historic versions of SQLite\n have silently ignored surplus bits in the flags parameter to\n sqlite3_open_v2(), however that behavior might not be carried through\n into future versions of SQLite and so applications should not rely\n upon it.  Note in particular that the SQLITE_OPEN_EXCLUSIVE flag is a no-op\n for sqlite3_open_v2().  The SQLITE_OPEN_EXCLUSIVE does *not* cause\n the open to fail if the database already exists.  The SQLITE_OPEN_EXCLUSIVE\n flag is intended for use by the [sqlite3_vfs|VFS interface] only, and not\n by sqlite3_open_v2().\n\n ^The fourth parameter to sqlite3_open_v2() is the name of the\n [sqlite3_vfs] object that defines the operating system interface that\n the new database connection should use.  ^If the fourth parameter is\n a NULL pointer then the default [sqlite3_vfs] object is used.\n\n ^If the filename is \":memory:\", then a private, temporary in-memory database\n is created for the connection.  ^This in-memory database will vanish when\n the database connection is closed.  Future versions of SQLite might\n make use of additional special filenames that begin with the \":\" character.\n It is recommended that when a database filename actually does begin with\n a \":\" character you should prefix the filename with a pathname such as\n \"./\" to avoid ambiguity.\n\n ^If the filename is an empty string, then a private, temporary\n on-disk database will be created.  ^This private database will be\n automatically deleted as soon as the database connection is closed.\n\n [[URI filenames in sqlite3_open()]] <h3>URI Filenames</h3>\n\n ^If [URI filename] interpretation is enabled, and the filename argument\n begins with \"file:\", then the filename is interpreted as a URI. ^URI\n filename interpretation is enabled if the [SQLITE_OPEN_URI] flag is\n set in the third argument to sqlite3_open_v2(), or if it has\n been enabled globally using the [SQLITE_CONFIG_URI] option with the\n [sqlite3_config()] method or by the [SQLITE_USE_URI] compile-time option.\n URI filename interpretation is turned off\n by default, but future releases of SQLite might enable URI filename\n interpretation by default.  See \"[URI filenames]\" for additional\n information.\n\n URI filenames are parsed according to RFC 3986. ^If the URI contains an\n authority, then it must be either an empty string or the string\n \"localhost\". ^If the authority is not an empty string or \"localhost\", an\n error is returned to the caller. ^The fragment component of a URI, if\n present, is ignored.\n\n ^SQLite uses the path component of the URI as the name of the disk file\n which contains the database. ^If the path begins with a '/' character,\n then it is interpreted as an absolute path. ^If the path does not begin\n with a '/' (meaning that the authority section is omitted from the URI)\n then the path is interpreted as a relative path.\n ^(On windows, the first component of an absolute path\n is a drive specification (e.g. \"C:\").)^\n\n [[core URI query parameters]]\n The query component of a URI may contain parameters that are interpreted\n either by SQLite itself, or by a [VFS | custom VFS implementation].\n SQLite and its built-in [VFSes] interpret the\n following query parameters:\n\n <ul>\n   <li> <b>vfs</b>: ^The \"vfs\" parameter may be used to specify the name of\n     a VFS object that provides the operating system interface that should\n     be used to access the database file on disk. ^If this option is set to\n     an empty string the default VFS object is used. ^Specifying an unknown\n     VFS is an error. ^If sqlite3_open_v2() is used and the vfs option is\n     present, then the VFS specified by the option takes precedence over\n     the value passed as the fourth parameter to sqlite3_open_v2().\n\n   <li> <b>mode</b>: ^(The mode parameter may be set to either \"ro\", \"rw\",\n     \"rwc\", or \"memory\". Attempting to set it to any other value is\n     an error)^.\n     ^If \"ro\" is specified, then the database is opened for read-only\n     access, just as if the [SQLITE_OPEN_READONLY] flag had been set in the\n     third argument to sqlite3_open_v2(). ^If the mode option is set to\n     \"rw\", then the database is opened for read-write (but not create)\n     access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had\n     been set. ^Value \"rwc\" is equivalent to setting both\n     SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE.  ^If the mode option is\n     set to \"memory\" then a pure [in-memory database] that never reads\n     or writes from disk is used. ^It is an error to specify a value for\n     the mode parameter that is less restrictive than that specified by\n     the flags passed in the third parameter to sqlite3_open_v2().\n\n   <li> <b>cache</b>: ^The cache parameter may be set to either \"shared\" or\n     \"private\". ^Setting it to \"shared\" is equivalent to setting the\n     SQLITE_OPEN_SHAREDCACHE bit in the flags argument passed to\n     sqlite3_open_v2(). ^Setting the cache parameter to \"private\" is\n     equivalent to setting the SQLITE_OPEN_PRIVATECACHE bit.\n     ^If sqlite3_open_v2() is used and the \"cache\" parameter is present in\n     a URI filename, its value overrides any behavior requested by setting\n     SQLITE_OPEN_PRIVATECACHE or SQLITE_OPEN_SHAREDCACHE flag.\n\n  <li> <b>psow</b>: ^The psow parameter indicates whether or not the\n     [powersafe overwrite] property does or does not apply to the\n     storage media on which the database file resides.\n\n  <li> <b>nolock</b>: ^The nolock parameter is a boolean query parameter\n     which if set disables file locking in rollback journal modes.  This\n     is useful for accessing a database on a filesystem that does not\n     support locking.  Caution:  Database corruption might result if two\n     or more processes write to the same database and any one of those\n     processes uses nolock=1.\n\n  <li> <b>immutable</b>: ^The immutable parameter is a boolean query\n     parameter that indicates that the database file is stored on\n     read-only media.  ^When immutable is set, SQLite assumes that the\n     database file cannot be changed, even by a process with higher\n     privilege, and so the database is opened read-only and all locking\n     and change detection is disabled.  Caution: Setting the immutable\n     property on a database file that does in fact change can result\n     in incorrect query results and/or [SQLITE_CORRUPT] errors.\n     See also: [SQLITE_IOCAP_IMMUTABLE].\n\n </ul>\n\n ^Specifying an unknown parameter in the query component of a URI is not an\n error.  Future versions of SQLite might understand additional query\n parameters.  See \"[query parameters with special meaning to SQLite]\" for\n additional information.\n\n [[URI filename examples]] <h3>URI filename examples</h3>\n\n <table border=\"1\" align=center cellpadding=5>\n <tr><th> URI filenames <th> Results\n <tr><td> file:data.db <td>\n          Open the file \"data.db\" in the current directory.\n <tr><td> file:/home/fred/data.db<br>\n          file:///home/fred/data.db <br>\n          file://localhost/home/fred/data.db <br> <td>\n          Open the database file \"/home/fred/data.db\".\n <tr><td> file://darkstar/home/fred/data.db <td>\n          An error. \"darkstar\" is not a recognized authority.\n <tr><td style=\"white-space:nowrap\">\n          file:///C:/Documents%20and%20Settings/fred/Desktop/data.db\n     <td> Windows only: Open the file \"data.db\" on fred's desktop on drive\n          C:. Note that the %20 escaping in this example is not strictly\n          necessary - space characters can be used literally\n          in URI filenames.\n <tr><td> file:data.db?mode=ro&cache=private <td>\n          Open file \"data.db\" in the current directory for read-only access.\n          Regardless of whether or not shared-cache mode is enabled by\n          default, use a private cache.\n <tr><td> file:/home/fred/data.db?vfs=unix-dotfile <td>\n          Open file \"/home/fred/data.db\". Use the special VFS \"unix-dotfile\"\n          that uses dot-files in place of posix advisory locking.\n <tr><td> file:data.db?mode=readonly <td>\n          An error. \"readonly\" is not a valid option for the \"mode\" parameter.\n          Use \"ro\" instead:  \"file:data.db?mode=ro\".\n </table>\n\n ^URI hexadecimal escape sequences (%HH) are supported within the path and\n query components of a URI. A hexadecimal escape sequence consists of a\n percent sign - \"%\" - followed by exactly two hexadecimal digits\n specifying an octet value. ^Before the path or query components of a\n URI filename are interpreted, they are encoded using UTF-8 and all\n hexadecimal escape sequences replaced by a single byte containing the\n corresponding octet. If this process generates an invalid UTF-8 encoding,\n the results are undefined.\n\n <b>Note to Windows users:</b>  The encoding used for the filename argument\n of sqlite3_open() and sqlite3_open_v2() must be UTF-8, not whatever\n codepage is currently defined.  Filenames containing international\n characters must be converted to UTF-8 prior to passing them into\n sqlite3_open() or sqlite3_open_v2().\n\n <b>Note to Windows Runtime users:</b>  The temporary directory must be set\n prior to calling sqlite3_open() or sqlite3_open_v2().  Otherwise, various\n features that require the use of temporary files may fail.\n\n See also: [sqlite3_temp_directory]","declarations":[{"spell":"3777:16-3777:28|-1|1|1","param_spellings":["3778:15-3778:23","3779:13-3779:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":1613409382741774888,"detailed_name":"int sqlite3_open16(const void *filename, sqlite3 **ppDb)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3781:16-3781:30|-1|1|1","param_spellings":["3782:15-3782:23","3783:13-3783:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":17861297111741200377,"detailed_name":"int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3785:16-3785:31|-1|1|1","param_spellings":["3786:15-3786:23","3787:13-3787:17","3788:7-3788:12","3789:15-3789:19"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":13587493608132823809,"detailed_name":"const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam)","short_name_offset":12,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Obtain Values For URI Parameters\n\n These are utility routines, useful to [VFS|custom VFS implementations],\n that check if a database file was a URI that contained a specific query\n parameter, and if so obtains the value of that query parameter.\n\n The first parameter to these interfaces (hereafter referred to\n as F) must be one of:\n <ul>\n <li> A database filename pointer created by the SQLite core and\n passed into the xOpen() method of a VFS implementation, or\n <li> A filename obtained from [sqlite3_db_filename()], or\n <li> A new filename constructed using [sqlite3_create_filename()].\n </ul>\n If the F parameter is not one of the above, then the behavior is\n undefined and probably undesirable.  Older versions of SQLite were\n more tolerant of invalid F parameters than newer versions.\n\n If F is a suitable filename (as described in the previous paragraph)\n and if P is the name of the query parameter, then\n sqlite3_uri_parameter(F,P) returns the value of the P\n parameter if it exists or a NULL pointer if P does not appear as a\n query parameter on F.  If P is a query parameter of F and it\n has no explicit value, then sqlite3_uri_parameter(F,P) returns\n a pointer to an empty string.\n\n The sqlite3_uri_boolean(F,P,B) routine assumes that P is a boolean\n parameter and returns true (1) or false (0) according to the value\n of P.  The sqlite3_uri_boolean(F,P,B) routine returns true (1) if the\n value of query parameter P is one of \"yes\", \"true\", or \"on\" in any\n case or if the value begins with a non-zero number.  The\n sqlite3_uri_boolean(F,P,B) routines returns false (0) if the value of\n query parameter P is one of \"no\", \"false\", or \"off\" in any case or\n if the value begins with a numeric zero.  If P is not a query\n parameter on F or if the value of P does not match any of the\n above, then sqlite3_uri_boolean(F,P,B) returns (B!=0).\n\n The sqlite3_uri_int64(F,P,D) routine converts the value of P into a\n 64-bit signed integer and returns that integer, or D if P does not\n exist.  If the value of P is something other than an integer, then\n zero is returned.\n\n The sqlite3_uri_key(F,N) returns a pointer to the name (not\n the value) of the N-th query parameter for filename F, or a NULL\n pointer if N is less than zero or greater than the number of query\n parameters minus 1.  The N value is zero-based so N should be 0 to obtain\n the name of the first query parameter, 1 for the second parameter, and\n so forth.\n\n If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and\n sqlite3_uri_boolean(F,P,B) returns B.  If F is not a NULL pointer and\n is not a database file pathname pointer that the SQLite core passed\n into the xOpen VFS method, then the behavior of this routine is undefined\n and probably undesirable.\n\n Beginning with SQLite [version 3.31.0] ([dateof:3.31.0]) the input F\n parameter can also be the name of a rollback journal file or WAL file\n in addition to the main database file.  Prior to version 3.31.0, these\n routines would only work if F was the name of the main database file.\n When the F parameter is the name of the rollback journal or WAL file,\n it has access to all the same query parameters as were found on the\n main database file.\n\n See the [URI filename] documentation for additional information.","declarations":[{"spell":"3858:24-3858:45|-1|1|1","param_spellings":["3858:63-3858:64","3858:78-3858:84"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":2454360987480227961,"detailed_name":"int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3859:16-3859:35|-1|1|1","param_spellings":["3859:53-3859:54","3859:68-3859:74","3859:80-3859:88"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":17737011522151941570,"detailed_name":"sqlite3_int64 sqlite3_uri_int64(sqlite3_filename, const char *, sqlite3_int64)","short_name_offset":14,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3860:26-3860:43|-1|1|1","param_spellings":["3860:60-3860:60","3860:73-3860:73","3860:88-3860:88"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":11752337664163305887,"detailed_name":"const char *sqlite3_uri_key(sqlite3_filename z, int N)","short_name_offset":12,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3861:24-3861:39|-1|1|1","param_spellings":["3861:57-3861:58","3861:64-3861:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":6928874011243729351,"detailed_name":"const char *sqlite3_filename_database(sqlite3_filename)","short_name_offset":12,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF:  Translate filenames\n\n These routines are available to [VFS|custom VFS implementations] for\n translating filenames between the main database file, the journal file,\n and the WAL file.\n\n If F is the name of an sqlite database file, journal file, or WAL file\n passed by the SQLite core into the VFS, then sqlite3_filename_database(F)\n returns the name of the corresponding database file.\n\n If F is the name of an sqlite database file, journal file, or WAL file\n passed by the SQLite core into the VFS, or if F is a database filename\n obtained from [sqlite3_db_filename()], then sqlite3_filename_journal(F)\n returns the name of the corresponding rollback journal file.\n\n If F is the name of an sqlite database file, journal file, or WAL file\n that was passed by the SQLite core into the VFS, or if F is a database\n filename obtained from [sqlite3_db_filename()], then\n sqlite3_filename_wal(F) returns the name of the corresponding\n WAL file.\n\n In all of the above, if F is not the name of a database, journal or WAL\n filename passed into the VFS from the SQLite core and F is not the\n return value from [sqlite3_db_filename()], then the result is\n undefined and is likely a memory access violation.","declarations":[{"spell":"3890:24-3890:49|-1|1|1","param_spellings":["3890:66-3890:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":3443177619900870098,"detailed_name":"const char *sqlite3_filename_journal(sqlite3_filename)","short_name_offset":12,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3891:24-3891:48|-1|1|1","param_spellings":["3891:65-3891:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":1937642495968729544,"detailed_name":"const char *sqlite3_filename_wal(sqlite3_filename)","short_name_offset":12,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3892:24-3892:44|-1|1|1","param_spellings":["3892:61-3892:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":3211299882371835396,"detailed_name":"sqlite3_file *sqlite3_database_file_object(const char *)","short_name_offset":14,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF:  Database File Corresponding To A Journal\n\n ^If X is the name of a rollback or WAL-mode journal file that is\n passed into the xOpen method of [sqlite3_vfs], then\n sqlite3_database_file_object(X) returns a pointer to the [sqlite3_file]\n object that represents the main database file.\n\n This routine is intended for use in custom [VFS] implementations\n only.  It is not a general-purpose interface.\n The argument sqlite3_file_object(X) must be a filename pointer that\n has been passed into [sqlite3_vfs].xOpen method where the\n flags parameter to xOpen contains one of the bits\n [SQLITE_OPEN_MAIN_JOURNAL] or [SQLITE_OPEN_WAL].  Any other use\n of this routine results in undefined and probably undesirable\n behavior.","declarations":[{"spell":"3911:26-3911:54|-1|1|1","param_spellings":["3911:66-3911:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":7494895001893607936,"detailed_name":"sqlite3_filename sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)","short_name_offset":17,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Create and Destroy VFS Filenames\n\n These interfaces are provided for use by [VFS shim] implementations and\n are not useful outside of that context.\n\n The sqlite3_create_filename(D,J,W,N,P) allocates memory to hold a version of\n database filename D with corresponding journal file J and WAL file W and\n with N URI parameters key/values pairs in the array P.  The result from\n sqlite3_create_filename(D,J,W,N,P) is a pointer to a database filename that\n is safe to pass to routines like:\n <ul>\n <li> [sqlite3_uri_parameter()],\n <li> [sqlite3_uri_boolean()],\n <li> [sqlite3_uri_int64()],\n <li> [sqlite3_uri_key()],\n <li> [sqlite3_filename_database()],\n <li> [sqlite3_filename_journal()], or\n <li> [sqlite3_filename_wal()].\n </ul>\n If a memory allocation error occurs, sqlite3_create_filename() might\n return a NULL pointer.  The memory obtained from sqlite3_create_filename(X)\n must be released by a corresponding call to sqlite3_free_filename(Y).\n\n The P parameter in sqlite3_create_filename(D,J,W,N,P) should be an array\n of 2*N pointers to strings.  Each pair of pointers in this array corresponds\n to a key and value for a query parameter.  The P parameter may be a NULL\n pointer if N is zero.  None of the 2*N pointers in the P array may be\n NULL pointers and key pointers should not be empty strings.\n None of the D, J, or W parameters to sqlite3_create_filename(D,J,W,N,P) may\n be NULL pointers, though they can be empty strings.\n\n The sqlite3_free_filename(Y) routine releases a memory allocation\n previously obtained from sqlite3_create_filename().  Invoking\n sqlite3_free_filename(Y) where Y is a NULL pointer is a harmless no-op.\n\n If the Y parameter to sqlite3_free_filename(Y) is anything other\n than a NULL pointer or a pointer previously acquired from\n sqlite3_create_filename(), then bad things such as heap\n corruption or segfaults may occur. The value Y should not be\n used again after sqlite3_free_filename(Y) has been called.  This means\n that if the [sqlite3_vfs.xOpen()] method of a VFS has been called using Y,\n then the corresponding [sqlite3_module.xClose() method should also be\n invoked prior to calling sqlite3_free_filename(Y).","declarations":[{"spell":"3958:29-3958:52|-1|1|1","param_spellings":["3959:15-3959:24","3960:15-3960:23","3961:15-3961:19","3962:7-3962:13","3963:16-3963:23"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":6432551814019523418,"detailed_name":"void sqlite3_free_filename(sqlite3_filename)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"3965:17-3965:38|-1|1|1","param_spellings":["3965:55-3965:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":1539667064632953851,"detailed_name":"int sqlite3_errcode(sqlite3 *db)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Error Codes And Messages\n METHOD: sqlite3\n\n ^If the most recent sqlite3_* API call associated with\n [database connection] D failed, then the sqlite3_errcode(D) interface\n returns the numeric [result code] or [extended result code] for that\n API call.\n ^The sqlite3_extended_errcode()\n interface is the same except that it always returns the\n [extended result code] even when extended result codes are\n disabled.\n\n The values returned by sqlite3_errcode() and/or\n sqlite3_extended_errcode() might change with each API call.\n Except, there are some interfaces that are guaranteed to never\n change the value of the error code.  The error-code preserving\n interfaces include the following:\n\n <ul>\n <li> sqlite3_errcode()\n <li> sqlite3_extended_errcode()\n <li> sqlite3_errmsg()\n <li> sqlite3_errmsg16()\n <li> sqlite3_error_offset()\n </ul>\n\n ^The sqlite3_errmsg() and sqlite3_errmsg16() return English-language\n text that describes the error, as either UTF-8 or UTF-16 respectively,\n or NULL if no error message is available.\n (See how SQLite handles [invalid UTF] for exceptions to this rule.)\n ^(Memory to hold the error message string is managed internally.\n The application does not need to worry about freeing the result.\n However, the error string might be overwritten or deallocated by\n subsequent calls to other SQLite interface functions.)^\n\n ^The sqlite3_errstr(E) interface returns the English-language text\n that describes the [result code] E, as UTF-8, or NULL if E is not an\n result code for which a text error message is available.\n ^(Memory to hold the error message string is managed internally\n and must not be freed by the application)^.\n\n ^If the most recent error references a specific token in the input\n SQL, the sqlite3_error_offset() interface returns the byte offset\n of the start of that token.  ^The byte offset returned by\n sqlite3_error_offset() assumes that the input SQL is UTF8.\n ^If the most recent error does not reference a specific token in the input\n SQL, then the sqlite3_error_offset() function returns -1.\n\n When the serialized [threading mode] is in use, it might be the\n case that a second error occurs on a separate thread in between\n the time of the first error and the call to these interfaces.\n When that happens, the second error will be reported since these\n interfaces always report the most recent result.  To avoid\n this, each thread can obtain exclusive use of the [database connection] D\n by invoking [sqlite3_mutex_enter]([sqlite3_db_mutex](D)) before beginning\n to use D and invoking [sqlite3_mutex_leave]([sqlite3_db_mutex](D)) after\n all calls to the interfaces listed here are completed.\n\n If an interface fails with SQLITE_MISUSE, that means the interface\n was invoked incorrectly by the application.  In that case, the\n error code and message may or may not be set.","declarations":[{"spell":"4030:16-4030:31|-1|1|1","param_spellings":["4030:41-4030:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":6394339019487922963,"detailed_name":"int sqlite3_extended_errcode(sqlite3 *db)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4031:16-4031:40|-1|1|1","param_spellings":["4031:50-4031:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":10966700703808176846,"detailed_name":"const char *sqlite3_errmsg(sqlite3 *)","short_name_offset":12,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4032:24-4032:38|-1|1|1","param_spellings":["4032:47-4032:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":17055920788932512166,"detailed_name":"const void *sqlite3_errmsg16(sqlite3 *)","short_name_offset":12,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4033:24-4033:40|-1|1|1","param_spellings":["4033:49-4033:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":13645091434798944675,"detailed_name":"const char *sqlite3_errstr(int)","short_name_offset":12,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4034:24-4034:38|-1|1|1","param_spellings":["4034:42-4034:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":335321018782158845,"detailed_name":"int sqlite3_error_offset(sqlite3 *db)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4035:16-4035:36|-1|1|1","param_spellings":["4035:46-4035:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":11747316514642472810,"detailed_name":"int sqlite3_limit(sqlite3 *, int id, int newVal)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Run-time Limits\n METHOD: sqlite3\n\n ^(This interface allows the size of various constructs to be limited\n on a connection by connection basis.  The first parameter is the\n [database connection] whose limit is to be set or queried.  The\n second parameter is one of the [limit categories] that define a\n class of constructs to be size limited.  The third parameter is the\n new limit for that construct.)^\n\n ^If the new limit is a negative number, the limit is unchanged.\n ^(For each limit category SQLITE_LIMIT_<i>NAME</i> there is a\n [limits | hard upper bound]\n set at compile-time by a C preprocessor macro called\n [limits | SQLITE_MAX_<i>NAME</i>].\n (The \"_LIMIT_\" in the name is changed to \"_MAX_\".))^\n ^Attempts to increase a limit above its hard upper bound are\n silently truncated to the hard upper bound.\n\n ^Regardless of whether or not the limit was changed, the\n [sqlite3_limit()] interface returns the prior value of the limit.\n ^Hence, to find the current value of a limit without changing it,\n simply invoke this interface with the third parameter set to -1.\n\n Run-time limits are intended for use in applications that manage\n both their own internal database and also databases that are controlled\n by untrusted external sources.  An example application might be a\n web browser that has its own databases for storing history and\n separate databases controlled by JavaScript applications downloaded\n off the Internet.  The internal databases can be given the\n large, default limits.  Databases managed by external sources can\n be given much smaller limits designed to prevent a denial of service\n attack.  Developers might also want to use the [sqlite3_set_authorizer()]\n interface to further control untrusted SQL.  The size of the database\n created by an untrusted script can be contained using the\n [max_page_count] [PRAGMA].\n\n New run-time limit categories may be added in future releases.","declarations":[{"spell":"4103:16-4103:29|-1|1|1","param_spellings":["4103:38-4103:38","4103:44-4103:46","4103:52-4103:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":7508307196931258876,"detailed_name":"int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Compiling An SQL Statement\n KEYWORDS: {SQL statement compiler}\n METHOD: sqlite3\n CONSTRUCTOR: sqlite3_stmt\n\n To execute an SQL statement, it must first be compiled into a byte-code\n program using one of these routines.  Or, in other words, these routines\n are constructors for the [prepared statement] object.\n\n The preferred routine to use is [sqlite3_prepare_v2()].  The\n [sqlite3_prepare()] interface is legacy and should be avoided.\n [sqlite3_prepare_v3()] has an extra \"prepFlags\" option that is used\n for special purposes.\n\n The use of the UTF-8 interfaces is preferred, as SQLite currently\n does all parsing using UTF-8.  The UTF-16 interfaces are provided\n as a convenience.  The UTF-16 interfaces work by converting the\n input text into UTF-8, then invoking the corresponding UTF-8 interface.\n\n The first argument, \"db\", is a [database connection] obtained from a\n prior successful call to [sqlite3_open()], [sqlite3_open_v2()] or\n [sqlite3_open16()].  The database connection must not have been closed.\n\n The second argument, \"zSql\", is the statement to be compiled, encoded\n as either UTF-8 or UTF-16.  The sqlite3_prepare(), sqlite3_prepare_v2(),\n and sqlite3_prepare_v3()\n interfaces use UTF-8, and sqlite3_prepare16(), sqlite3_prepare16_v2(),\n and sqlite3_prepare16_v3() use UTF-16.\n\n ^If the nByte argument is negative, then zSql is read up to the\n first zero terminator. ^If nByte is positive, then it is the maximum\n number of bytes read from zSql.  When nByte is positive, zSql is read\n up to the first zero terminator or until the nByte bytes have been read,\n whichever comes first.  ^If nByte is zero, then no prepared\n statement is generated.\n If the caller knows that the supplied string is nul-terminated, then\n there is a small performance advantage to passing an nByte parameter that\n is the number of bytes in the input string <i>including</i>\n the nul-terminator.\n Note that nByte measure the length of the input in bytes, not\n characters, even for the UTF-16 interfaces.\n\n ^If pzTail is not NULL then *pzTail is made to point to the first byte\n past the end of the first SQL statement in zSql.  These routines only\n compile the first statement in zSql, so *pzTail is left pointing to\n what remains uncompiled.\n\n ^*ppStmt is left pointing to a compiled [prepared statement] that can be\n executed using [sqlite3_step()].  ^If there is an error, *ppStmt is set\n to NULL.  ^If the input text contains no SQL (if the input is an empty\n string or a comment) then *ppStmt is set to NULL.\n The calling procedure is responsible for deleting the compiled\n SQL statement using [sqlite3_finalize()] after it has finished with it.\n ppStmt may not be NULL.\n\n ^On success, the sqlite3_prepare() family of routines return [SQLITE_OK];\n otherwise an [error code] is returned.\n\n The sqlite3_prepare_v2(), sqlite3_prepare_v3(), sqlite3_prepare16_v2(),\n and sqlite3_prepare16_v3() interfaces are recommended for all new programs.\n The older interfaces (sqlite3_prepare() and sqlite3_prepare16())\n are retained for backwards compatibility, but their use is discouraged.\n ^In the \"vX\" interfaces, the prepared statement\n that is returned (the [sqlite3_stmt] object) contains a copy of the\n original SQL text. This causes the [sqlite3_step()] interface to\n behave differently in three ways:\n\n <ol>\n <li>\n ^If the database schema changes, instead of returning [SQLITE_SCHEMA] as it\n always used to do, [sqlite3_step()] will automatically recompile the SQL\n statement and try to run it again. As many as [SQLITE_MAX_SCHEMA_RETRY]\n retries will occur before sqlite3_step() gives up and returns an error.\n </li>\n\n <li>\n ^When an error occurs, [sqlite3_step()] will return one of the detailed\n [error codes] or [extended error codes].  ^The legacy behavior was that\n [sqlite3_step()] would only return a generic [SQLITE_ERROR] result code\n and the application would have to make a second call to [sqlite3_reset()]\n in order to find the underlying cause of the problem. With the \"v2\" prepare\n interfaces, the underlying reason for the error is returned immediately.\n </li>\n\n <li>\n ^If the specific value bound to a [parameter | host parameter] in the\n WHERE clause might influence the choice of query plan for a statement,\n then the statement will be automatically recompiled, as if there had been\n a schema change, on the first [sqlite3_step()] call following any change\n to the [sqlite3_bind_text | bindings] of that [parameter].\n ^The specific value of a WHERE-clause [parameter] might influence the\n choice of query plan if the parameter is the left-hand side of a [LIKE]\n or [GLOB] operator or if the parameter is compared to an indexed column\n and the [SQLITE_ENABLE_STAT4] compile-time option is enabled.\n </li>\n </ol>\n\n <p>^sqlite3_prepare_v3() differs from sqlite3_prepare_v2() only in having\n the extra prepFlags parameter, which is a bit array consisting of zero or\n more of the [SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_*] flags.  ^The\n sqlite3_prepare_v2() interface works exactly the same as\n sqlite3_prepare_v3() with a zero prepFlags parameter.","declarations":[{"spell":"4328:16-4328:31|-1|1|1","param_spellings":["4329:12-4329:14","4330:15-4330:19","4331:7-4331:12","4332:18-4332:24","4333:16-4333:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":2975554087305781815,"detailed_name":"int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4335:16-4335:34|-1|1|1","param_spellings":["4336:12-4336:14","4337:15-4337:19","4338:7-4338:12","4339:18-4339:24","4340:16-4340:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":10469016916925491453,"detailed_name":"int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4342:16-4342:34|-1|1|1","param_spellings":["4343:12-4343:14","4344:15-4344:19","4345:7-4345:12","4346:16-4346:25","4347:18-4347:24","4348:16-4348:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":9190395421199265214,"detailed_name":"int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4350:16-4350:33|-1|1|1","param_spellings":["4351:12-4351:14","4352:15-4352:19","4353:7-4353:12","4354:18-4354:24","4355:16-4355:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":9040927999703374999,"detailed_name":"int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4357:16-4357:36|-1|1|1","param_spellings":["4358:12-4358:14","4359:15-4359:19","4360:7-4360:12","4361:18-4361:24","4362:16-4362:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":14112924254438182745,"detailed_name":"int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4364:16-4364:36|-1|1|1","param_spellings":["4365:12-4365:14","4366:15-4366:19","4367:7-4367:12","4368:16-4368:25","4369:18-4369:24","4370:16-4370:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":1452151114502858949,"detailed_name":"const char *sqlite3_sql(sqlite3_stmt *pStmt)","short_name_offset":12,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Retrieving Statement SQL\n METHOD: sqlite3_stmt\n\n ^The sqlite3_sql(P) interface returns a pointer to a copy of the UTF-8\n SQL text used to create [prepared statement] P if P was\n created by [sqlite3_prepare_v2()], [sqlite3_prepare_v3()],\n [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].\n ^The sqlite3_expanded_sql(P) interface returns a pointer to a UTF-8\n string containing the SQL text of prepared statement P with\n [bound parameters] expanded.\n ^The sqlite3_normalized_sql(P) interface returns a pointer to a UTF-8\n string containing the normalized SQL text of prepared statement P.  The\n semantics used to normalize a SQL statement are unspecified and subject\n to change.  At a minimum, literal values will be replaced with suitable\n placeholders.\n\n ^(For example, if a prepared statement is created using the SQL\n text \"SELECT $abc,:xyz\" and if parameter $abc is bound to integer 2345\n and parameter :xyz is unbound, then sqlite3_sql() will return\n the original string, \"SELECT $abc,:xyz\" but sqlite3_expanded_sql()\n will return \"SELECT 2345,NULL\".)^\n\n ^The sqlite3_expanded_sql() interface returns NULL if insufficient memory\n is available to hold the result, or if the result would exceed the\n the maximum string length determined by the [SQLITE_LIMIT_LENGTH].\n\n ^The [SQLITE_TRACE_SIZE_LIMIT] compile-time option limits the size of\n bound parameter expansions.  ^The [SQLITE_OMIT_TRACE] compile-time\n option causes sqlite3_expanded_sql() to always return NULL.\n\n ^The strings returned by sqlite3_sql(P) and sqlite3_normalized_sql(P)\n are managed by SQLite and are automatically freed when the prepared\n statement is finalized.\n ^The string returned by sqlite3_expanded_sql(P), on the other hand,\n is obtained from [sqlite3_malloc()] and must be freed by the application\n by passing it to [sqlite3_free()].\n\n ^The sqlite3_normalized_sql() interface is only available if\n the [SQLITE_ENABLE_NORMALIZE] compile-time option is defined.","declarations":[{"spell":"4414:24-4414:35|-1|1|1","param_spellings":["4414:50-4414:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":7408788279194364709,"detailed_name":"char *sqlite3_expanded_sql(sqlite3_stmt *pStmt)","short_name_offset":6,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4415:18-4415:38|-1|1|1","param_spellings":["4415:53-4415:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":8373178606679770471,"detailed_name":"int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine If An SQL Statement Writes The Database\n METHOD: sqlite3_stmt\n\n ^The sqlite3_stmt_readonly(X) interface returns true (non-zero) if\n and only if the [prepared statement] X makes no direct changes to\n the content of the database file.\n\n Note that [application-defined SQL functions] or\n [virtual tables] might change the database indirectly as a side effect.\n ^(For example, if an application defines a function \"eval()\" that\n calls [sqlite3_exec()], then the following SQL statement would\n change the database file through side-effects:\n\n <blockquote><pre>\n    SELECT eval('DELETE FROM t1') FROM t2;\n </pre></blockquote>\n\n But because the [SELECT] statement does not change the database file\n directly, sqlite3_stmt_readonly() would still return true.)^\n\n ^Transaction control statements such as [BEGIN], [COMMIT], [ROLLBACK],\n [SAVEPOINT], and [RELEASE] cause sqlite3_stmt_readonly() to return true,\n since the statements themselves do not actually modify the database but\n rather they control the timing of when other statements modify the\n database.  ^The [ATTACH] and [DETACH] statements also cause\n sqlite3_stmt_readonly() to return true since, while those statements\n change the configuration of a database connection, they do not make\n changes to the content of the database files on disk.\n ^The sqlite3_stmt_readonly() interface returns true for [BEGIN] since\n [BEGIN] merely sets internal flags, but the [BEGIN|BEGIN IMMEDIATE] and\n [BEGIN|BEGIN EXCLUSIVE] commands do touch the database and so\n sqlite3_stmt_readonly() returns false for those commands.\n\n ^This routine returns false if there is any possibility that the\n statement might change the database file.  ^A false return does\n not guarantee that the statement will change the database file.\n ^For example, an UPDATE statement might have a WHERE clause that\n makes it a no-op, but the sqlite3_stmt_readonly() result would still\n be false.  ^Similarly, a CREATE TABLE IF NOT EXISTS statement is a\n read-only no-op if the table already exists, but\n sqlite3_stmt_readonly() still returns false for such a statement.\n\n ^If prepared statement X is an [EXPLAIN] or [EXPLAIN QUERY PLAN]\n statement, then sqlite3_stmt_readonly(X) returns the same value as\n if the EXPLAIN or EXPLAIN QUERY PLAN prefix were omitted.","declarations":[{"spell":"4467:16-4467:37|-1|1|1","param_spellings":["4467:52-4467:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":7859751515951953179,"detailed_name":"int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Query The EXPLAIN Setting For A Prepared Statement\n METHOD: sqlite3_stmt\n\n ^The sqlite3_stmt_isexplain(S) interface returns 1 if the\n prepared statement S is an EXPLAIN statement, or 2 if the\n statement S is an EXPLAIN QUERY PLAN.\n ^The sqlite3_stmt_isexplain(S) interface returns 0 if S is\n an ordinary statement or a NULL pointer.","declarations":[{"spell":"4479:16-4479:38|-1|1|1","param_spellings":["4479:53-4479:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":13164443934350724031,"detailed_name":"int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Change The EXPLAIN Setting For A Prepared Statement\n METHOD: sqlite3_stmt\n\n The sqlite3_stmt_explain(S,E) interface changes the EXPLAIN\n setting for [prepared statement] S.  If E is zero, then S becomes\n a normal prepared statement.  If E is 1, then S behaves as if\n its SQL text began with \"[EXPLAIN]\".  If E is 2, then S behaves as if\n its SQL text began with \"[EXPLAIN QUERY PLAN]\".\n\n Calling sqlite3_stmt_explain(S,E) might cause S to be reprepared.\n SQLite tries to avoid a reprepare, but a reprepare might be necessary\n on the first transition into EXPLAIN or EXPLAIN QUERY PLAN mode.\n\n Because of the potential need to reprepare, a call to\n sqlite3_stmt_explain(S,E) will fail with SQLITE_ERROR if S cannot be\n reprepared because it was created using [sqlite3_prepare()] instead of\n the newer [sqlite3_prepare_v2()] or [sqlite3_prepare_v3()] interfaces and\n hence has no saved SQL text with which to reprepare.\n\n Changing the explain setting for a prepared statement does not change\n the original SQL text for the statement.  Hence, if the SQL text originally\n began with EXPLAIN or EXPLAIN QUERY PLAN, but sqlite3_stmt_explain(S,0)\n is called to convert the statement into an ordinary statement, the EXPLAIN\n or EXPLAIN QUERY PLAN keywords will still appear in the sqlite3_sql(S)\n output, even though the statement now acts like a normal SQL statement.\n\n This routine returns SQLITE_OK if the explain mode is successfully\n changed, or an error code if the explain mode could not be changed.\n The explain mode cannot be changed while a statement is active.\n Hence, it is good practice to call [sqlite3_reset(S)]\n immediately prior to calling sqlite3_stmt_explain(S,E).","declarations":[{"spell":"4514:16-4514:36|-1|1|1","param_spellings":["4514:51-4514:56","4514:62-4514:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":11762224108811459865,"detailed_name":"int sqlite3_stmt_busy(sqlite3_stmt *)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine If A Prepared Statement Has Been Reset\n METHOD: sqlite3_stmt\n\n ^The sqlite3_stmt_busy(S) interface returns true (non-zero) if the\n [prepared statement] S has been stepped at least once using\n [sqlite3_step(S)] but has neither run to completion (returned\n [SQLITE_DONE] from [sqlite3_step(S)]) nor\n been reset using [sqlite3_reset(S)].  ^The sqlite3_stmt_busy(S)\n interface returns false if S is a NULL pointer.  If S is not a\n NULL pointer and is not a pointer to a valid [prepared statement]\n object, then the behavior is undefined and probably undesirable.\n\n This interface can be used in combination [sqlite3_next_stmt()]\n to locate all prepared statements associated with a database\n connection that are in need of being reset.  This can be used,\n for example, in diagnostic routines to search for prepared\n statements that are holding a transaction open.","declarations":[{"spell":"4535:16-4535:33|-1|1|1","param_spellings":["4535:47-4535:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":8519566952733638309,"detailed_name":"int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(void *))","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Binding Values To Prepared Statements\n KEYWORDS: {host parameter} {host parameters} {host parameter name}\n KEYWORDS: {SQL parameter} {SQL parameters} {parameter binding}\n METHOD: sqlite3_stmt\n\n ^(In the SQL statement text input to [sqlite3_prepare_v2()] and its variants,\n literals may be replaced by a [parameter] that matches one of following\n templates:\n\n <ul>\n <li>  ?\n <li>  ?NNN\n <li>  :VVV\n <li>  @VVV\n <li>  $VVV\n </ul>\n\n In the templates above, NNN represents an integer literal,\n and VVV represents an alphanumeric identifier.)^  ^The values of these\n parameters (also called \"host parameter names\" or \"SQL parameters\")\n can be set using the sqlite3_bind_*() routines defined here.\n\n ^The first argument to the sqlite3_bind_*() routines is always\n a pointer to the [sqlite3_stmt] object returned from\n [sqlite3_prepare_v2()] or its variants.\n\n ^The second argument is the index of the SQL parameter to be set.\n ^The leftmost SQL parameter has an index of 1.  ^When the same named\n SQL parameter is used more than once, second and subsequent\n occurrences have the same index as the first occurrence.\n ^The index for named parameters can be looked up using the\n [sqlite3_bind_parameter_index()] API if desired.  ^The index\n for \"?NNN\" parameters is the value of NNN.\n ^The NNN value must be between 1 and the [sqlite3_limit()]\n parameter [SQLITE_LIMIT_VARIABLE_NUMBER] (default value: 32766).\n\n ^The third argument is the value to bind to the parameter.\n ^If the third parameter to sqlite3_bind_text() or sqlite3_bind_text16()\n or sqlite3_bind_blob() is a NULL pointer then the fourth parameter\n is ignored and the end result is the same as sqlite3_bind_null().\n ^If the third parameter to sqlite3_bind_text() is not NULL, then\n it should be a pointer to well-formed UTF8 text.\n ^If the third parameter to sqlite3_bind_text16() is not NULL, then\n it should be a pointer to well-formed UTF16 text.\n ^If the third parameter to sqlite3_bind_text64() is not NULL, then\n it should be a pointer to a well-formed unicode string that is\n either UTF8 if the sixth parameter is SQLITE_UTF8, or UTF16\n otherwise.\n\n [[byte-order determination rules]] ^The byte-order of\n UTF16 input text is determined by the byte-order mark (BOM, U+FEFF)\n found in first character, which is removed, or in the absence of a BOM\n the byte order is the native byte order of the host\n machine for sqlite3_bind_text16() or the byte order specified in\n the 6th parameter for sqlite3_bind_text64().)^\n ^If UTF16 input text contains invalid unicode\n characters, then SQLite might change those invalid characters\n into the unicode replacement character: U+FFFD.\n\n ^(In those routines that have a fourth argument, its value is the\n number of bytes in the parameter.  To be clear: the value is the\n number of <u>bytes</u> in the value, not the number of characters.)^\n ^If the fourth parameter to sqlite3_bind_text() or sqlite3_bind_text16()\n is negative, then the length of the string is\n the number of bytes up to the first zero terminator.\n If the fourth parameter to sqlite3_bind_blob() is negative, then\n the behavior is undefined.\n If a non-negative fourth parameter is provided to sqlite3_bind_text()\n or sqlite3_bind_text16() or sqlite3_bind_text64() then\n that parameter must be the byte offset\n where the NUL terminator would occur assuming the string were NUL\n terminated.  If any NUL characters occurs at byte offsets less than\n the value of the fourth parameter then the resulting string value will\n contain embedded NULs.  The result of expressions involving strings\n with embedded NULs is undefined.\n\n ^The fifth argument to the BLOB and string binding interfaces controls\n or indicates the lifetime of the object referenced by the third parameter.\n These three options exist:\n ^ (1) A destructor to dispose of the BLOB or string after SQLite has finished\n with it may be passed. ^It is called to dispose of the BLOB or string even\n if the call to the bind API fails, except the destructor is not called if\n the third parameter is a NULL pointer or the fourth parameter is negative.\n ^ (2) The special constant, [SQLITE_STATIC], may be passed to indicate that\n the application remains responsible for disposing of the object. ^In this\n case, the object and the provided pointer to it must remain valid until\n either the prepared statement is finalized or the same SQL parameter is\n bound to something else, whichever occurs sooner.\n ^ (3) The constant, [SQLITE_TRANSIENT], may be passed to indicate that the\n object is to be copied prior to the return from sqlite3_bind_*(). ^The\n object and pointer to it must remain valid until then. ^SQLite will then\n manage the lifetime of its private copy.\n\n ^The sixth argument to sqlite3_bind_text64() must be one of\n [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE]\n to specify the encoding of the text in the third parameter.  If\n the sixth argument to sqlite3_bind_text64() is not one of the\n allowed values shown above, or if the text encoding is different\n from the encoding specified by the sixth parameter, then the behavior\n is undefined.\n\n ^The sqlite3_bind_zeroblob() routine binds a BLOB of length N that\n is filled with zeroes.  ^A zeroblob uses a fixed amount of memory\n (just an integer to hold its size) while it is being processed.\n Zeroblobs are intended to serve as placeholders for BLOBs whose\n content is later written using\n [sqlite3_blob_open | incremental BLOB I/O] routines.\n ^A negative value for the zeroblob results in a zero-length BLOB.\n\n ^The sqlite3_bind_pointer(S,I,P,T,D) routine causes the I-th parameter in\n [prepared statement] S to have an SQL value of NULL, but to also be\n associated with the pointer P of type T.  ^D is either a NULL pointer or\n a pointer to a destructor function for P. ^SQLite will invoke the\n destructor D with a single argument of P when it is finished using\n P.  The T parameter should be a static string, preferably a string\n literal. The sqlite3_bind_pointer() routine is part of the\n [pointer passing interface] added for SQLite 3.20.0.\n\n ^If any of the sqlite3_bind_*() routines are called with a NULL pointer\n for the [prepared statement] or with a prepared statement for which\n [sqlite3_step()] has been called more recently than [sqlite3_reset()],\n then the call will return [SQLITE_MISUSE].  If any sqlite3_bind_()\n routine is passed a [prepared statement] that has been finalized, the\n result is undefined and probably harmful.\n\n ^Bindings are not cleared by the [sqlite3_reset()] routine.\n ^Unbound parameters are interpreted as NULL.\n\n ^The sqlite3_bind_* routines return [SQLITE_OK] on success or an\n [error code] if anything goes wrong.\n ^[SQLITE_TOOBIG] might be returned if the size of a string or BLOB\n exceeds limits imposed by [sqlite3_limit]([SQLITE_LIMIT_LENGTH]) or\n [SQLITE_MAX_LENGTH].\n ^[SQLITE_RANGE] is returned if the parameter\n index is out of range.  ^[SQLITE_NOMEM] is returned if malloc() fails.\n\n See also: [sqlite3_bind_parameter_count()],\n [sqlite3_bind_parameter_name()], and [sqlite3_bind_parameter_index()].","declarations":[{"spell":"4735:16-4735:33|-1|1|1","param_spellings":["4735:47-4735:47","4735:52-4735:52","4735:65-4735:65","4735:71-4735:72","4735:80-4735:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":81,"usr":20953461258461751,"detailed_name":"int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, void (*)(void *))","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4736:16-4736:35|-1|1|1","param_spellings":["4736:49-4736:49","4736:54-4736:54","4736:67-4736:67","4736:83-4736:83","4737:31-4737:31"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":15869810630120893609,"detailed_name":"int sqlite3_bind_double(sqlite3_stmt *, int, double)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4738:16-4738:35|-1|1|1","param_spellings":["4738:49-4738:49","4738:54-4738:54","4738:62-4738:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":3293041768546139465,"detailed_name":"int sqlite3_bind_int(sqlite3_stmt *, int, int)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4739:16-4739:32|-1|1|1","param_spellings":["4739:46-4739:46","4739:51-4739:51","4739:56-4739:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":5824939680700252898,"detailed_name":"int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4740:16-4740:34|-1|1|1","param_spellings":["4740:48-4740:48","4740:53-4740:53","4740:68-4740:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":8562469276552622251,"detailed_name":"int sqlite3_bind_null(sqlite3_stmt *, int)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4741:16-4741:33|-1|1|1","param_spellings":["4741:47-4741:47","4741:52-4741:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":15825461760542699363,"detailed_name":"int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void *))","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4742:16-4742:33|-1|1|1","param_spellings":["4742:47-4742:47","4742:51-4742:51","4742:63-4742:63","4742:67-4742:67","4742:74-4742:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":524731092696781135,"detailed_name":"int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(void *))","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4743:16-4743:35|-1|1|1","param_spellings":["4743:49-4743:49","4743:54-4743:54","4743:67-4743:67","4743:72-4743:72","4743:80-4743:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":18009054443949643212,"detailed_name":"int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4744:16-4744:35|-1|1|1","param_spellings":["4744:49-4744:49","4744:54-4744:54","4744:67-4744:67","4744:83-4744:83","4745:32-4745:32","4745:56-4745:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":3425986386959990630,"detailed_name":"int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4746:16-4746:34|-1|1|1","param_spellings":["4746:48-4746:48","4746:53-4746:53","4746:75-4746:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":13098038184751171430,"detailed_name":"int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)(void *))","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4747:16-4747:36|-1|1|1","param_spellings":["4747:50-4747:50","4747:55-4747:55","4747:62-4747:62","4747:75-4747:75","4747:82-4747:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":91,"usr":17601240189961829965,"detailed_name":"int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4748:16-4748:37|-1|1|1","param_spellings":["4748:51-4748:51","4748:56-4748:56","4748:62-4748:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":10123352890354526311,"detailed_name":"int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4749:16-4749:39|-1|1|1","param_spellings":["4749:53-4749:53","4749:58-4749:58","4749:74-4749:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":12544061493962928074,"detailed_name":"int sqlite3_bind_parameter_count(sqlite3_stmt *)","short_name_offset":4,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Number Of SQL Parameters\n METHOD: sqlite3_stmt\n\n ^This routine can be used to find the number of [SQL parameters]\n in a [prepared statement].  SQL parameters are tokens of the\n form \"?\", \"?NNN\", \":AAA\", \"$AAA\", or \"@AAA\" that serve as\n placeholders for values that are [sqlite3_bind_blob | bound]\n to the parameters at a later time.\n\n ^(This routine actually returns the index of the largest (rightmost)\n parameter. For all forms except ?NNN, this will correspond to the\n number of unique parameters.  If parameters of the ?NNN form are used,\n there may be gaps in the list.)^\n\n See also: [sqlite3_bind_blob|sqlite3_bind()],\n [sqlite3_bind_parameter_name()], and\n [sqlite3_bind_parameter_index()].","declarations":[{"spell":"4770:16-4770:44|-1|1|1","param_spellings":["4770:58-4770:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":190472059626665906,"detailed_name":"const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Name Of A Host Parameter\n METHOD: sqlite3_stmt\n\n ^The sqlite3_bind_parameter_name(P,N) interface returns\n the name of the N-th [SQL parameter] in the [prepared statement] P.\n ^(SQL parameters of the form \"?NNN\" or \":AAA\" or \"@AAA\" or \"$AAA\"\n have a name which is the string \"?NNN\" or \":AAA\" or \"@AAA\" or \"$AAA\"\n respectively.\n In other words, the initial \":\" or \"$\" or \"@\" or \"?\"\n is included as part of the name.)^\n ^Parameters of the form \"?\" without a following integer have no name\n and are referred to as \"nameless\" or \"anonymous parameters\".\n\n ^The first host parameter has an index of 1, not 0.\n\n ^If the value N is out of range or if the N-th parameter is\n nameless, then NULL is returned.  ^The returned string is\n always in UTF-8 encoding even if the named parameter was\n originally specified as UTF-16 in [sqlite3_prepare16()],\n [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].\n\n See also: [sqlite3_bind_blob|sqlite3_bind()],\n [sqlite3_bind_parameter_count()], and\n [sqlite3_bind_parameter_index()].","declarations":[{"spell":"4798:24-4798:51|-1|1|1","param_spellings":["4798:65-4798:65","4798:70-4798:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":2092757468469840333,"detailed_name":"int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName)","short_name_offset":4,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Index Of A Parameter With A Given Name\n METHOD: sqlite3_stmt\n\n ^Return the index of an SQL parameter given its name.  ^The\n index value returned is suitable for use as the second\n parameter to [sqlite3_bind_blob|sqlite3_bind()].  ^A zero\n is returned if no matching parameter is found.  ^The parameter\n name must be given in UTF-8 even if the original statement\n was prepared from UTF-16 text using [sqlite3_prepare16_v2()] or\n [sqlite3_prepare16_v3()].\n\n See also: [sqlite3_bind_blob|sqlite3_bind()],\n [sqlite3_bind_parameter_count()], and\n [sqlite3_bind_parameter_name()].","declarations":[{"spell":"4816:16-4816:44|-1|1|1","param_spellings":["4816:58-4816:58","4816:72-4816:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":96,"usr":11173896989454913577,"detailed_name":"int sqlite3_clear_bindings(sqlite3_stmt *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Reset All Bindings On A Prepared Statement\n METHOD: sqlite3_stmt\n\n ^Contrary to the intuition of many, [sqlite3_reset()] does not reset\n the [sqlite3_bind_blob | bindings] on a [prepared statement].\n ^Use this routine to reset all host parameters to NULL.","declarations":[{"spell":"4826:16-4826:38|-1|1|1","param_spellings":["4826:52-4826:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":97,"usr":2641712811847586124,"detailed_name":"int sqlite3_column_count(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Number Of Columns In A Result Set\n METHOD: sqlite3_stmt\n\n ^Return the number of columns in the result set returned by the\n [prepared statement]. ^If this routine returns 0, that means the\n [prepared statement] returns no data (for example an [UPDATE]).\n ^However, just because this routine returns a positive number does not\n mean that one or more rows of data will be returned.  ^A SELECT statement\n will always have a positive sqlite3_column_count() but depending on the\n WHERE clause constraints and the table content, it might return no rows.\n\n See also: [sqlite3_data_count()]","declarations":[{"spell":"4842:16-4842:36|-1|1|1","param_spellings":["4842:51-4842:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":98,"usr":12583368236892535720,"detailed_name":"const char *sqlite3_column_name(sqlite3_stmt *, int N)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Column Names In A Result Set\n METHOD: sqlite3_stmt\n\n ^These routines return the name assigned to a particular column\n in the result set of a [SELECT] statement.  ^The sqlite3_column_name()\n interface returns a pointer to a zero-terminated UTF-8 string\n and sqlite3_column_name16() returns a pointer to a zero-terminated\n UTF-16 string.  ^The first parameter is the [prepared statement]\n that implements the [SELECT] statement. ^The second parameter is the\n column number.  ^The leftmost column is number 0.\n\n ^The returned string pointer is valid until either the [prepared statement]\n is destroyed by [sqlite3_finalize()] or until the statement is automatically\n reprepared by the first call to [sqlite3_step()] for a particular run\n or until the next call to\n sqlite3_column_name() or sqlite3_column_name16() on the same column.\n\n ^If sqlite3_malloc() fails during the processing of either routine\n (for example during a conversion from UTF-8 to UTF-16) then a\n NULL pointer is returned.\n\n ^The name of a result column is the value of the \"AS\" clause for\n that column, if there is an AS clause.  If there is no AS clause\n then the name of the column is unspecified and may change from\n one release of SQLite to the next.","declarations":[{"spell":"4871:24-4871:43|-1|1|1","param_spellings":["4871:57-4871:57","4871:63-4871:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":99,"usr":958795038891657033,"detailed_name":"const void *sqlite3_column_name16(sqlite3_stmt *, int N)","short_name_offset":12,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4872:24-4872:45|-1|1|1","param_spellings":["4872:59-4872:59","4872:65-4872:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":13960945697215502958,"detailed_name":"const char *sqlite3_column_database_name(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Source Of Data In A Query Result\n METHOD: sqlite3_stmt\n\n ^These routines provide a means to determine the database, table, and\n table column that is the origin of a particular result column in\n [SELECT] statement.\n ^The name of the database or table or column can be returned as\n either a UTF-8 or UTF-16 string.  ^The _database_ routines return\n the database name, the _table_ routines return the table name, and\n the origin_ routines return the column name.\n ^The returned string is valid until the [prepared statement] is destroyed\n using [sqlite3_finalize()] or until the statement is automatically\n reprepared by the first call to [sqlite3_step()] for a particular run\n or until the same information is requested\n again in a different encoding.\n\n ^The names returned are the original un-aliased names of the\n database, table, and column.\n\n ^The first argument to these interfaces is a [prepared statement].\n ^These functions return information about the Nth result column returned by\n the statement, where N is the second function argument.\n ^The left-most column is column 0 for these routines.\n\n ^If the Nth column returned by the statement is an expression or\n subquery and is not a column value, then all of these functions return\n NULL.  ^These routines might also return NULL if a memory allocation error\n occurs.  ^Otherwise, they return the name of the attached database, table,\n or column that query result column was extracted from.\n\n ^As with all other SQLite APIs, those whose names end with \"16\" return\n UTF-16 encoded strings and the other functions return UTF-8.\n\n ^These APIs are only available if the library was compiled with the\n [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol.\n\n If two or more threads call one or more\n [sqlite3_column_database_name | column metadata interfaces]\n for the same [prepared statement] and result column\n at the same time then the results are undefined.","declarations":[{"spell":"4916:24-4916:52|-1|1|1","param_spellings":["4916:66-4916:66","4916:70-4916:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":2605568516976819362,"detailed_name":"const void *sqlite3_column_database_name16(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4917:24-4917:54|-1|1|1","param_spellings":["4917:68-4917:68","4917:72-4917:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":102,"usr":6276902672901092572,"detailed_name":"const char *sqlite3_column_table_name(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4918:24-4918:49|-1|1|1","param_spellings":["4918:63-4918:63","4918:67-4918:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":12482998224169882034,"detailed_name":"const void *sqlite3_column_table_name16(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4919:24-4919:51|-1|1|1","param_spellings":["4919:65-4919:65","4919:69-4919:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":104,"usr":17055394162034435126,"detailed_name":"const char *sqlite3_column_origin_name(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4920:24-4920:50|-1|1|1","param_spellings":["4920:64-4920:64","4920:68-4920:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":105,"usr":957548977206814337,"detailed_name":"const void *sqlite3_column_origin_name16(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4921:24-4921:52|-1|1|1","param_spellings":["4921:66-4921:66","4921:70-4921:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":106,"usr":13174365003563754326,"detailed_name":"const char *sqlite3_column_decltype(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Declared Datatype Of A Query Result\n METHOD: sqlite3_stmt\n\n ^(The first parameter is a [prepared statement].\n If this statement is a [SELECT] statement and the Nth column of the\n returned result set of that [SELECT] is a table column (not an\n expression or subquery) then the declared type of the table\n column is returned.)^  ^If the Nth column of the result set is an\n expression or subquery, then a NULL pointer is returned.\n ^The returned string is always UTF-8 encoded.\n\n ^(For example, given the database schema:\n\n CREATE TABLE t1(c1 VARIANT);\n\n and the following statement to be compiled:\n\n SELECT c1 + 1, c1 FROM t1;\n\n this routine would return the string \"VARIANT\" for the second result\n column (i==1), and a NULL pointer for the first result column (i==0).)^\n\n ^SQLite uses dynamic run-time typing.  ^So just because a column\n is declared to contain a particular type does not mean that the\n data stored in that column is of the declared type.  SQLite is\n strongly typed, but the typing is dynamic not static.  ^Type\n is associated with individual values, not with the containers\n used to hold those values.","declarations":[{"spell":"4953:24-4953:47|-1|1|1","param_spellings":["4953:61-4953:61","4953:65-4953:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":107,"usr":2511879647783554508,"detailed_name":"const void *sqlite3_column_decltype16(sqlite3_stmt *, int)","short_name_offset":12,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"4954:24-4954:49|-1|1|1","param_spellings":["4954:63-4954:63","4954:67-4954:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":108,"usr":15664631574867433562,"detailed_name":"int sqlite3_step(sqlite3_stmt *)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Evaluate An SQL Statement\n METHOD: sqlite3_stmt\n\n After a [prepared statement] has been prepared using any of\n [sqlite3_prepare_v2()], [sqlite3_prepare_v3()], [sqlite3_prepare16_v2()],\n or [sqlite3_prepare16_v3()] or one of the legacy\n interfaces [sqlite3_prepare()] or [sqlite3_prepare16()], this function\n must be called one or more times to evaluate the statement.\n\n The details of the behavior of the sqlite3_step() interface depend\n on whether the statement was prepared using the newer \"vX\" interfaces\n [sqlite3_prepare_v3()], [sqlite3_prepare_v2()], [sqlite3_prepare16_v3()],\n [sqlite3_prepare16_v2()] or the older legacy\n interfaces [sqlite3_prepare()] and [sqlite3_prepare16()].  The use of the\n new \"vX\" interface is recommended for new applications but the legacy\n interface will continue to be supported.\n\n ^In the legacy interface, the return value will be either [SQLITE_BUSY],\n [SQLITE_DONE], [SQLITE_ROW], [SQLITE_ERROR], or [SQLITE_MISUSE].\n ^With the \"v2\" interface, any of the other [result codes] or\n [extended result codes] might be returned as well.\n\n ^[SQLITE_BUSY] means that the database engine was unable to acquire the\n database locks it needs to do its job.  ^If the statement is a [COMMIT]\n or occurs outside of an explicit transaction, then you can retry the\n statement.  If the statement is not a [COMMIT] and occurs within an\n explicit transaction then you should rollback the transaction before\n continuing.\n\n ^[SQLITE_DONE] means that the statement has finished executing\n successfully.  sqlite3_step() should not be called again on this virtual\n machine without first calling [sqlite3_reset()] to reset the virtual\n machine back to its initial state.\n\n ^If the SQL statement being executed returns any data, then [SQLITE_ROW]\n is returned each time a new row of data is ready for processing by the\n caller. The values may be accessed using the [column access functions].\n sqlite3_step() is called again to retrieve the next row of data.\n\n ^[SQLITE_ERROR] means that a run-time error (such as a constraint\n violation) has occurred.  sqlite3_step() should not be called again on\n the VM. More information may be found by calling [sqlite3_errmsg()].\n ^With the legacy interface, a more specific error code (for example,\n [SQLITE_INTERRUPT], [SQLITE_SCHEMA], [SQLITE_CORRUPT], and so forth)\n can be obtained by calling [sqlite3_reset()] on the\n [prepared statement].  ^In the \"v2\" interface,\n the more specific error code is returned directly by sqlite3_step().\n\n [SQLITE_MISUSE] means that the this routine was called inappropriately.\n Perhaps it was called on a [prepared statement] that has\n already been [sqlite3_finalize | finalized] or on one that had\n previously returned [SQLITE_ERROR] or [SQLITE_DONE].  Or it could\n be the case that the same database connection is being used by two or\n more threads at the same moment in time.\n\n For all versions of SQLite up to and including 3.6.23.1, a call to\n [sqlite3_reset()] was required after sqlite3_step() returned anything\n other than [SQLITE_ROW] before any subsequent invocation of\n sqlite3_step().  Failure to reset the prepared statement using\n [sqlite3_reset()] would result in an [SQLITE_MISUSE] return from\n sqlite3_step().  But after [version 3.6.23.1] ([dateof:3.6.23.1],\n sqlite3_step() began\n calling [sqlite3_reset()] automatically in this circumstance rather\n than returning [SQLITE_MISUSE].  This is not considered a compatibility\n break because any application that ever receives an SQLITE_MISUSE error\n is broken by definition.  The [SQLITE_OMIT_AUTORESET] compile-time option\n can be used to restore the legacy behavior.\n\n <b>Goofy Interface Alert:</b> In the legacy interface, the sqlite3_step()\n API always returns a generic error code, [SQLITE_ERROR], following any\n error other than [SQLITE_BUSY] and [SQLITE_MISUSE].  You must call\n [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the\n specific [error codes] that better describes the error.\n We admit that this is a goofy design.  The problem has been fixed\n with the \"v2\" interface.  If you prepare all of your SQL statements\n using [sqlite3_prepare_v3()] or [sqlite3_prepare_v2()]\n or [sqlite3_prepare16_v2()] or [sqlite3_prepare16_v3()] instead\n of the legacy [sqlite3_prepare()] and [sqlite3_prepare16()] interfaces,\n then the more specific [error codes] are returned directly\n by sqlite3_step().  The use of the \"vX\" interfaces is recommended.","declarations":[{"spell":"5038:16-5038:28|-1|1|1","param_spellings":["5038:42-5038:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":109,"usr":2184534195105543464,"detailed_name":"int sqlite3_data_count(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Number of columns in a result set\n METHOD: sqlite3_stmt\n\n ^The sqlite3_data_count(P) interface returns the number of columns in the\n current row of the result set of [prepared statement] P.\n ^If prepared statement P does not have results ready to return\n (via calls to the [sqlite3_column_int | sqlite3_column()] family of\n interfaces) then sqlite3_data_count(P) returns 0.\n ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer.\n ^The sqlite3_data_count(P) routine returns 0 if the previous call to\n [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P)\n will return non-zero if previous call to [sqlite3_step](P) returned\n [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum]\n where it always returns zero since each step of that multi-step\n pragma returns 0 columns of data.\n\n See also: [sqlite3_column_count()]","declarations":[{"spell":"5059:16-5059:34|-1|1|1","param_spellings":["5059:49-5059:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":110,"usr":7415835381302426094,"detailed_name":"const void *sqlite3_column_blob(sqlite3_stmt *, int iCol)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Result Values From A Query\n KEYWORDS: {column access functions}\n METHOD: sqlite3_stmt\n\n <b>Summary:</b>\n <blockquote><table border=0 cellpadding=0 cellspacing=0>\n <tr><td><b>sqlite3_column_blob</b><td>&rarr;<td>BLOB result\n <tr><td><b>sqlite3_column_double</b><td>&rarr;<td>REAL result\n <tr><td><b>sqlite3_column_int</b><td>&rarr;<td>32-bit INTEGER result\n <tr><td><b>sqlite3_column_int64</b><td>&rarr;<td>64-bit INTEGER result\n <tr><td><b>sqlite3_column_text</b><td>&rarr;<td>UTF-8 TEXT result\n <tr><td><b>sqlite3_column_text16</b><td>&rarr;<td>UTF-16 TEXT result\n <tr><td><b>sqlite3_column_value</b><td>&rarr;<td>The result as an\n [sqlite3_value|unprotected sqlite3_value] object.\n <tr><td>&nbsp;<td>&nbsp;<td>&nbsp;\n <tr><td><b>sqlite3_column_bytes</b><td>&rarr;<td>Size of a BLOB\n or a UTF-8 TEXT result in bytes\n <tr><td><b>sqlite3_column_bytes16&nbsp;&nbsp;</b>\n <td>&rarr;&nbsp;&nbsp;<td>Size of UTF-16\n TEXT in bytes\n <tr><td><b>sqlite3_column_type</b><td>&rarr;<td>Default\n datatype of the result\n </table></blockquote>\n\n <b>Details:</b>\n\n ^These routines return information about a single column of the current\n result row of a query.  ^In every case the first argument is a pointer\n to the [prepared statement] that is being evaluated (the [sqlite3_stmt*]\n that was returned from [sqlite3_prepare_v2()] or one of its variants)\n and the second argument is the index of the column for which information\n should be returned. ^The leftmost column of the result set has the index 0.\n ^The number of columns in the result can be determined using\n [sqlite3_column_count()].\n\n If the SQL statement does not currently point to a valid row, or if the\n column index is out of range, the result is undefined.\n These routines may only be called when the most recent call to\n [sqlite3_step()] has returned [SQLITE_ROW] and neither\n [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.\n If any of these routines are called after [sqlite3_reset()] or\n [sqlite3_finalize()] or after [sqlite3_step()] has returned\n something other than [SQLITE_ROW], the results are undefined.\n If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]\n are called from a different thread while any of these routines\n are pending, then the results are undefined.\n\n The first six interfaces (_blob, _double, _int, _int64, _text, and _text16)\n each return the value of a result column in a specific data format.  If\n the result column is not initially in the requested format (for example,\n if the query returns an integer but the sqlite3_column_text() interface\n is used to extract the value) then an automatic type conversion is performed.\n\n ^The sqlite3_column_type() routine returns the\n [SQLITE_INTEGER | datatype code] for the initial data type\n of the result column.  ^The returned value is one of [SQLITE_INTEGER],\n [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].\n The return value of sqlite3_column_type() can be used to decide which\n of the first six interface should be used to extract the column value.\n The value returned by sqlite3_column_type() is only meaningful if no\n automatic type conversions have occurred for the value in question.\n After a type conversion, the result of calling sqlite3_column_type()\n is undefined, though harmless.  Future\n versions of SQLite may change the behavior of sqlite3_column_type()\n following a type conversion.\n\n If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes()\n or sqlite3_column_bytes16() interfaces can be used to determine the size\n of that BLOB or string.\n\n ^If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes()\n routine returns the number of bytes in that BLOB or string.\n ^If the result is a UTF-16 string, then sqlite3_column_bytes() converts\n the string to UTF-8 and then returns the number of bytes.\n ^If the result is a numeric value then sqlite3_column_bytes() uses\n [sqlite3_snprintf()] to convert that value to a UTF-8 string and returns\n the number of bytes in that string.\n ^If the result is NULL, then sqlite3_column_bytes() returns zero.\n\n ^If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16()\n routine returns the number of bytes in that BLOB or string.\n ^If the result is a UTF-8 string, then sqlite3_column_bytes16() converts\n the string to UTF-16 and then returns the number of bytes.\n ^If the result is a numeric value then sqlite3_column_bytes16() uses\n [sqlite3_snprintf()] to convert that value to a UTF-16 string and returns\n the number of bytes in that string.\n ^If the result is NULL, then sqlite3_column_bytes16() returns zero.\n\n ^The values returned by [sqlite3_column_bytes()] and\n [sqlite3_column_bytes16()] do not include the zero terminators at the end\n of the string.  ^For clarity: the values returned by\n [sqlite3_column_bytes()] and [sqlite3_column_bytes16()] are the number of\n bytes in the string, not the number of characters.\n\n ^Strings returned by sqlite3_column_text() and sqlite3_column_text16(),\n even empty strings, are always zero-terminated.  ^The return\n value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer.\n\n ^Strings returned by sqlite3_column_text16() always have the endianness\n which is native to the platform, regardless of the text encoding set\n for the database.\n\n <b>Warning:</b> ^The object returned by [sqlite3_column_value()] is an\n [unprotected sqlite3_value] object.  In a multithreaded environment,\n an unprotected sqlite3_value object may only be used safely with\n [sqlite3_bind_value()] and [sqlite3_result_value()].\n If the [unprotected sqlite3_value] object returned by\n [sqlite3_column_value()] is used in any other way, including calls\n to routines like [sqlite3_value_int()], [sqlite3_value_text()],\n or [sqlite3_value_bytes()], the behavior is not threadsafe.\n Hence, the sqlite3_column_value() interface\n is normally only useful within the implementation of\n [application-defined SQL functions] or [virtual tables], not within\n top-level application code.\n\n These routines may attempt to convert the datatype of the result.\n ^For example, if the internal representation is FLOAT and a text result\n is requested, [sqlite3_snprintf()] is used internally to perform the\n conversion automatically.  ^(The following table details the conversions\n that are applied:\n\n <blockquote>\n <table border=\"1\">\n <tr><th> Internal<br>Type <th> Requested<br>Type <th>  Conversion\n\n <tr><td>  NULL    <td> INTEGER   <td> Result is 0\n <tr><td>  NULL    <td>  FLOAT    <td> Result is 0.0\n <tr><td>  NULL    <td>   TEXT    <td> Result is a NULL pointer\n <tr><td>  NULL    <td>   BLOB    <td> Result is a NULL pointer\n <tr><td> INTEGER  <td>  FLOAT    <td> Convert from integer to float\n <tr><td> INTEGER  <td>   TEXT    <td> ASCII rendering of the integer\n <tr><td> INTEGER  <td>   BLOB    <td> Same as INTEGER->TEXT\n <tr><td>  FLOAT   <td> INTEGER   <td> [CAST] to INTEGER\n <tr><td>  FLOAT   <td>   TEXT    <td> ASCII rendering of the float\n <tr><td>  FLOAT   <td>   BLOB    <td> [CAST] to BLOB\n <tr><td>  TEXT    <td> INTEGER   <td> [CAST] to INTEGER\n <tr><td>  TEXT    <td>  FLOAT    <td> [CAST] to REAL\n <tr><td>  TEXT    <td>   BLOB    <td> No change\n <tr><td>  BLOB    <td> INTEGER   <td> [CAST] to INTEGER\n <tr><td>  BLOB    <td>  FLOAT    <td> [CAST] to REAL\n <tr><td>  BLOB    <td>   TEXT    <td> [CAST] to TEXT, ensure zero terminator\n </table>\n </blockquote>)^\n\n Note that when type conversions occur, pointers returned by prior\n calls to sqlite3_column_blob(), sqlite3_column_text(), and/or\n sqlite3_column_text16() may be invalidated.\n Type conversions and pointer invalidations might occur\n in the following cases:\n\n <ul>\n <li> The initial content is a BLOB and sqlite3_column_text() or\n      sqlite3_column_text16() is called.  A zero-terminator might\n      need to be added to the string.</li>\n <li> The initial content is UTF-8 text and sqlite3_column_bytes16() or\n      sqlite3_column_text16() is called.  The content must be converted\n      to UTF-16.</li>\n <li> The initial content is UTF-16 text and sqlite3_column_bytes() or\n      sqlite3_column_text() is called.  The content must be converted\n      to UTF-8.</li>\n </ul>\n\n ^Conversions between UTF-16be and UTF-16le are always done in place and do\n not invalidate a prior pointer, though of course the content of the buffer\n that the prior pointer references will have been modified.  Other kinds\n of conversion are done in place when it is possible, but sometimes they\n are not possible and in those cases prior pointers are invalidated.\n\n The safest policy is to invoke these routines\n in one of the following ways:\n\n <ul>\n  <li>sqlite3_column_text() followed by sqlite3_column_bytes()</li>\n  <li>sqlite3_column_blob() followed by sqlite3_column_bytes()</li>\n  <li>sqlite3_column_text16() followed by sqlite3_column_bytes16()</li>\n </ul>\n\n In other words, you should call sqlite3_column_text(),\n sqlite3_column_blob(), or sqlite3_column_text16() first to force the result\n into the desired format, then invoke sqlite3_column_bytes() or\n sqlite3_column_bytes16() to find the size of the result.  Do not mix calls\n to sqlite3_column_text() or sqlite3_column_blob() with calls to\n sqlite3_column_bytes16(), and do not mix calls to sqlite3_column_text16()\n with calls to sqlite3_column_bytes().\n\n ^The pointers returned are valid until a type conversion occurs as\n described above, or until [sqlite3_step()] or [sqlite3_reset()] or\n [sqlite3_finalize()] is called.  ^The memory space used to hold strings\n and BLOBs is freed automatically.  Do not pass the pointers returned\n from [sqlite3_column_blob()], [sqlite3_column_text()], etc. into\n [sqlite3_free()].\n\n As long as the input parameters are correct, these routines will only\n fail if an out-of-memory error occurs during a format conversion.\n Only the following subset of interfaces are subject to out-of-memory\n errors:\n\n <ul>\n <li> sqlite3_column_blob()\n <li> sqlite3_column_text()\n <li> sqlite3_column_text16()\n <li> sqlite3_column_bytes()\n <li> sqlite3_column_bytes16()\n </ul>\n\n If an out-of-memory error occurs, then the return value from these\n routines is the same as if the column had contained an SQL NULL value.\n Valid SQL NULL returns can be distinguished from out-of-memory errors\n by invoking the [sqlite3_errcode()] immediately after the suspect\n return value is obtained and before any\n other SQLite interface is called on the same [database connection].","declarations":[{"spell":"5306:24-5306:43|-1|1|1","param_spellings":["5306:57-5306:57","5306:63-5306:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":111,"usr":15973395874311722552,"detailed_name":"double sqlite3_column_double(sqlite3_stmt *, int iCol)","short_name_offset":7,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5307:19-5307:40|-1|1|1","param_spellings":["5307:54-5307:54","5307:60-5307:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":112,"usr":18360287275668803323,"detailed_name":"int sqlite3_column_int(sqlite3_stmt *, int iCol)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5308:16-5308:34|-1|1|1","param_spellings":["5308:48-5308:48","5308:54-5308:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":113,"usr":8078788354542227356,"detailed_name":"sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol)","short_name_offset":14,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5309:26-5309:46|-1|1|1","param_spellings":["5309:60-5309:60","5309:66-5309:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":114,"usr":17969608828972236766,"detailed_name":"const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol)","short_name_offset":21,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5310:33-5310:52|-1|1|1","param_spellings":["5310:66-5310:66","5310:72-5310:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":115,"usr":11048151709636976480,"detailed_name":"const void *sqlite3_column_text16(sqlite3_stmt *, int iCol)","short_name_offset":12,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5311:24-5311:45|-1|1|1","param_spellings":["5311:59-5311:59","5311:65-5311:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":116,"usr":1325056929685277502,"detailed_name":"sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol)","short_name_offset":15,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5312:27-5312:47|-1|1|1","param_spellings":["5312:61-5312:61","5312:67-5312:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":117,"usr":10143693209335926517,"detailed_name":"int sqlite3_column_bytes(sqlite3_stmt *, int iCol)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5313:16-5313:36|-1|1|1","param_spellings":["5313:50-5313:50","5313:56-5313:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":118,"usr":13321426439193379885,"detailed_name":"int sqlite3_column_bytes16(sqlite3_stmt *, int iCol)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5314:16-5314:38|-1|1|1","param_spellings":["5314:52-5314:52","5314:58-5314:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":119,"usr":10710655424569454950,"detailed_name":"int sqlite3_column_type(sqlite3_stmt *, int iCol)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5315:16-5315:35|-1|1|1","param_spellings":["5315:49-5315:49","5315:55-5315:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":120,"usr":2566645374142210794,"detailed_name":"int sqlite3_finalize(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Destroy A Prepared Statement Object\n DESTRUCTOR: sqlite3_stmt\n\n ^The sqlite3_finalize() function is called to delete a [prepared statement].\n ^If the most recent evaluation of the statement encountered no errors\n or if the statement is never been evaluated, then sqlite3_finalize() returns\n SQLITE_OK.  ^If the most recent evaluation of statement S failed, then\n sqlite3_finalize(S) returns the appropriate [error code] or\n [extended error code].\n\n ^The sqlite3_finalize(S) routine can be called at any point during\n the life cycle of [prepared statement] S:\n before statement S is ever evaluated, after\n one or more calls to [sqlite3_reset()], or after any call\n to [sqlite3_step()] regardless of whether or not the statement has\n completed execution.\n\n ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.\n\n The application must finalize every [prepared statement] in order to avoid\n resource leaks.  It is a grievous error for the application to try to use\n a prepared statement after it has been finalized.  Any use of a prepared\n statement after it has been finalized can result in undefined and\n undesirable behavior such as segfaults and heap corruption.","declarations":[{"spell":"5343:16-5343:32|-1|1|1","param_spellings":["5343:47-5343:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":121,"usr":3985127649861398795,"detailed_name":"int sqlite3_reset(sqlite3_stmt *pStmt)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Reset A Prepared Statement Object\n METHOD: sqlite3_stmt\n\n The sqlite3_reset() function is called to reset a [prepared statement]\n object back to its initial state, ready to be re-executed.\n ^Any SQL statement variables that had values bound to them using\n the [sqlite3_bind_blob | sqlite3_bind_*() API] retain their values.\n Use [sqlite3_clear_bindings()] to reset the bindings.\n\n ^The [sqlite3_reset(S)] interface resets the [prepared statement] S\n back to the beginning of its program.\n\n ^The return code from [sqlite3_reset(S)] indicates whether or not\n the previous evaluation of prepared statement S completed successfully.\n ^If [sqlite3_step(S)] has never before been called on S or if\n [sqlite3_step(S)] has not been called since the previous call\n to [sqlite3_reset(S)], then [sqlite3_reset(S)] will return\n [SQLITE_OK].\n\n ^If the most recent call to [sqlite3_step(S)] for the\n [prepared statement] S indicated an error, then\n [sqlite3_reset(S)] returns an appropriate [error code].\n ^The [sqlite3_reset(S)] interface might also return an [error code]\n if there were no prior errors but the process of resetting\n the prepared statement caused a new error. ^For example, if an\n [INSERT] statement with a [RETURNING] clause is only stepped one time,\n that one call to [sqlite3_step(S)] might return SQLITE_ROW but\n the overall statement might still fail and the [sqlite3_reset(S)] call\n might return SQLITE_BUSY if locking constraints prevent the\n database change from committing.  Therefore, it is important that\n applications check the return code from [sqlite3_reset(S)] even if\n no prior call to [sqlite3_step(S)] indicated a problem.\n\n ^The [sqlite3_reset(S)] interface does not change the values\n of any [sqlite3_bind_blob|bindings] on the [prepared statement] S.","declarations":[{"spell":"5382:16-5382:29|-1|1|1","param_spellings":["5382:44-5382:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":122,"usr":13093420486184604636,"detailed_name":"int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*)(sqlite3_context *, int, sqlite3_value **) xFunc, void (*)(sqlite3_context *, int, sqlite3_value **) xStep, void (*)(sqlite3_context *) xFinal)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Create Or Redefine SQL Functions\n KEYWORDS: {function creation routines}\n METHOD: sqlite3\n\n ^These functions (collectively known as \"function creation routines\")\n are used to add SQL functions or aggregates or to redefine the behavior\n of existing SQL functions or aggregates. The only differences between\n the three \"sqlite3_create_function*\" routines are the text encoding\n expected for the second parameter (the name of the function being\n created) and the presence or absence of a destructor callback for\n the application data pointer. Function sqlite3_create_window_function()\n is similar, but allows the user to supply the extra callback functions\n needed by [aggregate window functions].\n\n ^The first parameter is the [database connection] to which the SQL\n function is to be added.  ^If an application uses more than one database\n connection then application-defined SQL functions must be added\n to each database connection separately.\n\n ^The second parameter is the name of the SQL function to be created or\n redefined.  ^The length of the name is limited to 255 bytes in a UTF-8\n representation, exclusive of the zero-terminator.  ^Note that the name\n length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.\n ^Any attempt to create a function with a longer name\n will result in [SQLITE_MISUSE] being returned.\n\n ^The third parameter (nArg)\n is the number of arguments that the SQL function or\n aggregate takes. ^If this parameter is -1, then the SQL function or\n aggregate may take any number of arguments between 0 and the limit\n set by [sqlite3_limit]([SQLITE_LIMIT_FUNCTION_ARG]).  If the third\n parameter is less than -1 or greater than 127 then the behavior is\n undefined.\n\n ^The fourth parameter, eTextRep, specifies what\n [SQLITE_UTF8 | text encoding] this SQL function prefers for\n its parameters.  The application should set this parameter to\n [SQLITE_UTF16LE] if the function implementation invokes\n [sqlite3_value_text16le()] on an input, or [SQLITE_UTF16BE] if the\n implementation invokes [sqlite3_value_text16be()] on an input, or\n [SQLITE_UTF16] if [sqlite3_value_text16()] is used, or [SQLITE_UTF8]\n otherwise.  ^The same SQL function may be registered multiple times using\n different preferred text encodings, with different implementations for\n each encoding.\n ^When multiple implementations of the same function are available, SQLite\n will pick the one that involves the least amount of data conversion.\n\n ^The fourth parameter may optionally be ORed with [SQLITE_DETERMINISTIC]\n to signal that the function will always return the same result given\n the same inputs within a single SQL statement.  Most SQL functions are\n deterministic.  The built-in [random()] SQL function is an example of a\n function that is not deterministic.  The SQLite query planner is able to\n perform additional optimizations on deterministic functions, so use\n of the [SQLITE_DETERMINISTIC] flag is recommended where possible.\n\n ^The fourth parameter may also optionally include the [SQLITE_DIRECTONLY]\n flag, which if present prevents the function from being invoked from\n within VIEWs, TRIGGERs, CHECK constraints, generated column expressions,\n index expressions, or the WHERE clause of partial indexes.\n\n For best security, the [SQLITE_DIRECTONLY] flag is recommended for\n all application-defined SQL functions that do not need to be\n used inside of triggers, view, CHECK constraints, or other elements of\n the database schema.  This flags is especially recommended for SQL\n functions that have side effects or reveal internal application state.\n Without this flag, an attacker might be able to modify the schema of\n a database file to include invocations of the function with parameters\n chosen by the attacker, which the application will then execute when\n the database file is opened and read.\n\n ^(The fifth parameter is an arbitrary pointer.  The implementation of the\n function can gain access to this pointer using [sqlite3_user_data()].)^\n\n ^The sixth, seventh and eighth parameters passed to the three\n \"sqlite3_create_function*\" functions, xFunc, xStep and xFinal, are\n pointers to C-language functions that implement the SQL function or\n aggregate. ^A scalar SQL function requires an implementation of the xFunc\n callback only; NULL pointers must be passed as the xStep and xFinal\n parameters. ^An aggregate SQL function requires an implementation of xStep\n and xFinal and NULL pointer must be passed for xFunc. ^To delete an existing\n SQL function or aggregate, pass NULL pointers for all three function\n callbacks.\n\n ^The sixth, seventh, eighth and ninth parameters (xStep, xFinal, xValue\n and xInverse) passed to sqlite3_create_window_function are pointers to\n C-language callbacks that implement the new function. xStep and xFinal\n must both be non-NULL. xValue and xInverse may either both be NULL, in\n which case a regular aggregate function is created, or must both be\n non-NULL, in which case the new function may be used as either an aggregate\n or aggregate window function. More details regarding the implementation\n of aggregate window functions are\n [user-defined window functions|available here].\n\n ^(If the final parameter to sqlite3_create_function_v2() or\n sqlite3_create_window_function() is not NULL, then it is destructor for\n the application data pointer. The destructor is invoked when the function\n is deleted, either by being overloaded or when the database connection\n closes.)^ ^The destructor is also invoked if the call to\n sqlite3_create_function_v2() fails.  ^When the destructor callback is\n invoked, it is passed a single argument which is a copy of the application\n data pointer which was the fifth parameter to sqlite3_create_function_v2().\n\n ^It is permitted to register multiple implementations of the same\n functions with the same name but with either differing numbers of\n arguments or differing preferred text encodings.  ^SQLite will use\n the implementation that most closely matches the way in which the\n SQL function is used.  ^A function implementation with a non-negative\n nArg parameter is a better match than a function implementation with\n a negative nArg.  ^A function where the preferred text encoding\n matches the database encoding is a better\n match than a function where the encoding is different.\n ^A function where the encoding difference is between UTF16le and UTF16be\n is a closer match than a function where the encoding difference is\n between UTF8 and UTF16.\n\n ^Built-in functions may be overloaded by new application-defined functions.\n\n ^An application-defined function is permitted to call other\n SQLite interfaces.  However, such calls must not\n close the database connection nor finalize or reset the prepared\n statement in which the function is running.","declarations":[{"spell":"5508:16-5508:39|-1|1|1","param_spellings":["5509:12-5509:14","5510:15-5510:28","5511:7-5511:11","5512:7-5512:15","5513:9-5513:13","5514:10-5514:15","5515:10-5515:15","5516:10-5516:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":123,"usr":17962487689695986041,"detailed_name":"int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*)(sqlite3_context *, int, sqlite3_value **) xFunc, void (*)(sqlite3_context *, int, sqlite3_value **) xStep, void (*)(sqlite3_context *) xFinal)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5518:16-5518:41|-1|1|1","param_spellings":["5519:12-5519:14","5520:15-5520:28","5521:7-5521:11","5522:7-5522:15","5523:9-5523:13","5524:10-5524:15","5525:10-5525:15","5526:10-5526:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":124,"usr":5293739196461611344,"detailed_name":"int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*)(sqlite3_context *, int, sqlite3_value **) xFunc, void (*)(sqlite3_context *, int, sqlite3_value **) xStep, void (*)(sqlite3_context *) xFinal, void (*)(void *) xDestroy)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5528:16-5528:42|-1|1|1","param_spellings":["5529:12-5529:14","5530:15-5530:28","5531:7-5531:11","5532:7-5532:15","5533:9-5533:13","5534:10-5534:15","5535:10-5535:15","5536:10-5536:16","5537:9-5537:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":125,"usr":13719348082659323197,"detailed_name":"int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*)(sqlite3_context *, int, sqlite3_value **) xStep, void (*)(sqlite3_context *) xFinal, void (*)(sqlite3_context *) xValue, void (*)(sqlite3_context *, int, sqlite3_value **) xInverse, void (*)(void *) xDestroy)","short_name_offset":4,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5539:16-5539:46|-1|1|1","param_spellings":["5540:12-5540:14","5541:15-5541:28","5542:7-5542:11","5543:7-5543:15","5544:9-5544:13","5545:10-5545:15","5546:10-5546:16","5547:10-5547:16","5548:10-5548:18","5549:9-5549:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":126,"usr":15976110101664117611,"detailed_name":"int sqlite3_aggregate_count(sqlite3_context *)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5682:34-5682:57|-1|1|1","param_spellings":["5682:74-5682:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":127,"usr":3165549896114088247,"detailed_name":"int sqlite3_expired(sqlite3_stmt *)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5683:34-5683:49|-1|1|1","param_spellings":["5683:63-5683:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":128,"usr":6863679286029426486,"detailed_name":"int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5684:34-5684:59|-1|1|1","param_spellings":["5684:73-5684:73","5684:88-5684:88"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":129,"usr":16211774147265953592,"detailed_name":"int sqlite3_global_recover()","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5685:34-5685:56|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":130,"usr":379709778669305745,"detailed_name":"void sqlite3_thread_cleanup()","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5686:35-5686:57|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":131,"usr":3515402940783880428,"detailed_name":"int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, sqlite3_int64)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5687:34-5687:54|-1|1|1","param_spellings":["5687:61-5687:61","5688:28-5688:28","5688:42-5688:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":132,"usr":8666789684798450451,"detailed_name":"const void *sqlite3_value_blob(sqlite3_value *)","short_name_offset":12,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Obtaining SQL Values\n METHOD: sqlite3_value\n\n <b>Summary:</b>\n <blockquote><table border=0 cellpadding=0 cellspacing=0>\n <tr><td><b>sqlite3_value_blob</b><td>&rarr;<td>BLOB value\n <tr><td><b>sqlite3_value_double</b><td>&rarr;<td>REAL value\n <tr><td><b>sqlite3_value_int</b><td>&rarr;<td>32-bit INTEGER value\n <tr><td><b>sqlite3_value_int64</b><td>&rarr;<td>64-bit INTEGER value\n <tr><td><b>sqlite3_value_pointer</b><td>&rarr;<td>Pointer value\n <tr><td><b>sqlite3_value_text</b><td>&rarr;<td>UTF-8 TEXT value\n <tr><td><b>sqlite3_value_text16</b><td>&rarr;<td>UTF-16 TEXT value in\n the native byteorder\n <tr><td><b>sqlite3_value_text16be</b><td>&rarr;<td>UTF-16be TEXT value\n <tr><td><b>sqlite3_value_text16le</b><td>&rarr;<td>UTF-16le TEXT value\n <tr><td>&nbsp;<td>&nbsp;<td>&nbsp;\n <tr><td><b>sqlite3_value_bytes</b><td>&rarr;<td>Size of a BLOB\n or a UTF-8 TEXT in bytes\n <tr><td><b>sqlite3_value_bytes16&nbsp;&nbsp;</b>\n <td>&rarr;&nbsp;&nbsp;<td>Size of UTF-16\n TEXT in bytes\n <tr><td><b>sqlite3_value_type</b><td>&rarr;<td>Default\n datatype of the value\n <tr><td><b>sqlite3_value_numeric_type&nbsp;&nbsp;</b>\n <td>&rarr;&nbsp;&nbsp;<td>Best numeric datatype of the value\n <tr><td><b>sqlite3_value_nochange&nbsp;&nbsp;</b>\n <td>&rarr;&nbsp;&nbsp;<td>True if the column is unchanged in an UPDATE\n against a virtual table.\n <tr><td><b>sqlite3_value_frombind&nbsp;&nbsp;</b>\n <td>&rarr;&nbsp;&nbsp;<td>True if value originated from a [bound parameter]\n </table></blockquote>\n\n <b>Details:</b>\n\n These routines extract type, size, and content information from\n [protected sqlite3_value] objects.  Protected sqlite3_value objects\n are used to pass parameter information into the functions that\n implement [application-defined SQL functions] and [virtual tables].\n\n These routines work only with [protected sqlite3_value] objects.\n Any attempt to use these routines on an [unprotected sqlite3_value]\n is not threadsafe.\n\n ^These routines work just like the corresponding [column access functions]\n except that these routines take a single [protected sqlite3_value] object\n pointer instead of a [sqlite3_stmt*] pointer and an integer column number.\n\n ^The sqlite3_value_text16() interface extracts a UTF-16 string\n in the native byte-order of the host machine.  ^The\n sqlite3_value_text16be() and sqlite3_value_text16le() interfaces\n extract UTF-16 strings as big-endian and little-endian respectively.\n\n ^If [sqlite3_value] object V was initialized\n using [sqlite3_bind_pointer(S,I,P,X,D)] or [sqlite3_result_pointer(C,P,X,D)]\n and if X and Y are strings that compare equal according to strcmp(X,Y),\n then sqlite3_value_pointer(V,Y) will return the pointer P.  ^Otherwise,\n sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer()\n routine is part of the [pointer passing interface] added for SQLite 3.20.0.\n\n ^(The sqlite3_value_type(V) interface returns the\n [SQLITE_INTEGER | datatype code] for the initial datatype of the\n [sqlite3_value] object V. The returned value is one of [SQLITE_INTEGER],\n [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].)^\n Other interfaces might change the datatype for an sqlite3_value object.\n For example, if the datatype is initially SQLITE_INTEGER and\n sqlite3_value_text(V) is called to extract a text value for that\n integer, then subsequent calls to sqlite3_value_type(V) might return\n SQLITE_TEXT.  Whether or not a persistent internal datatype conversion\n occurs is undefined and may change from one release of SQLite to the next.\n\n ^(The sqlite3_value_numeric_type() interface attempts to apply\n numeric affinity to the value.  This means that an attempt is\n made to convert the value to an integer or floating point.  If\n such a conversion is possible without loss of information (in other\n words, if the value is a string that looks like a number)\n then the conversion is performed.  Otherwise no conversion occurs.\n The [SQLITE_INTEGER | datatype] after conversion is returned.)^\n\n ^Within the [xUpdate] method of a [virtual table], the\n sqlite3_value_nochange(X) interface returns true if and only if\n the column corresponding to X is unchanged by the UPDATE operation\n that the xUpdate method call was invoked to implement and if\n and the prior [xColumn] method call that was invoked to extracted\n the value for that column returned without setting a result (probably\n because it queried [sqlite3_vtab_nochange()] and found that the column\n was unchanging).  ^Within an [xUpdate] method, any value for which\n sqlite3_value_nochange(X) is true will in all other respects appear\n to be a NULL value.  If sqlite3_value_nochange(X) is invoked anywhere other\n than within an [xUpdate] method call for an UPDATE statement, then\n the return value is arbitrary and meaningless.\n\n ^The sqlite3_value_frombind(X) interface returns non-zero if the\n value X originated from one of the [sqlite3_bind_int|sqlite3_bind()]\n interfaces.  ^If X comes from an SQL literal value, or a table column,\n or an expression, then sqlite3_value_frombind(X) returns zero.\n\n Please pay particular attention to the fact that the pointer returned\n from [sqlite3_value_blob()], [sqlite3_value_text()], or\n [sqlite3_value_text16()] can be invalidated by a subsequent call to\n [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],\n or [sqlite3_value_text16()].\n\n These routines must be called from the same thread as\n the SQL function that supplied the [sqlite3_value*] parameters.\n\n As long as the input parameter is correct, these routines can only\n fail if an out-of-memory error occurs during a format conversion.\n Only the following subset of interfaces are subject to out-of-memory\n errors:\n\n <ul>\n <li> sqlite3_value_blob()\n <li> sqlite3_value_text()\n <li> sqlite3_value_text16()\n <li> sqlite3_value_text16le()\n <li> sqlite3_value_text16be()\n <li> sqlite3_value_bytes()\n <li> sqlite3_value_bytes16()\n </ul>\n\n If an out-of-memory error occurs, then the return value from these\n routines is the same as if the column had contained an SQL NULL value.\n Valid SQL NULL returns can be distinguished from out-of-memory errors\n by invoking the [sqlite3_errcode()] immediately after the suspect\n return value is obtained and before any\n other SQLite interface is called on the same [database connection].","declarations":[{"spell":"5819:24-5819:42|-1|1|1","param_spellings":["5819:57-5819:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":133,"usr":4380552724094449973,"detailed_name":"double sqlite3_value_double(sqlite3_value *)","short_name_offset":7,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5820:19-5820:39|-1|1|1","param_spellings":["5820:54-5820:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":134,"usr":9484404177662850538,"detailed_name":"int sqlite3_value_int(sqlite3_value *)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5821:16-5821:33|-1|1|1","param_spellings":["5821:48-5821:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":135,"usr":605366764860719631,"detailed_name":"sqlite3_int64 sqlite3_value_int64(sqlite3_value *)","short_name_offset":14,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5822:26-5822:45|-1|1|1","param_spellings":["5822:60-5822:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":136,"usr":8117641441397408709,"detailed_name":"void *sqlite3_value_pointer(sqlite3_value *, const char *)","short_name_offset":6,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5823:18-5823:39|-1|1|1","param_spellings":["5823:54-5823:54","5823:67-5823:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":137,"usr":16868850515983440896,"detailed_name":"const unsigned char *sqlite3_value_text(sqlite3_value *)","short_name_offset":21,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5824:33-5824:51|-1|1|1","param_spellings":["5824:66-5824:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":138,"usr":12774495058717141757,"detailed_name":"const void *sqlite3_value_text16(sqlite3_value *)","short_name_offset":12,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5825:24-5825:44|-1|1|1","param_spellings":["5825:59-5825:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":139,"usr":13252975426980420552,"detailed_name":"const void *sqlite3_value_text16le(sqlite3_value *)","short_name_offset":12,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5826:24-5826:46|-1|1|1","param_spellings":["5826:61-5826:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":140,"usr":7947047173291863226,"detailed_name":"const void *sqlite3_value_text16be(sqlite3_value *)","short_name_offset":12,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5827:24-5827:46|-1|1|1","param_spellings":["5827:61-5827:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":141,"usr":15847627213189107675,"detailed_name":"int sqlite3_value_bytes(sqlite3_value *)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5828:16-5828:35|-1|1|1","param_spellings":["5828:50-5828:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":142,"usr":14125280663435330685,"detailed_name":"int sqlite3_value_bytes16(sqlite3_value *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5829:16-5829:37|-1|1|1","param_spellings":["5829:52-5829:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":143,"usr":1878657061010487570,"detailed_name":"int sqlite3_value_type(sqlite3_value *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5830:16-5830:34|-1|1|1","param_spellings":["5830:49-5830:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":144,"usr":14582191195493851507,"detailed_name":"int sqlite3_value_numeric_type(sqlite3_value *)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5831:16-5831:42|-1|1|1","param_spellings":["5831:57-5831:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":145,"usr":3532795516297091305,"detailed_name":"int sqlite3_value_nochange(sqlite3_value *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5832:16-5832:38|-1|1|1","param_spellings":["5832:53-5832:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":146,"usr":15203299571664675125,"detailed_name":"int sqlite3_value_frombind(sqlite3_value *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5833:16-5833:38|-1|1|1","param_spellings":["5833:53-5833:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":147,"usr":16172437949228784489,"detailed_name":"int sqlite3_value_encoding(sqlite3_value *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Report the internal text encoding state of an sqlite3_value object\n METHOD: sqlite3_value\n\n ^(The sqlite3_value_encoding(X) interface returns one of [SQLITE_UTF8],\n [SQLITE_UTF16BE], or [SQLITE_UTF16LE] according to the current text encoding\n of the value X, assuming that X has type TEXT.)^  If sqlite3_value_type(X)\n returns something other than SQLITE_TEXT, then the return value from\n sqlite3_value_encoding(X) is meaningless.  ^Calls to\n [sqlite3_value_text(X)], [sqlite3_value_text16(X)], [sqlite3_value_text16be(X)],\n [sqlite3_value_text16le(X)], [sqlite3_value_bytes(X)], or\n [sqlite3_value_bytes16(X)] might change the encoding of the value X and\n thus change the return from subsequent calls to sqlite3_value_encoding(X).\n\n This routine is intended for used by applications that test and validate\n the SQLite implementation.  This routine is inquiring about the opaque\n internal state of an [sqlite3_value] object.  Ordinary applications should\n not need to know what the internal state of an sqlite3_value object is and\n hence should not need to use this interface.","declarations":[{"spell":"5855:16-5855:38|-1|1|1","param_spellings":["5855:53-5855:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":148,"usr":1206161137820005004,"detailed_name":"unsigned int sqlite3_value_subtype(sqlite3_value *)","short_name_offset":13,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Finding The Subtype Of SQL Values\n METHOD: sqlite3_value\n\n The sqlite3_value_subtype(V) function returns the subtype for\n an [application-defined SQL function] argument V.  The subtype\n information can be used to pass a limited amount of context from\n one SQL function to another.  Use the [sqlite3_result_subtype()]\n routine to set the subtype for the return value of an SQL function.\n\n Every [application-defined SQL function] that invokes this interface\n should include the [SQLITE_SUBTYPE] property in the text\n encoding argument when the function is [sqlite3_create_function|registered].\n If the [SQLITE_SUBTYPE] property is omitted, then sqlite3_value_subtype()\n might return zero instead of the upstream subtype in some corner cases.","declarations":[{"spell":"5873:25-5873:46|-1|1|1","param_spellings":["5873:61-5873:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":149,"usr":5034785711529864110,"detailed_name":"sqlite3_value *sqlite3_value_dup(const sqlite3_value *)","short_name_offset":15,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Copy And Free SQL Values\n METHOD: sqlite3_value\n\n ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value]\n object D and returns a pointer to that copy.  ^The [sqlite3_value] returned\n is a [protected sqlite3_value] object even if the input is not.\n ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a\n memory allocation fails. ^If V is a [pointer value], then the result\n of sqlite3_value_dup(V) is a NULL value.\n\n ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object\n previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer\n then sqlite3_value_free(V) is a harmless no-op.","declarations":[{"spell":"5890:27-5890:44|-1|1|1","param_spellings":["5890:65-5890:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":150,"usr":18069610977889777000,"detailed_name":"void sqlite3_value_free(sqlite3_value *)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"5891:17-5891:35|-1|1|1","param_spellings":["5891:50-5891:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":151,"usr":7081595532417820573,"detailed_name":"void *sqlite3_aggregate_context(sqlite3_context *, int nBytes)","short_name_offset":6,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Obtain Aggregate Function Context\n METHOD: sqlite3_context\n\n Implementations of aggregate SQL functions use this\n routine to allocate memory for storing their state.\n\n ^The first time the sqlite3_aggregate_context(C,N) routine is called\n for a particular aggregate function, SQLite allocates\n N bytes of memory, zeroes out that memory, and returns a pointer\n to the new memory. ^On second and subsequent calls to\n sqlite3_aggregate_context() for the same aggregate function instance,\n the same buffer is returned.  Sqlite3_aggregate_context() is normally\n called once for each invocation of the xStep callback and then one\n last time when the xFinal callback is invoked.  ^(When no rows match\n an aggregate query, the xStep() callback of the aggregate function\n implementation is never called and xFinal() is called exactly once.\n In those cases, sqlite3_aggregate_context() might be called for the\n first time from within xFinal().)^\n\n ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer\n when first called if N is less than or equal to zero or if a memory\n allocation error occurs.\n\n ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is\n determined by the N parameter on first successful call.  Changing the\n value of N in any subsequent call to sqlite3_aggregate_context() within\n the same aggregate function instance will not resize the memory\n allocation.)^  Within the xFinal callback, it is customary to set\n N=0 in calls to sqlite3_aggregate_context(C,N) so that no\n pointless memory allocations occur.\n\n ^SQLite automatically frees the memory allocated by\n sqlite3_aggregate_context() when the aggregate query concludes.\n\n The first parameter must be a copy of the\n [sqlite3_context | SQL function context] that is the first parameter\n to the xStep or xFinal callback routine that implements the aggregate\n function.\n\n This routine must be called from the same thread in which\n the aggregate SQL function is running.","declarations":[{"spell":"5936:18-5936:43|-1|1|1","param_spellings":["5936:60-5936:60","5936:66-5936:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":152,"usr":6461241500573982930,"detailed_name":"void *sqlite3_user_data(sqlite3_context *)","short_name_offset":6,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: User Data For Functions\n METHOD: sqlite3_context\n\n ^The sqlite3_user_data() interface returns a copy of\n the pointer that was the pUserData parameter (the 5th parameter)\n of the [sqlite3_create_function()]\n and [sqlite3_create_function16()] routines that originally\n registered the application defined function.\n\n This routine must be called from the same thread in which\n the application-defined function is running.","declarations":[{"spell":"5951:18-5951:35|-1|1|1","param_spellings":["5951:52-5951:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":153,"usr":3706439552600313263,"detailed_name":"sqlite3 *sqlite3_context_db_handle(sqlite3_context *)","short_name_offset":9,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Database Connection For Functions\n METHOD: sqlite3_context\n\n ^The sqlite3_context_db_handle() interface returns a copy of\n the pointer to the [database connection] (the 1st parameter)\n of the [sqlite3_create_function()]\n and [sqlite3_create_function16()] routines that originally\n registered the application defined function.","declarations":[{"spell":"5963:21-5963:46|-1|1|1","param_spellings":["5963:63-5963:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":154,"usr":3442755378735305643,"detailed_name":"void *sqlite3_get_auxdata(sqlite3_context *, int N)","short_name_offset":6,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Function Auxiliary Data\n METHOD: sqlite3_context\n\n These functions may be used by (non-aggregate) SQL functions to\n associate auxiliary data with argument values. If the same argument\n value is passed to multiple invocations of the same SQL function during\n query execution, under some circumstances the associated auxiliary data\n might be preserved.  An example of where this might be useful is in a\n regular-expression matching function. The compiled version of the regular\n expression can be stored as auxiliary data associated with the pattern string.\n Then as long as the pattern string remains the same,\n the compiled regular expression can be reused on multiple\n invocations of the same function.\n\n ^The sqlite3_get_auxdata(C,N) interface returns a pointer to the auxiliary data\n associated by the sqlite3_set_auxdata(C,N,P,X) function with the Nth argument\n value to the application-defined function.  ^N is zero for the left-most\n function argument.  ^If there is no auxiliary data\n associated with the function argument, the sqlite3_get_auxdata(C,N) interface\n returns a NULL pointer.\n\n ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as auxiliary data for the\n N-th argument of the application-defined function.  ^Subsequent\n calls to sqlite3_get_auxdata(C,N) return P from the most recent\n sqlite3_set_auxdata(C,N,P,X) call if the auxiliary data is still valid or\n NULL if the auxiliary data has been discarded.\n ^After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL,\n SQLite will invoke the destructor function X with parameter P exactly\n once, when the auxiliary data is discarded.\n SQLite is free to discard the auxiliary data at any time, including: <ul>\n <li> ^(when the corresponding function parameter changes)^, or\n <li> ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the\n      SQL statement)^, or\n <li> ^(when sqlite3_set_auxdata() is invoked again on the same\n       parameter)^, or\n <li> ^(during the original sqlite3_set_auxdata() call when a memory\n      allocation error occurs.)^\n <li> ^(during the original sqlite3_set_auxdata() call if the function\n      is evaluated during query planning instead of during query execution,\n      as sometimes happens with [SQLITE_ENABLE_STAT4].)^ </ul>\n\n Note the last two bullets in particular.  The destructor X in\n sqlite3_set_auxdata(C,N,P,X) might be called immediately, before the\n sqlite3_set_auxdata() interface even returns.  Hence sqlite3_set_auxdata()\n should be called near the end of the function implementation and the\n function implementation should not make any use of P after\n sqlite3_set_auxdata() has been called.  Furthermore, a call to\n sqlite3_get_auxdata() that occurs immediately after a corresponding call\n to sqlite3_set_auxdata() might still return NULL if an out-of-memory\n condition occurred during the sqlite3_set_auxdata() call or if the\n function is being evaluated during query planning rather than during\n query execution.\n\n ^(In practice, auxiliary data is preserved between function calls for\n function parameters that are compile-time constants, including literal\n values and [parameters] and expressions composed from the same.)^\n\n The value of the N parameter to these interfaces should be non-negative.\n Future enhancements may make use of negative N values to define new\n kinds of function caching behavior.\n\n These routines must be called from the same thread in which\n the SQL function is running.\n\n See also: [sqlite3_get_clientdata()] and [sqlite3_set_clientdata()].","declarations":[{"spell":"6032:18-6032:37|-1|1|1","param_spellings":["6032:54-6032:54","6032:60-6032:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":155,"usr":5272469117604435909,"detailed_name":"void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6033:17-6033:36|-1|1|1","param_spellings":["6033:53-6033:53","6033:59-6033:60","6033:67-6033:67","6033:76-6033:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":156,"usr":3197040789924360468,"detailed_name":"void *sqlite3_get_clientdata(sqlite3 *, const char *)","short_name_offset":6,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Database Connection Client Data\n METHOD: sqlite3\n\n These functions are used to associate one or more named pointers\n with a [database connection].\n A call to sqlite3_set_clientdata(D,N,P,X) causes the pointer P\n to be attached to [database connection] D using name N.  Subsequent\n calls to sqlite3_get_clientdata(D,N) will return a copy of pointer P\n or a NULL pointer if there were no prior calls to\n sqlite3_set_clientdata() with the same values of D and N.\n Names are compared using strcmp() and are thus case sensitive.\n\n If P and X are both non-NULL, then the destructor X is invoked with\n argument P on the first of the following occurrences:\n <ul>\n <li> An out-of-memory error occurs during the call to\n      sqlite3_set_clientdata() which attempts to register pointer P.\n <li> A subsequent call to sqlite3_set_clientdata(D,N,P,X) is made\n      with the same D and N parameters.\n <li> The database connection closes.  SQLite does not make any guarantees\n      about the order in which destructors are called, only that all\n      destructors will be called exactly once at some point during the\n      database connection closing process.\n </ul>\n\n SQLite does not do anything with client data other than invoke\n destructors on the client data at the appropriate time.  The intended\n use for client data is to provide a mechanism for wrapper libraries\n to store additional information about an SQLite database connection.\n\n There is no limit (other than available memory) on the number of different\n client data pointers (with different names) that can be attached to a\n single database connection.  However, the implementation is optimized\n for the case of having only one or two different client data names.\n Applications and wrapper libraries are discouraged from using more than\n one client data name each.\n\n There is no way to enumerate the client data pointers\n associated with a database connection.  The N parameter can be thought\n of as a secret key such that only code that knows the secret key is able\n to access the associated data.\n\n Security Warning:  These interfaces should not be exposed in scripting\n languages or in other circumstances where it might be possible for an\n an attacker to invoke them.  Any agent that can invoke these interfaces\n can probably also take control of the process.\n\n Database connection client data is only available for SQLite\n version 3.44.0 ([dateof:3.44.0]) and later.\n\n See also: [sqlite3_set_auxdata()] and [sqlite3_get_auxdata()].","declarations":[{"spell":"6088:18-6088:40|-1|1|1","param_spellings":["6088:49-6088:49","6088:61-6088:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":157,"usr":5215656772665878864,"detailed_name":"int sqlite3_set_clientdata(sqlite3 *, const char *, void *, void (*)(void *))","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6089:16-6089:38|-1|1|1","param_spellings":["6089:47-6089:47","6089:60-6089:60","6089:67-6089:67","6089:75-6089:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":158,"usr":11031091476935716150,"detailed_name":"void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void *))","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Setting The Result Of An SQL Function\n METHOD: sqlite3_context\n\n These routines are used by the xFunc or xFinal callbacks that\n implement SQL functions and aggregates.  See\n [sqlite3_create_function()] and [sqlite3_create_function16()]\n for additional information.\n\n These functions work very much like the [parameter binding] family of\n functions used to bind values to host parameters in prepared statements.\n Refer to the [SQL parameter] documentation for additional information.\n\n ^The sqlite3_result_blob() interface sets the result from\n an application-defined function to be the BLOB whose content is pointed\n to by the second parameter and which is N bytes long where N is the\n third parameter.\n\n ^The sqlite3_result_zeroblob(C,N) and sqlite3_result_zeroblob64(C,N)\n interfaces set the result of the application-defined function to be\n a BLOB containing all zero bytes and N bytes in size.\n\n ^The sqlite3_result_double() interface sets the result from\n an application-defined function to be a floating point value specified\n by its 2nd argument.\n\n ^The sqlite3_result_error() and sqlite3_result_error16() functions\n cause the implemented SQL function to throw an exception.\n ^SQLite uses the string pointed to by the\n 2nd parameter of sqlite3_result_error() or sqlite3_result_error16()\n as the text of an error message.  ^SQLite interprets the error\n message string from sqlite3_result_error() as UTF-8. ^SQLite\n interprets the string from sqlite3_result_error16() as UTF-16 using\n the same [byte-order determination rules] as [sqlite3_bind_text16()].\n ^If the third parameter to sqlite3_result_error()\n or sqlite3_result_error16() is negative then SQLite takes as the error\n message all text up through the first zero character.\n ^If the third parameter to sqlite3_result_error() or\n sqlite3_result_error16() is non-negative then SQLite takes that many\n bytes (not characters) from the 2nd parameter as the error message.\n ^The sqlite3_result_error() and sqlite3_result_error16()\n routines make a private copy of the error message text before\n they return.  Hence, the calling function can deallocate or\n modify the text after they return without harm.\n ^The sqlite3_result_error_code() function changes the error code\n returned by SQLite as a result of an error in a function.  ^By default,\n the error code is SQLITE_ERROR.  ^A subsequent call to sqlite3_result_error()\n or sqlite3_result_error16() resets the error code to SQLITE_ERROR.\n\n ^The sqlite3_result_error_toobig() interface causes SQLite to throw an\n error indicating that a string or BLOB is too long to represent.\n\n ^The sqlite3_result_error_nomem() interface causes SQLite to throw an\n error indicating that a memory allocation failed.\n\n ^The sqlite3_result_int() interface sets the return value\n of the application-defined function to be the 32-bit signed integer\n value given in the 2nd argument.\n ^The sqlite3_result_int64() interface sets the return value\n of the application-defined function to be the 64-bit signed integer\n value given in the 2nd argument.\n\n ^The sqlite3_result_null() interface sets the return value\n of the application-defined function to be NULL.\n\n ^The sqlite3_result_text(), sqlite3_result_text16(),\n sqlite3_result_text16le(), and sqlite3_result_text16be() interfaces\n set the return value of the application-defined function to be\n a text string which is represented as UTF-8, UTF-16 native byte order,\n UTF-16 little endian, or UTF-16 big endian, respectively.\n ^The sqlite3_result_text64() interface sets the return value of an\n application-defined function to be a text string in an encoding\n specified by the fifth (and last) parameter, which must be one\n of [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE].\n ^SQLite takes the text result from the application from\n the 2nd parameter of the sqlite3_result_text* interfaces.\n ^If the 3rd parameter to any of the sqlite3_result_text* interfaces\n other than sqlite3_result_text64() is negative, then SQLite computes\n the string length itself by searching the 2nd parameter for the first\n zero character.\n ^If the 3rd parameter to the sqlite3_result_text* interfaces\n is non-negative, then as many bytes (not characters) of the text\n pointed to by the 2nd parameter are taken as the application-defined\n function result.  If the 3rd parameter is non-negative, then it\n must be the byte offset into the string where the NUL terminator would\n appear if the string where NUL terminated.  If any NUL characters occur\n in the string at a byte offset that is less than the value of the 3rd\n parameter, then the resulting string will contain embedded NULs and the\n result of expressions operating on strings with embedded NULs is undefined.\n ^If the 4th parameter to the sqlite3_result_text* interfaces\n or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that\n function as the destructor on the text or BLOB result when it has\n finished using that result.\n ^If the 4th parameter to the sqlite3_result_text* interfaces or to\n sqlite3_result_blob is the special constant SQLITE_STATIC, then SQLite\n assumes that the text or BLOB result is in constant space and does not\n copy the content of the parameter nor call a destructor on the content\n when it has finished using that result.\n ^If the 4th parameter to the sqlite3_result_text* interfaces\n or sqlite3_result_blob is the special constant SQLITE_TRANSIENT\n then SQLite makes a copy of the result into space obtained\n from [sqlite3_malloc()] before it returns.\n\n ^For the sqlite3_result_text16(), sqlite3_result_text16le(), and\n sqlite3_result_text16be() routines, and for sqlite3_result_text64()\n when the encoding is not UTF8, if the input UTF16 begins with a\n byte-order mark (BOM, U+FEFF) then the BOM is removed from the\n string and the rest of the string is interpreted according to the\n byte-order specified by the BOM.  ^The byte-order specified by\n the BOM at the beginning of the text overrides the byte-order\n specified by the interface procedure.  ^So, for example, if\n sqlite3_result_text16le() is invoked with text that begins\n with bytes 0xfe, 0xff (a big-endian byte-order mark) then the\n first two bytes of input are skipped and the remaining input\n is interpreted as UTF16BE text.\n\n ^For UTF16 input text to the sqlite3_result_text16(),\n sqlite3_result_text16be(), sqlite3_result_text16le(), and\n sqlite3_result_text64() routines, if the text contains invalid\n UTF16 characters, the invalid characters might be converted\n into the unicode replacement character, U+FFFD.\n\n ^The sqlite3_result_value() interface sets the result of\n the application-defined function to be a copy of the\n [unprotected sqlite3_value] object specified by the 2nd parameter.  ^The\n sqlite3_result_value() interface makes a copy of the [sqlite3_value]\n so that the [sqlite3_value] specified in the parameter may change or\n be deallocated after sqlite3_result_value() returns without harm.\n ^A [protected sqlite3_value] object may always be used where an\n [unprotected sqlite3_value] object is required, so either\n kind of [sqlite3_value] object can be used with this interface.\n\n ^The sqlite3_result_pointer(C,P,T,D) interface sets the result to an\n SQL NULL value, just like [sqlite3_result_null(C)], except that it\n also associates the host-language pointer P or type T with that\n NULL value such that the pointer can be retrieved within an\n [application-defined SQL function] using [sqlite3_value_pointer()].\n ^If the D parameter is not NULL, then it is a pointer to a destructor\n for the P parameter.  ^SQLite invokes D with P as its only argument\n when SQLite is finished with P.  The T parameter should be a static\n string and preferably a string literal. The sqlite3_result_pointer()\n routine is part of the [pointer passing interface] added for SQLite 3.20.0.\n\n If these routines are called from within the different thread\n than the one containing the application-defined function that received\n the [sqlite3_context] pointer, the results are undefined.","declarations":[{"spell":"6256:17-6256:36|-1|1|1","param_spellings":["6256:53-6256:53","6256:66-6256:66","6256:71-6256:71","6256:79-6256:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":159,"usr":18162281062364655217,"detailed_name":"void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, void (*)(void *))","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6257:17-6257:38|-1|1|1","param_spellings":["6257:55-6257:55","6257:67-6257:67","6258:42-6258:42","6258:49-6258:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":160,"usr":16193432630351513708,"detailed_name":"void sqlite3_result_double(sqlite3_context *, double)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6259:17-6259:38|-1|1|1","param_spellings":["6259:55-6259:55","6259:63-6259:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":161,"usr":16816744243506758347,"detailed_name":"void sqlite3_result_error(sqlite3_context *, const char *, int)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6260:17-6260:37|-1|1|1","param_spellings":["6260:54-6260:54","6260:67-6260:67","6260:72-6260:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":162,"usr":709421331690307957,"detailed_name":"void sqlite3_result_error16(sqlite3_context *, const void *, int)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6261:17-6261:39|-1|1|1","param_spellings":["6261:56-6261:56","6261:69-6261:69","6261:74-6261:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":163,"usr":18386612683141133055,"detailed_name":"void sqlite3_result_error_toobig(sqlite3_context *)","short_name_offset":5,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6262:17-6262:44|-1|1|1","param_spellings":["6262:61-6262:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":164,"usr":15663219841339494174,"detailed_name":"void sqlite3_result_error_nomem(sqlite3_context *)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6263:17-6263:43|-1|1|1","param_spellings":["6263:60-6263:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":165,"usr":13114487805312210201,"detailed_name":"void sqlite3_result_error_code(sqlite3_context *, int)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6264:17-6264:42|-1|1|1","param_spellings":["6264:59-6264:59","6264:64-6264:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":166,"usr":17107113501526311528,"detailed_name":"void sqlite3_result_int(sqlite3_context *, int)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6265:17-6265:35|-1|1|1","param_spellings":["6265:52-6265:52","6265:57-6265:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":167,"usr":12768340146843477174,"detailed_name":"void sqlite3_result_int64(sqlite3_context *, sqlite3_int64)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6266:17-6266:37|-1|1|1","param_spellings":["6266:54-6266:54","6266:69-6266:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":168,"usr":2300019259566058476,"detailed_name":"void sqlite3_result_null(sqlite3_context *)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6267:17-6267:36|-1|1|1","param_spellings":["6267:53-6267:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":169,"usr":10131789567619981925,"detailed_name":"void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void *))","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6268:17-6268:36|-1|1|1","param_spellings":["6268:53-6268:53","6268:66-6268:66","6268:71-6268:71","6268:79-6268:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":170,"usr":14017805342312990550,"detailed_name":"void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6269:17-6269:38|-1|1|1","param_spellings":["6269:55-6269:55","6269:68-6269:68","6269:83-6269:83","6270:34-6270:34","6270:58-6270:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":171,"usr":7517973976716093239,"detailed_name":"void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(void *))","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6271:17-6271:38|-1|1|1","param_spellings":["6271:55-6271:55","6271:68-6271:68","6271:73-6271:73","6271:81-6271:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":172,"usr":18057264159112207948,"detailed_name":"void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(void *))","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6272:17-6272:40|-1|1|1","param_spellings":["6272:57-6272:57","6272:70-6272:70","6272:75-6272:75","6272:82-6272:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":173,"usr":4984966496641907206,"detailed_name":"void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(void *))","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6273:17-6273:40|-1|1|1","param_spellings":["6273:57-6273:57","6273:70-6273:70","6273:75-6273:75","6273:82-6273:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":174,"usr":11429063998276854646,"detailed_name":"void sqlite3_result_value(sqlite3_context *, sqlite3_value *)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6274:17-6274:37|-1|1|1","param_spellings":["6274:54-6274:54","6274:70-6274:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":175,"usr":15223687692763943316,"detailed_name":"void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*)(void *))","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6275:17-6275:39|-1|1|1","param_spellings":["6275:56-6275:56","6275:63-6275:63","6275:75-6275:75","6275:82-6275:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":176,"usr":18365396668810794798,"detailed_name":"void sqlite3_result_zeroblob(sqlite3_context *, int n)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6276:17-6276:40|-1|1|1","param_spellings":["6276:57-6276:57","6276:63-6276:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":177,"usr":3357379363126321781,"detailed_name":"int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6277:16-6277:41|-1|1|1","param_spellings":["6277:58-6277:58","6277:75-6277:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":178,"usr":1484022413566876702,"detailed_name":"void sqlite3_result_subtype(sqlite3_context *, unsigned int)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Setting The Subtype Of An SQL Function\n METHOD: sqlite3_context\n\n The sqlite3_result_subtype(C,T) function causes the subtype of\n the result from the [application-defined SQL function] with\n [sqlite3_context] C to be the value T.  Only the lower 8 bits\n of the subtype T are preserved in current versions of SQLite;\n higher order bits are discarded.\n The number of subtype bytes preserved by SQLite might increase\n in future releases of SQLite.\n\n Every [application-defined SQL function] that invokes this interface\n should include the [SQLITE_RESULT_SUBTYPE] property in its\n text encoding argument when the SQL function is\n [sqlite3_create_function|registered].  If the [SQLITE_RESULT_SUBTYPE]\n property is omitted from the function that invokes sqlite3_result_subtype(),\n then in some cases the sqlite3_result_subtype() might fail to set\n the result subtype.\n\n If SQLite is compiled with -DSQLITE_STRICT_SUBTYPE=1, then any\n SQL function that invokes the sqlite3_result_subtype() interface\n and that does not have the SQLITE_RESULT_SUBTYPE property will raise\n an error.  Future versions of SQLite might enable -DSQLITE_STRICT_SUBTYPE=1\n by default.","declarations":[{"spell":"6306:17-6306:39|-1|1|1","param_spellings":["6306:56-6306:56","6306:69-6306:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":179,"usr":7155783847990907496,"detailed_name":"int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*)(void *, int, const void *, int, const void *) xCompare)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Define New Collating Sequences\n METHOD: sqlite3\n\n ^These functions add, remove, or modify a [collation] associated\n with the [database connection] specified as the first argument.\n\n ^The name of the collation is a UTF-8 string\n for sqlite3_create_collation() and sqlite3_create_collation_v2()\n and a UTF-16 string in native byte order for sqlite3_create_collation16().\n ^Collation names that compare equal according to [sqlite3_strnicmp()] are\n considered to be the same name.\n\n ^(The third argument (eTextRep) must be one of the constants:\n <ul>\n <li> [SQLITE_UTF8],\n <li> [SQLITE_UTF16LE],\n <li> [SQLITE_UTF16BE],\n <li> [SQLITE_UTF16], or\n <li> [SQLITE_UTF16_ALIGNED].\n </ul>)^\n ^The eTextRep argument determines the encoding of strings passed\n to the collating function callback, xCompare.\n ^The [SQLITE_UTF16] and [SQLITE_UTF16_ALIGNED] values for eTextRep\n force strings to be UTF16 with native byte order.\n ^The [SQLITE_UTF16_ALIGNED] value for eTextRep forces strings to begin\n on an even byte address.\n\n ^The fourth argument, pArg, is an application data pointer that is passed\n through as the first argument to the collating function callback.\n\n ^The fifth argument, xCompare, is a pointer to the collating function.\n ^Multiple collating functions can be registered using the same name but\n with different eTextRep parameters and SQLite will use whichever\n function requires the least amount of data transformation.\n ^If the xCompare argument is NULL then the collating function is\n deleted.  ^When all collating functions having the same name are deleted,\n that collation is no longer usable.\n\n ^The collating function callback is invoked with a copy of the pArg\n application data pointer and with two strings in the encoding specified\n by the eTextRep argument.  The two integer parameters to the collating\n function callback are the length of the two strings, in bytes. The collating\n function must return an integer that is negative, zero, or positive\n if the first string is less than, equal to, or greater than the second,\n respectively.  A collating function must always return the same answer\n given the same inputs.  If two or more collating functions are registered\n to the same collation name (using different eTextRep values) then all\n must give an equivalent answer when invoked with equivalent strings.\n The collating function must obey the following properties for all\n strings A, B, and C:\n\n <ol>\n <li> If A==B then B==A.\n <li> If A==B and B==C then A==C.\n <li> If A&lt;B THEN B&gt;A.\n <li> If A&lt;B and B&lt;C then A&lt;C.\n </ol>\n\n If a collating function fails any of the above constraints and that\n collating function is registered and used, then the behavior of SQLite\n is undefined.\n\n ^The sqlite3_create_collation_v2() works like sqlite3_create_collation()\n with the addition that the xDestroy callback is invoked on pArg when\n the collating function is deleted.\n ^Collating functions are deleted when they are overridden by later\n calls to the collation creation functions or when the\n [database connection] is closed using [sqlite3_close()].\n\n ^The xDestroy callback is <u>not</u> called if the\n sqlite3_create_collation_v2() function fails.  Applications that invoke\n sqlite3_create_collation_v2() with a non-NULL xDestroy argument should\n check the return code and dispose of the application data pointer\n themselves rather than expecting SQLite to deal with it for them.\n This is different from every other SQLite interface.  The inconsistency\n is unfortunate but cannot be changed without breaking backwards\n compatibility.\n\n See also:  [sqlite3_collation_needed()] and [sqlite3_collation_needed16()].","declarations":[{"spell":"6389:16-6389:40|-1|1|1","param_spellings":["6390:11-6390:11","6391:15-6391:20","6392:7-6392:15","6393:9-6393:13","6394:8-6394:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":180,"usr":13893644709253840546,"detailed_name":"int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*)(void *, int, const void *, int, const void *) xCompare, void (*)(void *) xDestroy)","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6396:16-6396:43|-1|1|1","param_spellings":["6397:11-6397:11","6398:15-6398:20","6399:7-6399:15","6400:9-6400:13","6401:8-6401:16","6402:9-6402:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":181,"usr":8771637956511376722,"detailed_name":"int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (*)(void *, int, const void *, int, const void *) xCompare)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6404:16-6404:42|-1|1|1","param_spellings":["6405:11-6405:11","6406:15-6406:20","6407:7-6407:15","6408:9-6408:13","6409:8-6409:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":182,"usr":6018971498357708955,"detailed_name":"int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const char *))","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Collation Needed Callbacks\n METHOD: sqlite3\n\n ^To avoid having to register all collation sequences before a database\n can be used, a single callback function may be registered with the\n [database connection] to be invoked whenever an undefined collation\n sequence is required.\n\n ^If the function is registered using the sqlite3_collation_needed() API,\n then it is passed the names of undefined collation sequences as strings\n encoded in UTF-8. ^If sqlite3_collation_needed16() is used,\n the names are passed as UTF-16 in machine native byte order.\n ^A call to either function replaces the existing collation-needed callback.\n\n ^(When the callback is invoked, the first argument passed is a copy\n of the second argument to sqlite3_collation_needed() or\n sqlite3_collation_needed16().  The second argument is the database\n connection.  The third argument is one of [SQLITE_UTF8], [SQLITE_UTF16BE],\n or [SQLITE_UTF16LE], indicating the most desirable form of the collation\n sequence function required.  The fourth parameter is the name of the\n required collation sequence.)^\n\n The callback function should register the desired collation using\n [sqlite3_create_collation()], [sqlite3_create_collation16()], or\n [sqlite3_create_collation_v2()].","declarations":[{"spell":"6439:16-6439:40|-1|1|1","param_spellings":["6440:11-6440:11","6441:8-6441:8","6442:9-6442:9"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":183,"usr":2932229415532368372,"detailed_name":"int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const void *))","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6444:16-6444:42|-1|1|1","param_spellings":["6445:11-6445:11","6446:8-6446:8","6447:9-6447:9"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":184,"usr":15017627382821739632,"detailed_name":"int sqlite3_sleep(int)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Suspend Execution For A Short Time\n\n The sqlite3_sleep() function causes the current thread to suspend execution\n for at least a number of milliseconds specified in its parameter.\n\n If the operating system does not support sleep requests with\n millisecond time resolution, then the time will be rounded up to\n the nearest second. The number of milliseconds of sleep actually\n requested from the operating system is returned.\n\n ^SQLite implements this interface by calling the xSleep()\n method of the default [sqlite3_vfs] object.  If the xSleep() method\n of the default VFS is not implemented correctly, or not implemented at\n all, then the behavior of sqlite3_sleep() may deviate from the description\n in the previous paragraphs.\n\n If a negative argument is passed to sqlite3_sleep() the results vary by\n VFS and operating system.  Some system treat a negative argument as an\n instruction to sleep forever.  Others understand it to mean do not sleep\n at all. ^In SQLite version 3.42.0 and later, a negative\n argument passed into sqlite3_sleep() is changed to zero before it is relayed\n down into the xSleep method of the VFS.","declarations":[{"spell":"6484:16-6484:29|-1|1|1","param_spellings":["6484:33-6484:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":185,"usr":11998261086005385216,"detailed_name":"int sqlite3_win32_set_directory(unsigned long type, void *zValue)","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Win32 Specific Interface\n\n These interfaces are available only on Windows.  The\n [sqlite3_win32_set_directory] interface is used to set the value associated\n with the [sqlite3_temp_directory] or [sqlite3_data_directory] variable, to\n zValue, depending on the value of the type parameter.  The zValue parameter\n should be NULL to cause the previous value to be freed via [sqlite3_free];\n a non-NULL value will be copied into memory obtained from [sqlite3_malloc]\n prior to being used.  The [sqlite3_win32_set_directory] interface returns\n [SQLITE_OK] to indicate success, [SQLITE_ERROR] if the type is unsupported,\n or [SQLITE_NOMEM] if memory could not be allocated.  The value of the\n [sqlite3_data_directory] variable is intended to act as a replacement for\n the current directory on the sub-platforms of Win32 where that concept is\n not present, e.g. WinRT and UWP.  The [sqlite3_win32_set_directory8] and\n [sqlite3_win32_set_directory16] interfaces behave exactly the same as the\n sqlite3_win32_set_directory interface except the string parameter must be\n UTF-8 or UTF-16, respectively.","declarations":[{"spell":"6600:16-6600:43|-1|1|1","param_spellings":["6601:17-6601:21","6602:9-6602:15"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":186,"usr":15725796177308312978,"detailed_name":"int sqlite3_win32_set_directory8(unsigned long type, const char *zValue)","short_name_offset":4,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6604:16-6604:44|-1|1|1","param_spellings":["6604:59-6604:63","6604:77-6604:83"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":187,"usr":78382113084585177,"detailed_name":"int sqlite3_win32_set_directory16(unsigned long type, const void *zValue)","short_name_offset":4,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6605:16-6605:45|-1|1|1","param_spellings":["6605:60-6605:64","6605:78-6605:84"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":188,"usr":10291300603417631328,"detailed_name":"int sqlite3_get_autocommit(sqlite3 *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Test For Auto-Commit Mode\n KEYWORDS: {autocommit mode}\n METHOD: sqlite3\n\n ^The sqlite3_get_autocommit() interface returns non-zero or\n zero if the given database connection is or is not in autocommit mode,\n respectively.  ^Autocommit mode is on by default.\n ^Autocommit mode is disabled by a [BEGIN] statement.\n ^Autocommit mode is re-enabled by a [COMMIT] or [ROLLBACK].\n\n If certain kinds of errors occur on a statement within a multi-statement\n transaction (errors including [SQLITE_FULL], [SQLITE_IOERR],\n [SQLITE_NOMEM], [SQLITE_BUSY], and [SQLITE_INTERRUPT]) then the\n transaction might be rolled back automatically.  The only way to\n find out whether SQLite automatically rolled back the transaction after\n an error is to use this function.\n\n If another thread changes the autocommit status of the database\n connection while this routine is running, then the return value\n is undefined.","declarations":[{"spell":"6638:16-6638:38|-1|1|1","param_spellings":["6638:47-6638:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":189,"usr":14950591885076099802,"detailed_name":"sqlite3 *sqlite3_db_handle(sqlite3_stmt *)","short_name_offset":9,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Find The Database Handle Of A Prepared Statement\n METHOD: sqlite3_stmt\n\n ^The sqlite3_db_handle interface returns the [database connection] handle\n to which a [prepared statement] belongs.  ^The [database connection]\n returned by sqlite3_db_handle is the same [database connection]\n that was the first argument\n to the [sqlite3_prepare_v2()] call (or its variants) that was used to\n create the statement in the first place.","declarations":[{"spell":"6651:21-6651:38|-1|1|1","param_spellings":["6651:52-6651:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":190,"usr":16841027170821961216,"detailed_name":"const char *sqlite3_db_name(sqlite3 *db, int N)","short_name_offset":12,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Return The Schema Name For A Database Connection\n METHOD: sqlite3\n\n ^The sqlite3_db_name(D,N) interface returns a pointer to the schema name\n for the N-th database on database connection D, or a NULL pointer of N is\n out of range.  An N value of 0 means the main database file.  An N of 1 is\n the \"temp\" schema.  Larger values of N correspond to various ATTACH-ed\n databases.\n\n Space to hold the string that is returned by sqlite3_db_name() is managed\n by SQLite itself.  The string might be deallocated by any operation that\n changes the schema, including [ATTACH] or [DETACH] or calls to\n [sqlite3_serialize()] or [sqlite3_deserialize()], even operations that\n occur on a different thread.  Applications that need to\n remember the string long-term should make their own copy.  Applications that\n are accessing the same database connection simultaneously on multiple\n threads should mutex-protect calls to this API and should make their own\n private copy of the result prior to releasing the mutex.","declarations":[{"spell":"6673:24-6673:39|-1|1|1","param_spellings":["6673:49-6673:51","6673:57-6673:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":191,"usr":10372260868394693140,"detailed_name":"sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName)","short_name_offset":17,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Return The Filename For A Database Connection\n METHOD: sqlite3\n\n ^The sqlite3_db_filename(D,N) interface returns a pointer to the filename\n associated with database N of connection D.\n ^If there is no attached database N on the database\n connection D, or if database N is a temporary or in-memory database, then\n this function will return either a NULL pointer or an empty string.\n\n ^The string value returned by this routine is owned and managed by\n the database connection.  ^The value will be valid until the database N\n is [DETACH]-ed or until the database connection closes.\n\n ^The filename returned by this function is the output of the\n xFullPathname method of the [VFS].  ^In other words, the filename\n will be an absolute pathname, even if the filename used\n to open the database originally was a URI or relative pathname.\n\n If the filename pointer returned by this routine is not NULL, then it\n can be used as the filename input parameter to these routines:\n <ul>\n <li> [sqlite3_uri_parameter()]\n <li> [sqlite3_uri_boolean()]\n <li> [sqlite3_uri_int64()]\n <li> [sqlite3_filename_database()]\n <li> [sqlite3_filename_journal()]\n <li> [sqlite3_filename_wal()]\n </ul>","declarations":[{"spell":"6705:29-6705:48|-1|1|1","param_spellings":["6705:58-6705:60","6705:74-6705:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":192,"usr":12239560158796946348,"detailed_name":"int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine if a database is read-only\n METHOD: sqlite3\n\n ^The sqlite3_db_readonly(D,N) interface returns 1 if the database N\n of connection D is read-only, 0 if it is read/write, or -1 if N is not\n the name of a database on connection D.","declarations":[{"spell":"6715:16-6715:35|-1|1|1","param_spellings":["6715:45-6715:47","6715:61-6715:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":193,"usr":5910936141086233361,"detailed_name":"int sqlite3_txn_state(sqlite3 *, const char *zSchema)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine the transaction state of a database\n METHOD: sqlite3\n\n ^The sqlite3_txn_state(D,S) interface returns the current\n [transaction state] of schema S in database connection D.  ^If S is NULL,\n then the highest transaction state of any schema on database connection D\n is returned.  Transaction states are (in order of lowest to highest):\n <ol>\n <li value=\"0\"> SQLITE_TXN_NONE\n <li value=\"1\"> SQLITE_TXN_READ\n <li value=\"2\"> SQLITE_TXN_WRITE\n </ol>\n ^If the S argument to sqlite3_txn_state(D,S) is not the name of\n a valid schema, then -1 is returned.","declarations":[{"spell":"6733:16-6733:33|-1|1|1","param_spellings":["6733:42-6733:42","6733:55-6733:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":194,"usr":13891765606047473142,"detailed_name":"sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)","short_name_offset":14,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Find the next prepared statement\n METHOD: sqlite3\n\n ^This interface returns a pointer to the next [prepared statement] after\n pStmt associated with the [database connection] pDb.  ^If pStmt is NULL\n then this interface returns a pointer to the first prepared statement\n associated with the database connection pDb.  ^If no prepared statement\n satisfies the conditions of this routine, it returns NULL.\n\n The [database connection] pointer D in a call to\n [sqlite3_next_stmt(D,S)] must refer to an open database\n connection and in particular must not be a NULL pointer.","declarations":[{"spell":"6782:26-6782:43|-1|1|1","param_spellings":["6782:53-6782:56","6782:72-6782:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":195,"usr":16201652014921985195,"detailed_name":"void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *)","short_name_offset":6,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Commit And Rollback Notification Callbacks\n METHOD: sqlite3\n\n ^The sqlite3_commit_hook() interface registers a callback\n function to be invoked whenever a transaction is [COMMIT | committed].\n ^Any callback set by a previous call to sqlite3_commit_hook()\n for the same database connection is overridden.\n ^The sqlite3_rollback_hook() interface registers a callback\n function to be invoked whenever a transaction is [ROLLBACK | rolled back].\n ^Any callback set by a previous call to sqlite3_rollback_hook()\n for the same database connection is overridden.\n ^The pArg argument is passed through to the callback.\n ^If the callback on a commit hook function returns non-zero,\n then the commit is converted into a rollback.\n\n ^The sqlite3_commit_hook(D,C,P) and sqlite3_rollback_hook(D,C,P) functions\n return the P argument from the previous call of the same function\n on the same [database connection] D, or NULL for\n the first call for each function on D.\n\n The commit and rollback hook callbacks are not reentrant.\n The callback implementation must not do anything that will modify\n the database connection that invoked the callback.  Any actions\n to modify the database connection must be deferred until after the\n completion of the [sqlite3_step()] call that triggered the commit\n or rollback hook in the first place.\n Note that running any other SQL statements, including SELECT statements,\n or merely calling [sqlite3_prepare_v2()] and [sqlite3_step()] will modify\n the database connections for the meaning of \"modify\" in this paragraph.\n\n ^Registering a NULL function disables the callback.\n\n ^When the commit hook callback routine returns zero, the [COMMIT]\n operation is allowed to continue normally.  ^If the commit hook\n returns non-zero, then the [COMMIT] is converted into a [ROLLBACK].\n ^The rollback hook is invoked on a rollback that results from a commit\n hook returning non-zero, just as it would be with any other rollback.\n\n ^For the purposes of this API, a transaction is said to have been\n rolled back if an explicit \"ROLLBACK\" statement is executed, or\n an error or constraint causes an implicit rollback to occur.\n ^The rollback callback is not invoked if a transaction is\n automatically rolled back because the database connection is closed.\n\n See also the [sqlite3_update_hook()] interface.","declarations":[{"spell":"6831:18-6831:37|-1|1|1","param_spellings":["6831:46-6831:46","6831:53-6831:53","6831:68-6831:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":196,"usr":1478469724508584402,"detailed_name":"void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *)","short_name_offset":6,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"6832:18-6832:39|-1|1|1","param_spellings":["6832:48-6832:48","6832:56-6832:56","6832:72-6832:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":197,"usr":3714369542500946782,"detailed_name":"int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (*)(void *, const char *, unsigned int, unsigned int, unsigned int), void *, void (*)(void *))","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Autovacuum Compaction Amount Callback\n METHOD: sqlite3\n\n ^The sqlite3_autovacuum_pages(D,C,P,X) interface registers a callback\n function C that is invoked prior to each autovacuum of the database\n file.  ^The callback is passed a copy of the generic data pointer (P),\n the schema-name of the attached database that is being autovacuumed,\n the size of the database file in pages, the number of free pages,\n and the number of bytes per page, respectively.  The callback should\n return the number of free pages that should be removed by the\n autovacuum.  ^If the callback returns zero, then no autovacuum happens.\n ^If the value returned is greater than or equal to the number of\n free pages, then a complete autovacuum happens.\n\n <p>^If there are multiple ATTACH-ed database files that are being\n modified as part of a transaction commit, then the autovacuum pages\n callback is invoked separately for each file.\n\n <p><b>The callback is not reentrant.</b> The callback function should\n not attempt to invoke any other SQLite interface.  If it does, bad\n things may happen, including segmentation faults and corrupt database\n files.  The callback function should be a simple function that\n does some arithmetic on its input parameters and returns a result.\n\n ^The X parameter to sqlite3_autovacuum_pages(D,C,P,X) is an optional\n destructor for the P parameter.  ^If X is not NULL, then X(P) is\n invoked whenever the database connection closes or when the callback\n is overwritten by another invocation of sqlite3_autovacuum_pages().\n\n <p>^There is only one autovacuum pages callback per database connection.\n ^Each call to the sqlite3_autovacuum_pages() interface overrides all\n previous invocations for that database connection.  ^If the callback\n argument (C) to sqlite3_autovacuum_pages(D,C,P,X) is a NULL pointer,\n then the autovacuum steps callback is canceled.  The return value\n from sqlite3_autovacuum_pages() is normally SQLITE_OK, but might\n be some other error code if something goes wrong.  The current\n implementation will only return SQLITE_OK or SQLITE_MISUSE, but other\n return codes might be added in future releases.\n\n <p>If no autovacuum pages callback is specified (the usual case) or\n a NULL pointer is provided for the callback,\n then the default behavior is to vacuum all free pages.  So, in other\n words, the default behavior is the same as if the callback function\n were something like this:\n\n <blockquote><pre>\n &nbsp;   unsigned int demonstration_autovac_pages_callback(\n &nbsp;     void *pClientData,\n &nbsp;     const char *zSchema,\n &nbsp;     unsigned int nDbPage,\n &nbsp;     unsigned int nFreePage,\n &nbsp;     unsigned int nBytePerPage\n &nbsp;   ){\n &nbsp;     return nFreePage;\n &nbsp;   }\n </pre></blockquote>","declarations":[{"spell":"6892:16-6892:40|-1|1|1","param_spellings":["6893:12-6893:14","6894:17-6894:17","6895:8-6895:8","6896:9-6896:9"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":198,"usr":2055040914321204053,"detailed_name":"void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, const char *, const char *, sqlite3_int64), void *)","short_name_offset":6,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Data Change Notification Callbacks\n METHOD: sqlite3\n\n ^The sqlite3_update_hook() interface registers a callback function\n with the [database connection] identified by the first argument\n to be invoked whenever a row is updated, inserted or deleted in\n a [rowid table].\n ^Any callback set by a previous call to this function\n for the same database connection is overridden.\n\n ^The second argument is a pointer to the function to invoke when a\n row is updated, inserted or deleted in a rowid table.\n ^The first argument to the callback is a copy of the third argument\n to sqlite3_update_hook().\n ^The second callback argument is one of [SQLITE_INSERT], [SQLITE_DELETE],\n or [SQLITE_UPDATE], depending on the operation that caused the callback\n to be invoked.\n ^The third and fourth arguments to the callback contain pointers to the\n database and table name containing the affected row.\n ^The final callback parameter is the [rowid] of the row.\n ^In the case of an update, this is the [rowid] after the update takes place.\n\n ^(The update hook is not invoked when internal system tables are\n modified (i.e. sqlite_sequence).)^\n ^The update hook is not invoked when [WITHOUT ROWID] tables are modified.\n\n ^In the current implementation, the update hook\n is not invoked when conflicting rows are deleted because of an\n [ON CONFLICT | ON CONFLICT REPLACE] clause.  ^Nor is the update hook\n invoked when rows are deleted using the [truncate optimization].\n The exceptions defined in this paragraph might change in a future\n release of SQLite.\n\n Whether the update hook is invoked before or after the\n corresponding change is currently unspecified and may differ\n depending on the type of change. Do not rely on the order of the\n hook call with regards to the final result of the operation which\n triggers the hook.\n\n The update hook implementation must not do anything that will modify\n the database connection that invoked the update hook.  Any actions\n to modify the database connection must be deferred until after the\n completion of the [sqlite3_step()] call that triggered the update hook.\n Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n database connections for the meaning of \"modify\" in this paragraph.\n\n ^The sqlite3_update_hook(D,C,P) function\n returns the P argument from the previous call\n on the same [database connection] D, or NULL for\n the first call on D.\n\n See also the [sqlite3_commit_hook()], [sqlite3_rollback_hook()],\n and [sqlite3_preupdate_hook()] interfaces.","declarations":[{"spell":"6955:18-6955:37|-1|1|1","param_spellings":["6956:11-6956:11","6957:9-6957:9","6959:1-6959:1"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":199,"usr":12856152473854466368,"detailed_name":"int sqlite3_enable_shared_cache(int)","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Enable Or Disable Shared Pager Cache\n\n ^(This routine enables or disables the sharing of the database cache\n and schema data structures between [database connection | connections]\n to the same database. Sharing is enabled if the argument is true\n and disabled if the argument is false.)^\n\n This interface is omitted if SQLite is compiled with\n [-DSQLITE_OMIT_SHARED_CACHE].  The [-DSQLITE_OMIT_SHARED_CACHE]\n compile-time option is recommended because the\n [use of shared cache mode is discouraged].\n\n ^Cache sharing is enabled and disabled for an entire process.\n This is a change as of SQLite [version 3.5.0] ([dateof:3.5.0]).\n In prior versions of SQLite,\n sharing was enabled or disabled for each thread separately.\n\n ^(The cache sharing mode set by this interface effects all subsequent\n calls to [sqlite3_open()], [sqlite3_open_v2()], and [sqlite3_open16()].\n Existing database connections continue to use the sharing mode\n that was in effect at the time they were opened.)^\n\n ^(This routine returns [SQLITE_OK] if shared cache was enabled or disabled\n successfully.  An [error code] is returned otherwise.)^\n\n ^Shared cache is disabled by default. It is recommended that it stay\n that way.  In other words, do not use this routine.  This interface\n continues to be provided for historical compatibility, but its use is\n discouraged.  Any use of shared cache is discouraged.  If shared cache\n must be used, it is recommended that shared cache only be enabled for\n individual database connections using the [sqlite3_open_v2()] interface\n with the [SQLITE_OPEN_SHAREDCACHE] flag.\n\n Note: This method is disabled on MacOS X 10.7 and iOS version 5.0\n and will always return SQLITE_MISUSE. On those systems,\n shared cache mode should be enabled per-database connection via\n [sqlite3_open_v2()] with [SQLITE_OPEN_SHAREDCACHE].\n\n This interface is threadsafe on processors where writing a\n 32-bit integer is atomic.\n\n See Also:  [SQLite Shared-Cache Mode]","declarations":[{"spell":"7005:16-7005:43|-1|1|1","param_spellings":["7005:47-7005:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":200,"usr":2262574711371198970,"detailed_name":"int sqlite3_release_memory(int)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Attempt To Free Heap Memory\n\n ^The sqlite3_release_memory() interface attempts to free N bytes\n of heap memory by deallocating non-essential memory allocations\n held by the database library.   Memory used to cache database\n pages to improve performance is an example of non-essential memory.\n ^sqlite3_release_memory() returns the number of bytes actually freed,\n which might be more or less than the amount requested.\n ^The sqlite3_release_memory() routine is a no-op returning zero\n if SQLite is not compiled with [SQLITE_ENABLE_MEMORY_MANAGEMENT].\n\n See also: [sqlite3_db_release_memory()]","declarations":[{"spell":"7021:16-7021:38|-1|1|1","param_spellings":["7021:42-7021:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":201,"usr":15948648746941846028,"detailed_name":"int sqlite3_db_release_memory(sqlite3 *)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Free Memory Used By A Database Connection\n METHOD: sqlite3\n\n ^The sqlite3_db_release_memory(D) interface attempts to free as much heap\n memory as possible from database connection D. Unlike the\n [sqlite3_release_memory()] interface, this interface is in effect even\n when the [SQLITE_ENABLE_MEMORY_MANAGEMENT] compile-time option is\n omitted.\n\n See also: [sqlite3_release_memory()]","declarations":[{"spell":"7035:16-7035:41|-1|1|1","param_spellings":["7035:50-7035:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":202,"usr":6961472166424196995,"detailed_name":"sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)","short_name_offset":14,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Impose A Limit On Heap Size\n\n These interfaces impose limits on the amount of heap memory that will be\n by all database connections within a single process.\n\n ^The sqlite3_soft_heap_limit64() interface sets and/or queries the\n soft limit on the amount of heap memory that may be allocated by SQLite.\n ^SQLite strives to keep heap memory utilization below the soft heap\n limit by reducing the number of pages held in the page cache\n as heap memory usages approaches the limit.\n ^The soft heap limit is \"soft\" because even though SQLite strives to stay\n below the limit, it will exceed the limit rather than generate\n an [SQLITE_NOMEM] error.  In other words, the soft heap limit\n is advisory only.\n\n ^The sqlite3_hard_heap_limit64(N) interface sets a hard upper bound of\n N bytes on the amount of memory that will be allocated.  ^The\n sqlite3_hard_heap_limit64(N) interface is similar to\n sqlite3_soft_heap_limit64(N) except that memory allocations will fail\n when the hard heap limit is reached.\n\n ^The return value from both sqlite3_soft_heap_limit64() and\n sqlite3_hard_heap_limit64() is the size of\n the heap limit prior to the call, or negative in the case of an\n error.  ^If the argument N is negative\n then no change is made to the heap limit.  Hence, the current\n size of heap limits can be determined by invoking\n sqlite3_soft_heap_limit64(-1) or sqlite3_hard_heap_limit(-1).\n\n ^Setting the heap limits to zero disables the heap limiter mechanism.\n\n ^The soft heap limit may not be greater than the hard heap limit.\n ^If the hard heap limit is enabled and if sqlite3_soft_heap_limit(N)\n is invoked with a value of N that is greater than the hard heap limit,\n the soft heap limit is set to the value of the hard heap limit.\n ^The soft heap limit is automatically enabled whenever the hard heap\n limit is enabled. ^When sqlite3_hard_heap_limit64(N) is invoked and\n the soft heap limit is outside the range of 1..N, then the soft heap\n limit is set to N.  ^Invoking sqlite3_soft_heap_limit64(0) when the\n hard heap limit is enabled makes the soft heap limit equal to the\n hard heap limit.\n\n The memory allocation limits can also be adjusted using\n [PRAGMA soft_heap_limit] and [PRAGMA hard_heap_limit].\n\n ^(The heap limits are not enforced in the current implementation\n if one or more of following conditions are true:\n\n <ul>\n <li> The limit value is set to zero.\n <li> Memory accounting is disabled using a combination of the\n      [sqlite3_config]([SQLITE_CONFIG_MEMSTATUS],...) start-time option and\n      the [SQLITE_DEFAULT_MEMSTATUS] compile-time option.\n <li> An alternative page cache implementation is specified using\n      [sqlite3_config]([SQLITE_CONFIG_PCACHE2],...).\n <li> The page cache allocates from its own memory pool supplied\n      by [sqlite3_config]([SQLITE_CONFIG_PAGECACHE],...) rather than\n      from the heap.\n </ul>)^\n\n The circumstances under which SQLite will enforce the heap limits may\n changes in future releases of SQLite.","declarations":[{"spell":"7101:26-7101:51|-1|1|1","param_spellings":["7101:66-7101:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":203,"usr":1485774804840786416,"detailed_name":"sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N)","short_name_offset":14,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"7102:26-7102:51|-1|1|1","param_spellings":["7102:66-7102:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":204,"usr":4423110400835781251,"detailed_name":"void sqlite3_soft_heap_limit(int N)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Deprecated Soft Heap Limit Interface\n DEPRECATED\n\n This is a deprecated version of the [sqlite3_soft_heap_limit64()]\n interface.  This routine is provided for historical compatibility\n only.  All new applications should use the\n [sqlite3_soft_heap_limit64()] interface rather than this one.","declarations":[{"spell":"7113:35-7113:58|-1|1|1","param_spellings":["7113:63-7113:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":205,"usr":5054375458144830909,"detailed_name":"int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)","short_name_offset":4,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Extract Metadata About A Column Of A Table\n METHOD: sqlite3\n\n ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns\n information about column C of table T in database D\n on [database connection] X.)^  ^The sqlite3_table_column_metadata()\n interface returns SQLITE_OK and fills in the non-NULL pointers in\n the final five arguments with appropriate values if the specified\n column exists.  ^The sqlite3_table_column_metadata() interface returns\n SQLITE_ERROR if the specified column does not exist.\n ^If the column-name parameter to sqlite3_table_column_metadata() is a\n NULL pointer, then this routine simply checks for the existence of the\n table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it\n does not.  If the table name parameter T in a call to\n sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is\n undefined behavior.\n\n ^The column is identified by the second, third and fourth parameters to\n this function. ^(The second parameter is either the name of the database\n (i.e. \"main\", \"temp\", or an attached database) containing the specified\n table or NULL.)^ ^If it is NULL, then all attached databases are searched\n for the table using the same algorithm used by the database engine to\n resolve unqualified table references.\n\n ^The third and fourth parameters to this function are the table and column\n name of the desired column, respectively.\n\n ^Metadata is returned by writing to the memory locations passed as the 5th\n and subsequent parameters to this function. ^Any of these arguments may be\n NULL, in which case the corresponding element of metadata is omitted.\n\n ^(<blockquote>\n <table border=\"1\">\n <tr><th> Parameter <th> Output<br>Type <th>  Description\n\n <tr><td> 5th <td> const char* <td> Data type\n <tr><td> 6th <td> const char* <td> Name of default collation sequence\n <tr><td> 7th <td> int         <td> True if column has a NOT NULL constraint\n <tr><td> 8th <td> int         <td> True if column is part of the PRIMARY KEY\n <tr><td> 9th <td> int         <td> True if column is [AUTOINCREMENT]\n </table>\n </blockquote>)^\n\n ^The memory pointed to by the character pointers returned for the\n declaration type and collation sequence is valid until the next\n call to any SQLite API function.\n\n ^If the specified table is actually a view, an [error code] is returned.\n\n ^If the specified column is \"rowid\", \"oid\" or \"_rowid_\" and the table\n is not a [WITHOUT ROWID] table and an\n [INTEGER PRIMARY KEY] column has been explicitly declared, then the output\n parameters are set for the explicitly declared column. ^(If there is no\n [INTEGER PRIMARY KEY] column, then the outputs\n for the [rowid] are set as follows:\n\n <pre>\n     data type: \"INTEGER\"\n     collation sequence: \"BINARY\"\n     not null: 0\n     primary key: 1\n     auto increment: 0\n </pre>)^\n\n ^This function causes all database schemas to be read from disk and\n parsed, if that has not already been done, and returns an error if\n any errors are encountered while loading the schema.","declarations":[{"spell":"7185:16-7185:45|-1|1|1","param_spellings":["7186:12-7186:14","7187:15-7187:22","7188:15-7188:25","7189:15-7189:26","7190:16-7190:26","7191:16-7191:25","7192:8-7192:16","7193:8-7193:19","7194:8-7194:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":206,"usr":9069506733335149394,"detailed_name":"int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Load An Extension\n METHOD: sqlite3\n\n ^This interface loads an SQLite extension library from the named file.\n\n ^The sqlite3_load_extension() interface attempts to load an\n [SQLite extension] library contained in the file zFile.  If\n the file cannot be loaded directly, attempts are made to load\n with various operating-system specific extensions added.\n So for example, if \"samplelib\" cannot be loaded, then names like\n \"samplelib.so\" or \"samplelib.dylib\" or \"samplelib.dll\" might\n be tried also.\n\n ^The entry point is zProc.\n ^(zProc may be 0, in which case SQLite will try to come up with an\n entry point name on its own.  It first tries \"sqlite3_extension_init\".\n If that does not work, it constructs a name \"sqlite3_X_init\" where the\n X is consists of the lower-case equivalent of all ASCII alphabetic\n characters in the filename from the last \"/\" to the first following\n \".\" and omitting any initial \"lib\".)^\n ^The sqlite3_load_extension() interface returns\n [SQLITE_OK] on success and [SQLITE_ERROR] if something goes wrong.\n ^If an error occurs and pzErrMsg is not 0, then the\n [sqlite3_load_extension()] interface shall attempt to\n fill *pzErrMsg with error message text stored in memory\n obtained from [sqlite3_malloc()]. The calling function\n should free this memory by calling [sqlite3_free()].\n\n ^Extension loading must be enabled using\n [sqlite3_enable_load_extension()] or\n [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],1,NULL)\n prior to calling this API,\n otherwise an error will be returned.\n\n <b>Security warning:</b> It is recommended that the\n [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method be used to enable only this\n interface.  The use of the [sqlite3_enable_load_extension()] interface\n should be avoided.  This will keep the SQL function [load_extension()]\n disabled and prevent SQL injections from giving attackers\n access to extension loading capabilities.\n\n See also the [load_extension() SQL function].","declarations":[{"spell":"7241:16-7241:38|-1|1|1","param_spellings":["7242:12-7242:14","7243:15-7243:20","7244:15-7244:20","7245:10-7245:18"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":207,"usr":5754557328550806643,"detailed_name":"int sqlite3_enable_load_extension(sqlite3 *db, int onoff)","short_name_offset":4,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Enable Or Disable Extension Loading\n METHOD: sqlite3\n\n ^So as not to open security holes in older applications that are\n unprepared to deal with [extension loading], and as a means of disabling\n [extension loading] while evaluating user-entered SQL, the following API\n is provided to turn the [sqlite3_load_extension()] mechanism on and off.\n\n ^Extension loading is off by default.\n ^Call the sqlite3_enable_load_extension() routine with onoff==1\n to turn extension loading on and call it with onoff==0 to turn\n it back off again.\n\n ^This interface enables or disables both the C-API\n [sqlite3_load_extension()] and the SQL function [load_extension()].\n ^(Use [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],..)\n to enable or disable only the C-API.)^\n\n <b>Security warning:</b> It is recommended that extension loading\n be enabled using the [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method\n rather than this interface, so the [load_extension()] SQL function\n remains disabled. This will prevent SQL injections from giving attackers\n access to extension loading capabilities.","declarations":[{"spell":"7273:16-7273:45|-1|1|1","param_spellings":["7273:55-7273:57","7273:63-7273:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":208,"usr":18061714265517932594,"detailed_name":"int sqlite3_auto_extension(void (*)() xEntryPoint)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Automatically Load Statically Linked Extensions\n\n ^This interface causes the xEntryPoint() function to be invoked for\n each new [database connection] that is created.  The idea here is that\n xEntryPoint() is the entry point for a statically linked [SQLite extension]\n that is to be automatically loaded into all new database connections.\n\n ^(Even though the function prototype shows that xEntryPoint() takes\n no arguments and returns void, SQLite invokes xEntryPoint() with three\n arguments and expects an integer result as if the signature of the\n entry point where as follows:\n\n <blockquote><pre>\n &nbsp;  int xEntryPoint(\n &nbsp;    sqlite3 *db,\n &nbsp;    const char **pzErrMsg,\n &nbsp;    const struct sqlite3_api_routines *pThunk\n &nbsp;  );\n </pre></blockquote>)^\n\n If the xEntryPoint routine encounters an error, it should make *pzErrMsg\n point to an appropriate error message (obtained from [sqlite3_mprintf()])\n and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg\n is NULL before calling the xEntryPoint().  ^SQLite will invoke\n [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any\n xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()],\n or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail.\n\n ^Calling sqlite3_auto_extension(X) with an entry point X that is already\n on the list of automatic extensions is a harmless no-op. ^No entry point\n will be called more than once for each database connection that is opened.\n\n See also: [sqlite3_reset_auto_extension()]\n and [sqlite3_cancel_auto_extension()]","declarations":[{"spell":"7311:16-7311:38|-1|1|1","param_spellings":["7311:45-7311:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":209,"usr":7386704350713961103,"detailed_name":"int sqlite3_cancel_auto_extension(void (*)() xEntryPoint)","short_name_offset":4,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Cancel Automatic Extension Loading\n\n ^The [sqlite3_cancel_auto_extension(X)] interface unregisters the\n initialization routine X that was registered using a prior call to\n [sqlite3_auto_extension(X)].  ^The [sqlite3_cancel_auto_extension(X)]\n routine returns 1 if initialization routine X was successfully\n unregistered and it returns 0 if X was not on the list of initialization\n routines.","declarations":[{"spell":"7323:16-7323:45|-1|1|1","param_spellings":["7323:52-7323:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":210,"usr":12147392959281610376,"detailed_name":"void sqlite3_reset_auto_extension()","short_name_offset":5,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Reset Automatic Extension Loading\n\n ^This interface disables all automatic extensions previously\n registered using [sqlite3_auto_extension()].","declarations":[{"spell":"7331:17-7331:45|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":211,"usr":6053061552573858792,"detailed_name":"int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Register A Virtual Table Implementation\n METHOD: sqlite3\n\n ^These routines are used to register a new [virtual table module] name.\n ^Module names must be registered before\n creating a new [virtual table] using the module and before using a\n preexisting [virtual table] for the module.\n\n ^The module name is registered on the [database connection] specified\n by the first parameter.  ^The name of the module is given by the\n second parameter.  ^The third parameter is a pointer to\n the implementation of the [virtual table module].   ^The fourth\n parameter is an arbitrary client data pointer that is passed through\n into the [xCreate] and [xConnect] methods of the virtual table module\n when a new virtual table is be being created or reinitialized.\n\n ^The sqlite3_create_module_v2() interface has a fifth parameter which\n is a pointer to a destructor for the pClientData.  ^SQLite will\n invoke the destructor function (if it is not NULL) when SQLite\n no longer needs the pClientData pointer.  ^The destructor will also\n be invoked if the call to sqlite3_create_module_v2() fails.\n ^The sqlite3_create_module()\n interface is equivalent to sqlite3_create_module_v2() with a NULL\n destructor.\n\n ^If the third parameter (the pointer to the sqlite3_module object) is\n NULL then no new module is created and any existing modules with the\n same name are dropped.\n\n See also: [sqlite3_drop_modules()]","declarations":[{"spell":"7634:16-7634:37|-1|1|1","param_spellings":["7635:12-7635:14","7636:15-7636:20","7637:25-7637:26","7638:9-7638:20"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":212,"usr":6081826888513813130,"detailed_name":"int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (*)(void *) xDestroy)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"7640:16-7640:40|-1|1|1","param_spellings":["7641:12-7641:14","7642:15-7642:20","7643:25-7643:26","7644:9-7644:20","7645:9-7645:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":213,"usr":12529192752345628383,"detailed_name":"int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Remove Unnecessary Virtual Table Implementations\n METHOD: sqlite3\n\n ^The sqlite3_drop_modules(D,L) interface removes all virtual\n table modules from database connection D except those named on list L.\n The L parameter must be either NULL or a pointer to an array of pointers\n to strings where the array is terminated by a single NULL pointer.\n ^If the L parameter is NULL, then all virtual table modules are removed.\n\n See also: [sqlite3_create_module()]","declarations":[{"spell":"7660:16-7660:36|-1|1|1","param_spellings":["7661:12-7661:14","7662:16-7662:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":214,"usr":18146419255360367436,"detailed_name":"int sqlite3_declare_vtab(sqlite3 *, const char *zSQL)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Declare The Schema Of A Virtual Table\n\n ^The [xCreate] and [xConnect] methods of a\n [virtual table module] call this interface\n to declare the format (the names and datatypes of the columns) of\n the virtual tables they implement.","declarations":[{"spell":"7720:16-7720:36|-1|1|1","param_spellings":["7720:45-7720:45","7720:59-7720:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":215,"usr":16537081479431009346,"detailed_name":"int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Overload A Function For A Virtual Table\n METHOD: sqlite3\n\n ^(Virtual tables can provide alternative implementations of functions\n using the [xFindFunction] method of the [virtual table module].\n But global versions of those functions\n must exist in order to be overloaded.)^\n\n ^(This API makes sure a global version of a function with a particular\n name and number of parameters exists.  If no such function exists\n before this API is called, a new function is created.)^  ^The implementation\n of the new function always causes an exception to be thrown.  So\n the new function is not good for anything by itself.  Its only\n purpose is to be a placeholder function that can be overloaded\n by a [virtual table].","declarations":[{"spell":"7739:16-7739:41|-1|1|1","param_spellings":["7739:50-7739:50","7739:64-7739:73","7739:79-7739:83"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":216,"usr":4930165198323565555,"detailed_name":"int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Open A BLOB For Incremental I/O\n METHOD: sqlite3\n CONSTRUCTOR: sqlite3_blob\n\n ^(This interfaces opens a [BLOB handle | handle] to the BLOB located\n in row iRow, column zColumn, table zTable in database zDb;\n in other words, the same BLOB that would be selected by:\n\n <pre>\n     SELECT zColumn FROM zDb.zTable WHERE [rowid] = iRow;\n </pre>)^\n\n ^(Parameter zDb is not the filename that contains the database, but\n rather the symbolic name of the database. For attached databases, this is\n the name that appears after the AS keyword in the [ATTACH] statement.\n For the main database file, the database name is \"main\". For TEMP\n tables, the database name is \"temp\".)^\n\n ^If the flags parameter is non-zero, then the BLOB is opened for read\n and write access. ^If the flags parameter is zero, the BLOB is opened for\n read-only access.\n\n ^(On success, [SQLITE_OK] is returned and the new [BLOB handle] is stored\n in *ppBlob. Otherwise an [error code] is returned and, unless the error\n code is SQLITE_MISUSE, *ppBlob is set to NULL.)^ ^This means that, provided\n the API is not misused, it is always safe to call [sqlite3_blob_close()]\n on *ppBlob after this function it returns.\n\n This function fails with SQLITE_ERROR if any of the following are true:\n <ul>\n   <li> ^(Database zDb does not exist)^,\n   <li> ^(Table zTable does not exist within database zDb)^,\n   <li> ^(Table zTable is a WITHOUT ROWID table)^,\n   <li> ^(Column zColumn does not exist)^,\n   <li> ^(Row iRow is not present in the table)^,\n   <li> ^(The specified column of row iRow contains a value that is not\n         a TEXT or BLOB value)^,\n   <li> ^(Column zColumn is part of an index, PRIMARY KEY or UNIQUE\n         constraint and the blob is being opened for read/write access)^,\n   <li> ^([foreign key constraints | Foreign key constraints] are enabled,\n         column zColumn is part of a [child key] definition and the blob is\n         being opened for read/write access)^.\n </ul>\n\n ^Unless it returns SQLITE_MISUSE, this function sets the\n [database connection] error code and message accessible via\n [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.\n\n A BLOB referenced by sqlite3_blob_open() may be read using the\n [sqlite3_blob_read()] interface and modified by using\n [sqlite3_blob_write()].  The [BLOB handle] can be moved to a\n different row of the same table using the [sqlite3_blob_reopen()]\n interface.  However, the column, table, or database of a [BLOB handle]\n cannot be changed after the [BLOB handle] is opened.\n\n ^(If the row that a BLOB handle points to is modified by an\n [UPDATE], [DELETE], or by [ON CONFLICT] side-effects\n then the BLOB handle is marked as \"expired\".\n This is true if any column of the row is changed, even a column\n other than the one the BLOB handle is open on.)^\n ^Calls to [sqlite3_blob_read()] and [sqlite3_blob_write()] for\n an expired BLOB handle fail with a return code of [SQLITE_ABORT].\n ^(Changes written into a BLOB prior to the BLOB expiring are not\n rolled back by the expiration of the BLOB.  Such changes will eventually\n commit if the transaction continues to completion.)^\n\n ^Use the [sqlite3_blob_bytes()] interface to determine the size of\n the opened blob.  ^The size of a blob may not be changed by this\n interface.  Use the [UPDATE] SQL command to change the size of a\n blob.\n\n ^The [sqlite3_bind_zeroblob()] and [sqlite3_result_zeroblob()] interfaces\n and the built-in [zeroblob] SQL function may be used to create a\n zero-filled blob to read or write using the incremental-blob interface.\n\n To avoid a resource leak, every open [BLOB handle] should eventually\n be released by a call to [sqlite3_blob_close()].\n\n See also: [sqlite3_blob_close()],\n [sqlite3_blob_reopen()], [sqlite3_blob_read()],\n [sqlite3_blob_bytes()], [sqlite3_blob_write()].","declarations":[{"spell":"7838:16-7838:33|-1|1|1","param_spellings":["7839:11-7839:11","7840:15-7840:18","7841:15-7841:21","7842:15-7842:22","7843:17-7843:21","7844:7-7844:12","7845:18-7845:24"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":217,"usr":4314223926072804419,"detailed_name":"int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Move a BLOB Handle to a New Row\n METHOD: sqlite3_blob\n\n ^This function is used to move an existing [BLOB handle] so that it points\n to a different row of the same database table. ^The new row is identified\n by the rowid value passed as the second argument. Only the row can be\n changed. ^The database, table and column on which the blob handle is open\n remain the same. Moving an existing [BLOB handle] to a new row is\n faster than closing the existing handle and opening a new one.\n\n ^(The new row must meet the same criteria as for [sqlite3_blob_open()] -\n it must exist and there must be either a blob or text value stored in\n the nominated column.)^ ^If the new row is not present in the table, or if\n it does not contain a blob or text value, or if another error occurs, an\n SQLite error code is returned and the blob handle is considered aborted.\n ^All subsequent calls to [sqlite3_blob_read()], [sqlite3_blob_write()] or\n [sqlite3_blob_reopen()] on an aborted blob handle immediately return\n SQLITE_ABORT. ^Calling [sqlite3_blob_bytes()] on an aborted blob handle\n always returns zero.\n\n ^This function sets the database handle error code and message.","declarations":[{"spell":"7871:16-7871:35|-1|1|1","param_spellings":["7871:50-7871:50","7871:65-7871:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":218,"usr":399976066634444461,"detailed_name":"int sqlite3_blob_close(sqlite3_blob *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Close A BLOB Handle\n DESTRUCTOR: sqlite3_blob\n\n ^This function closes an open [BLOB handle]. ^(The BLOB handle is closed\n unconditionally.  Even if this routine returns an error code, the\n handle is still closed.)^\n\n ^If the blob handle being closed was opened for read-write access, and if\n the database is in auto-commit mode and there are no other open read-write\n blob handles or active write statements, the current transaction is\n committed. ^If an error occurs while committing the transaction, an error\n code is returned and the transaction rolled back.\n\n Calling this function with an argument that is not a NULL pointer or an\n open blob handle results in undefined behavior. ^Calling this routine\n with a null pointer (such as would be returned by a failed call to\n [sqlite3_blob_open()]) is a harmless no-op. ^Otherwise, if this function\n is passed a valid open blob handle, the values returned by the\n sqlite3_errcode() and sqlite3_errmsg() functions are set before returning.","declarations":[{"spell":"7894:16-7894:34|-1|1|1","param_spellings":["7894:49-7894:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":219,"usr":14369954260694785703,"detailed_name":"int sqlite3_blob_bytes(sqlite3_blob *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Return The Size Of An Open BLOB\n METHOD: sqlite3_blob\n\n ^Returns the size in bytes of the BLOB accessible via the\n successfully opened [BLOB handle] in its only argument.  ^The\n incremental blob I/O routines can only read or overwriting existing\n blob content; they cannot change the size of a blob.\n\n This routine only works on a [BLOB handle] which has been created\n by a prior successful call to [sqlite3_blob_open()] and which has not\n been closed by [sqlite3_blob_close()].  Passing any other pointer in\n to this routine results in undefined and probably undesirable behavior.","declarations":[{"spell":"7910:16-7910:34|-1|1|1","param_spellings":["7910:49-7910:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":220,"usr":312125893254576929,"detailed_name":"int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Read Data From A BLOB Incrementally\n METHOD: sqlite3_blob\n\n ^(This function is used to read data from an open [BLOB handle] into a\n caller-supplied buffer. N bytes of data are copied into buffer Z\n from the open BLOB, starting at offset iOffset.)^\n\n ^If offset iOffset is less than N bytes from the end of the BLOB,\n [SQLITE_ERROR] is returned and no data is read.  ^If N or iOffset is\n less than zero, [SQLITE_ERROR] is returned and no data is read.\n ^The size of the blob (and hence the maximum value of N+iOffset)\n can be determined using the [sqlite3_blob_bytes()] interface.\n\n ^An attempt to read from an expired [BLOB handle] fails with an\n error code of [SQLITE_ABORT].\n\n ^(On success, sqlite3_blob_read() returns SQLITE_OK.\n Otherwise, an [error code] or an [extended error code] is returned.)^\n\n This routine only works on a [BLOB handle] which has been created\n by a prior successful call to [sqlite3_blob_open()] and which has not\n been closed by [sqlite3_blob_close()].  Passing any other pointer in\n to this routine results in undefined and probably undesirable behavior.\n\n See also: [sqlite3_blob_write()].","declarations":[{"spell":"7939:16-7939:33|-1|1|1","param_spellings":["7939:48-7939:48","7939:56-7939:57","7939:63-7939:64","7939:70-7939:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":221,"usr":9718165576705244731,"detailed_name":"int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Write Data Into A BLOB Incrementally\n METHOD: sqlite3_blob\n\n ^(This function is used to write data into an open [BLOB handle] from a\n caller-supplied buffer. N bytes of data are copied from the buffer Z\n into the open BLOB, starting at offset iOffset.)^\n\n ^(On success, sqlite3_blob_write() returns SQLITE_OK.\n Otherwise, an  [error code] or an [extended error code] is returned.)^\n ^Unless SQLITE_MISUSE is returned, this function sets the\n [database connection] error code and message accessible via\n [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.\n\n ^If the [BLOB handle] passed as the first argument was not opened for\n writing (the flags parameter to [sqlite3_blob_open()] was zero),\n this function returns [SQLITE_READONLY].\n\n This function may only modify the contents of the BLOB; it is\n not possible to increase the size of a BLOB using this API.\n ^If offset iOffset is less than N bytes from the end of the BLOB,\n [SQLITE_ERROR] is returned and no data is written. The size of the\n BLOB (and hence the maximum value of N+iOffset) can be determined\n using the [sqlite3_blob_bytes()] interface. ^If N or iOffset are less\n than zero [SQLITE_ERROR] is returned and no data is written.\n\n ^An attempt to write to an expired [BLOB handle] fails with an\n error code of [SQLITE_ABORT].  ^Writes to the BLOB that occurred\n before the [BLOB handle] expired are not rolled back by the\n expiration of the handle, though of course those changes might\n have been overwritten by the statement that expired the BLOB handle\n or by other independent statements.\n\n This routine only works on a [BLOB handle] which has been created\n by a prior successful call to [sqlite3_blob_open()] and which has not\n been closed by [sqlite3_blob_close()].  Passing any other pointer in\n to this routine results in undefined and probably undesirable behavior.\n\n See also: [sqlite3_blob_read()].","declarations":[{"spell":"7981:16-7981:34|-1|1|1","param_spellings":["7981:49-7981:49","7981:63-7981:64","7981:70-7981:71","7981:77-7981:84"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":222,"usr":10527502940510220492,"detailed_name":"sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName)","short_name_offset":13,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Virtual File System Objects\n\n A virtual filesystem (VFS) is an [sqlite3_vfs] object\n that SQLite uses to interact\n with the underlying operating system.  Most SQLite builds come with a\n single default VFS that is appropriate for the host computer.\n New VFSes can be registered and existing VFSes can be unregistered.\n The following interfaces are provided.\n\n ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.\n ^Names are case sensitive.\n ^Names are zero-terminated UTF-8 strings.\n ^If there is no match, a NULL pointer is returned.\n ^If zVfsName is NULL then the default VFS is returned.\n\n ^New VFSes are registered with sqlite3_vfs_register().\n ^Each new VFS becomes the default VFS if the makeDflt flag is set.\n ^The same VFS can be registered multiple times without injury.\n ^To make an existing VFS into the default VFS, register it again\n with the makeDflt flag set.  If two different VFSes with the\n same name are registered, the behavior is undefined.  If a\n VFS is registered with a name that is NULL or an empty string,\n then the behavior is undefined.\n\n ^Unregister a VFS with the sqlite3_vfs_unregister() interface.\n ^(If the default VFS is unregistered, another VFS is chosen as\n the default.  The choice for the new VFS is arbitrary.)^","declarations":[{"spell":"8012:25-8012:41|-1|1|1","param_spellings":["8012:54-8012:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":223,"usr":5212521136067004721,"detailed_name":"int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8013:16-8013:36|-1|1|1","param_spellings":["8013:49-8013:49","8013:55-8013:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":224,"usr":16510621847529088170,"detailed_name":"int sqlite3_vfs_unregister(sqlite3_vfs *)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8014:16-8014:38|-1|1|1","param_spellings":["8014:51-8014:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":225,"usr":7362594410439663475,"detailed_name":"sqlite3_mutex *sqlite3_mutex_alloc(int)","short_name_offset":15,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Mutexes\n\n The SQLite core uses these routines for thread\n synchronization. Though they are intended for internal\n use by SQLite, code that links against SQLite is\n permitted to use any of these routines.\n\n The SQLite source code contains multiple implementations\n of these mutex routines.  An appropriate implementation\n is selected automatically at compile-time.  The following\n implementations are available in the SQLite core:\n\n <ul>\n <li>   SQLITE_MUTEX_PTHREADS\n <li>   SQLITE_MUTEX_W32\n <li>   SQLITE_MUTEX_NOOP\n </ul>\n\n The SQLITE_MUTEX_NOOP implementation is a set of routines\n that does no real locking and is appropriate for use in\n a single-threaded application.  The SQLITE_MUTEX_PTHREADS and\n SQLITE_MUTEX_W32 implementations are appropriate for use on Unix\n and Windows.\n\n If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor\n macro defined (with \"-DSQLITE_MUTEX_APPDEF=1\"), then no mutex\n implementation is included with the library. In this case the\n application must supply a custom mutex implementation using the\n [SQLITE_CONFIG_MUTEX] option of the sqlite3_config() function\n before calling sqlite3_initialize() or any other public sqlite3_\n function that calls sqlite3_initialize().\n\n ^The sqlite3_mutex_alloc() routine allocates a new\n mutex and returns a pointer to it. ^The sqlite3_mutex_alloc()\n routine returns NULL if it is unable to allocate the requested\n mutex.  The argument to sqlite3_mutex_alloc() must one of these\n integer constants:\n\n <ul>\n <li>  SQLITE_MUTEX_FAST\n <li>  SQLITE_MUTEX_RECURSIVE\n <li>  SQLITE_MUTEX_STATIC_MAIN\n <li>  SQLITE_MUTEX_STATIC_MEM\n <li>  SQLITE_MUTEX_STATIC_OPEN\n <li>  SQLITE_MUTEX_STATIC_PRNG\n <li>  SQLITE_MUTEX_STATIC_LRU\n <li>  SQLITE_MUTEX_STATIC_PMEM\n <li>  SQLITE_MUTEX_STATIC_APP1\n <li>  SQLITE_MUTEX_STATIC_APP2\n <li>  SQLITE_MUTEX_STATIC_APP3\n <li>  SQLITE_MUTEX_STATIC_VFS1\n <li>  SQLITE_MUTEX_STATIC_VFS2\n <li>  SQLITE_MUTEX_STATIC_VFS3\n </ul>\n\n ^The first two constants (SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE)\n cause sqlite3_mutex_alloc() to create\n a new mutex.  ^The new mutex is recursive when SQLITE_MUTEX_RECURSIVE\n is used but not necessarily so when SQLITE_MUTEX_FAST is used.\n The mutex implementation does not need to make a distinction\n between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does\n not want to.  SQLite will only request a recursive mutex in\n cases where it really needs one.  If a faster non-recursive mutex\n implementation is available on the host platform, the mutex subsystem\n might return such a mutex in response to SQLITE_MUTEX_FAST.\n\n ^The other allowed parameters to sqlite3_mutex_alloc() (anything other\n than SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE) each return\n a pointer to a static preexisting mutex.  ^Nine static mutexes are\n used by the current version of SQLite.  Future versions of SQLite\n may add additional static mutexes.  Static mutexes are for internal\n use by SQLite only.  Applications that use SQLite mutexes should\n use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or\n SQLITE_MUTEX_RECURSIVE.\n\n ^Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST\n or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc()\n returns a different mutex on every call.  ^For the static\n mutex types, the same mutex is returned on every call that has\n the same type number.\n\n ^The sqlite3_mutex_free() routine deallocates a previously\n allocated dynamic mutex.  Attempting to deallocate a static\n mutex results in undefined behavior.\n\n ^The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt\n to enter a mutex.  ^If another thread is already within the mutex,\n sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return\n SQLITE_BUSY.  ^The sqlite3_mutex_try() interface returns [SQLITE_OK]\n upon successful entry.  ^(Mutexes created using\n SQLITE_MUTEX_RECURSIVE can be entered multiple times by the same thread.\n In such cases, the\n mutex must be exited an equal number of times before another thread\n can enter.)^  If the same thread tries to enter any mutex other\n than an SQLITE_MUTEX_RECURSIVE more than once, the behavior is undefined.\n\n ^(Some systems (for example, Windows 95) do not support the operation\n implemented by sqlite3_mutex_try().  On those systems, sqlite3_mutex_try()\n will always return SQLITE_BUSY. In most cases the SQLite core only uses\n sqlite3_mutex_try() as an optimization, so this is acceptable\n behavior. The exceptions are unix builds that set the\n SQLITE_ENABLE_SETLK_TIMEOUT build option. In that case a working\n sqlite3_mutex_try() is required.)^\n\n ^The sqlite3_mutex_leave() routine exits a mutex that was\n previously entered by the same thread.   The behavior\n is undefined if the mutex is not currently entered by the\n calling thread or is not currently allocated.\n\n ^If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(),\n sqlite3_mutex_leave(), or sqlite3_mutex_free() is a NULL pointer,\n then any of the four routines behaves as a no-op.\n\n See also: [sqlite3_mutex_held()] and [sqlite3_mutex_notheld()].","declarations":[{"spell":"8132:27-8132:46|-1|1|1","param_spellings":["8132:50-8132:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":226,"usr":10776708571549705929,"detailed_name":"void sqlite3_mutex_free(sqlite3_mutex *)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8133:17-8133:35|-1|1|1","param_spellings":["8133:50-8133:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":227,"usr":16870936840455130498,"detailed_name":"void sqlite3_mutex_enter(sqlite3_mutex *)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8134:17-8134:36|-1|1|1","param_spellings":["8134:51-8134:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":228,"usr":5547849017632209098,"detailed_name":"int sqlite3_mutex_try(sqlite3_mutex *)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8135:16-8135:33|-1|1|1","param_spellings":["8135:48-8135:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":229,"usr":10260870408294963497,"detailed_name":"void sqlite3_mutex_leave(sqlite3_mutex *)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8136:17-8136:36|-1|1|1","param_spellings":["8136:51-8136:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":230,"usr":5799798997840173738,"detailed_name":"int sqlite3_mutex_held(sqlite3_mutex *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8246:16-8246:34|-1|1|1","param_spellings":["8246:49-8246:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":231,"usr":7909639980530337685,"detailed_name":"int sqlite3_mutex_notheld(sqlite3_mutex *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8247:16-8247:37|-1|1|1","param_spellings":["8247:52-8247:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":232,"usr":9072918165456765817,"detailed_name":"sqlite3_mutex *sqlite3_db_mutex(sqlite3 *)","short_name_offset":15,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Retrieve the mutex for a database connection\n METHOD: sqlite3\n\n ^This interface returns a pointer the [sqlite3_mutex] object that\n serializes access to the [database connection] given in the argument\n when the [threading mode] is Serialized.\n ^If the [threading mode] is Single-thread or Multi-thread then this\n routine returns a NULL pointer.","declarations":[{"spell":"8291:27-8291:43|-1|1|1","param_spellings":["8291:52-8291:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":233,"usr":3247283704001230832,"detailed_name":"int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Low-Level Control Of Database Files\n METHOD: sqlite3\n KEYWORDS: {file control}\n\n ^The [sqlite3_file_control()] interface makes a direct call to the\n xFileControl method for the [sqlite3_io_methods] object associated\n with a particular database identified by the second argument. ^The\n name of the database is \"main\" for the main database or \"temp\" for the\n TEMP database, or the name that appears after the AS keyword for\n databases that are added using the [ATTACH] SQL command.\n ^A NULL pointer can be used in place of \"main\" to refer to the\n main database file.\n ^The third and fourth parameters to this routine\n are passed directly through to the second and third parameters of\n the xFileControl method.  ^The return value of the xFileControl\n method becomes the return value of this routine.\n\n A few opcodes for [sqlite3_file_control()] are handled directly\n by the SQLite core and never invoke the\n sqlite3_io_methods.xFileControl method.\n ^The [SQLITE_FCNTL_FILE_POINTER] value for the op parameter causes\n a pointer to the underlying [sqlite3_file] object to be written into\n the space pointed to by the 4th parameter.  The\n [SQLITE_FCNTL_JOURNAL_POINTER] works similarly except that it returns\n the [sqlite3_file] object associated with the journal file instead of\n the main database.  The [SQLITE_FCNTL_VFS_POINTER] opcode returns\n a pointer to the underlying [sqlite3_vfs] object for the file.\n The [SQLITE_FCNTL_DATA_VERSION] returns the data version counter\n from the pager.\n\n ^If the second parameter (zDbName) does not match the name of any\n open database file, then SQLITE_ERROR is returned.  ^This error\n code is not remembered and will not be recalled by [sqlite3_errcode()]\n or [sqlite3_errmsg()].  The underlying xFileControl method might\n also return SQLITE_ERROR.  There is no way to distinguish between\n an incorrect zDbName and an SQLITE_ERROR return from the underlying\n xFileControl method.\n\n See also: [file control opcodes]","declarations":[{"spell":"8334:16-8334:36|-1|1|1","param_spellings":["8334:45-8334:45","8334:59-8334:66","8334:72-8334:74","8334:81-8334:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":234,"usr":16405509268757482037,"detailed_name":"int sqlite3_test_control(int op, ...)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Testing Interface\n\n ^The sqlite3_test_control() interface is used to read out internal\n state of SQLite and to inject faults into SQLite for testing\n purposes.  ^The first parameter is an operation code that determines\n the number, meaning, and operation of all subsequent parameters.\n\n This interface is not for use by applications.  It exists solely\n for verifying the correct operation of the SQLite library.  Depending\n on how the SQLite library is compiled, this interface might not exist.\n\n The details of the operation codes, their meanings, the parameters\n they take, and what they do are all subject to change without notice.\n Unlike most of the SQLite API, this function is not guaranteed to\n operate consistently from one release to the next.","declarations":[{"spell":"8353:16-8353:36|-1|1|1","param_spellings":["8353:41-8353:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":235,"usr":18252123190986052344,"detailed_name":"int sqlite3_keyword_count()","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: SQL Keyword Checking\n\n These routines provide access to the set of SQL language keywords\n recognized by SQLite.  Applications can uses these routines to determine\n whether or not a specific identifier needs to be escaped (for example,\n by enclosing in double-quotes) so as not to confuse the parser.\n\n The sqlite3_keyword_count() interface returns the number of distinct\n keywords understood by SQLite.\n\n The sqlite3_keyword_name(N,Z,L) interface finds the 0-based N-th keyword and\n makes *Z point to that keyword expressed as UTF8 and writes the number\n of bytes in the keyword into *L.  The string that *Z points to is not\n zero-terminated.  The sqlite3_keyword_name(N,Z,L) routine returns\n SQLITE_OK if N is within bounds and SQLITE_ERROR if not. If either Z\n or L are NULL or invalid pointers then calls to\n sqlite3_keyword_name(N,Z,L) result in undefined behavior.\n\n The sqlite3_keyword_check(Z,L) interface checks to see whether or not\n the L-byte UTF8 identifier that Z points to is a keyword, returning non-zero\n if it is and zero if not.\n\n The parser used by SQLite is forgiving.  It is often possible to use\n a keyword as an identifier as long as such use does not result in a\n parsing ambiguity.  For example, the statement\n \"CREATE TABLE BEGIN(REPLACE,PRAGMA,END);\" is accepted by SQLite, and\n creates a new table named \"BEGIN\" with three columns named\n \"REPLACE\", \"PRAGMA\", and \"END\".  Nevertheless, best practice is to avoid\n using keywords as identifiers.  Common techniques used to avoid keyword\n name collisions include:\n <ul>\n <li> Put all identifier names inside double-quotes.  This is the official\n      SQL way to escape identifier names.\n <li> Put identifier names inside &#91;...&#93;.  This is not standard SQL,\n      but it is what SQL Server does and so lots of programmers use this\n      technique.\n <li> Begin every identifier with the letter \"Z\" as no SQL keywords start\n      with \"Z\".\n <li> Include a digit somewhere in every identifier name.\n </ul>\n\n Note that the number of keywords understood by SQLite can depend on\n compile-time options.  For example, \"VACUUM\" is not a keyword if\n SQLite is compiled with the [-DSQLITE_OMIT_VACUUM] option.  Also,\n new keywords may be added to future releases of SQLite.","declarations":[{"spell":"8451:16-8451:37|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":236,"usr":14375277069057192868,"detailed_name":"int sqlite3_keyword_name(int, const char **, int *)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8452:16-8452:36|-1|1|1","param_spellings":["8452:40-8452:40","8452:53-8452:53","8452:58-8452:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":237,"usr":16695135090997551253,"detailed_name":"int sqlite3_keyword_check(const char *, int)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8453:16-8453:37|-1|1|1","param_spellings":["8453:49-8453:49","8453:53-8453:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":238,"usr":4898095508382743360,"detailed_name":"sqlite3_str *sqlite3_str_new(sqlite3 *)","short_name_offset":13,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Create A New Dynamic String Object\n CONSTRUCTOR: sqlite3_str\n\n ^The [sqlite3_str_new(D)] interface allocates and initializes\n a new [sqlite3_str] object.  To avoid memory leaks, the object returned by\n [sqlite3_str_new()] must be freed by a subsequent call to\n [sqlite3_str_finish(X)].\n\n ^The [sqlite3_str_new(D)] interface always returns a pointer to a\n valid [sqlite3_str] object, though in the event of an out-of-memory\n error the returned object might be a special singleton that will\n silently reject new text, always return SQLITE_NOMEM from\n [sqlite3_str_errcode()], always return 0 for\n [sqlite3_str_length()], and always return NULL from\n [sqlite3_str_finish(X)].  It is always safe to use the value\n returned by [sqlite3_str_new(D)] as the sqlite3_str parameter\n to any of the other [sqlite3_str] methods.\n\n The D parameter to [sqlite3_str_new(D)] may be NULL.  If the\n D parameter in [sqlite3_str_new(D)] is not NULL, then the maximum\n length of the string contained in the [sqlite3_str] object will be\n the value set for [sqlite3_limit](D,[SQLITE_LIMIT_LENGTH]) instead\n of [SQLITE_MAX_LENGTH].","declarations":[{"spell":"8498:25-8498:40|-1|1|1","param_spellings":["8498:49-8498:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":239,"usr":4183173842034942878,"detailed_name":"char *sqlite3_str_finish(sqlite3_str *)","short_name_offset":6,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Finalize A Dynamic String\n DESTRUCTOR: sqlite3_str\n\n ^The [sqlite3_str_finish(X)] interface destroys the sqlite3_str object X\n and returns a pointer to a memory buffer obtained from [sqlite3_malloc64()]\n that contains the constructed string.  The calling application should\n pass the returned value to [sqlite3_free()] to avoid a memory leak.\n ^The [sqlite3_str_finish(X)] interface may return a NULL pointer if any\n errors were encountered during construction of the string.  ^The\n [sqlite3_str_finish(X)] interface will also return a NULL pointer if the\n string in [sqlite3_str] object X is zero bytes long.","declarations":[{"spell":"8513:18-8513:36|-1|1|1","param_spellings":["8513:49-8513:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":240,"usr":16704037240403543582,"detailed_name":"void sqlite3_str_appendf(sqlite3_str *, const char *zFormat, ...)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Add Content To A Dynamic String\n METHOD: sqlite3_str\n\n These interfaces add content to an sqlite3_str object previously obtained\n from [sqlite3_str_new()].\n\n ^The [sqlite3_str_appendf(X,F,...)] and\n [sqlite3_str_vappendf(X,F,V)] interfaces uses the [built-in printf]\n functionality of SQLite to append formatted text onto the end of\n [sqlite3_str] object X.\n\n ^The [sqlite3_str_append(X,S,N)] method appends exactly N bytes from string S\n onto the end of the [sqlite3_str] object X.  N must be non-negative.\n S must contain at least N non-zero bytes of content.  To append a\n zero-terminated string in its entirety, use the [sqlite3_str_appendall()]\n method instead.\n\n ^The [sqlite3_str_appendall(X,S)] method appends the complete content of\n zero-terminated string S onto the end of [sqlite3_str] object X.\n\n ^The [sqlite3_str_appendchar(X,N,C)] method appends N copies of the\n single-byte character C onto the end of [sqlite3_str] object X.\n ^This method can be used, for example, to add whitespace indentation.\n\n ^The [sqlite3_str_reset(X)] method resets the string under construction\n inside [sqlite3_str] object X back to zero bytes in length.\n\n These methods do not return a result code.  ^If an error occurs, that fact\n is recorded in the [sqlite3_str] object and can be recovered by a\n subsequent call to [sqlite3_str_errcode(X)].","declarations":[{"spell":"8547:17-8547:36|-1|1|1","param_spellings":["8547:49-8547:49","8547:63-8547:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":241,"usr":702442478496131602,"detailed_name":"void sqlite3_str_vappendf(sqlite3_str *, const char *zFormat, std::va_list)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8548:17-8548:37|-1|1|1","param_spellings":["8548:50-8548:50","8548:64-8548:71","8548:80-8548:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":242,"usr":840940042408669515,"detailed_name":"void sqlite3_str_append(sqlite3_str *, const char *zIn, int N)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8549:17-8549:35|-1|1|1","param_spellings":["8549:48-8549:48","8549:62-8549:65","8549:71-8549:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":243,"usr":14382813809878080111,"detailed_name":"void sqlite3_str_appendall(sqlite3_str *, const char *zIn)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8550:17-8550:38|-1|1|1","param_spellings":["8550:51-8550:51","8550:65-8550:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":244,"usr":14749910995509740758,"detailed_name":"void sqlite3_str_appendchar(sqlite3_str *, int N, char C)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8551:17-8551:39|-1|1|1","param_spellings":["8551:52-8551:52","8551:58-8551:59","8551:66-8551:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":245,"usr":14873312458423601648,"detailed_name":"void sqlite3_str_reset(sqlite3_str *)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8552:17-8552:34|-1|1|1","param_spellings":["8552:47-8552:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":246,"usr":8632252145372898629,"detailed_name":"int sqlite3_str_errcode(sqlite3_str *)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Status Of A Dynamic String\n METHOD: sqlite3_str\n\n These interfaces return the current status of an [sqlite3_str] object.\n\n ^If any prior errors have occurred while constructing the dynamic string\n in sqlite3_str X, then the [sqlite3_str_errcode(X)] method will return\n an appropriate error code.  ^The [sqlite3_str_errcode(X)] method returns\n [SQLITE_NOMEM] following any out-of-memory error, or\n [SQLITE_TOOBIG] if the size of the dynamic string exceeds\n [SQLITE_MAX_LENGTH], or [SQLITE_OK] if there have been no errors.\n\n ^The [sqlite3_str_length(X)] method returns the current length, in bytes,\n of the dynamic string under construction in [sqlite3_str] object X.\n ^The length returned by [sqlite3_str_length(X)] does not include the\n zero-termination byte.\n\n ^The [sqlite3_str_value(X)] method returns a pointer to the current\n content of the dynamic string under construction in X.  The value\n returned by [sqlite3_str_value(X)] is managed by the sqlite3_str object X\n and might be freed or altered by any subsequent method on the same\n [sqlite3_str] object.  Applications must not used the pointer returned\n [sqlite3_str_value(X)] after any subsequent method call on the same\n object.  ^Applications may change the content of the string returned\n by [sqlite3_str_value(X)] as long as they do not write into any bytes\n outside the range of 0 to [sqlite3_str_length(X)] and do not read or\n write any byte after any subsequent sqlite3_str method call.","declarations":[{"spell":"8583:16-8583:35|-1|1|1","param_spellings":["8583:48-8583:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":247,"usr":8820073467115104945,"detailed_name":"int sqlite3_str_length(sqlite3_str *)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8584:16-8584:34|-1|1|1","param_spellings":["8584:47-8584:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":248,"usr":13597548965224690013,"detailed_name":"char *sqlite3_str_value(sqlite3_str *)","short_name_offset":6,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8585:18-8585:35|-1|1|1","param_spellings":["8585:48-8585:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":249,"usr":16363737631868448085,"detailed_name":"int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: SQLite Runtime Status\n\n ^These interfaces are used to retrieve runtime status information\n about the performance of SQLite, and optionally to reset various\n highwater marks.  ^The first argument is an integer code for\n the specific parameter to measure.  ^(Recognized integer codes\n are of the form [status parameters | SQLITE_STATUS_...].)^\n ^The current value of the parameter is returned into *pCurrent.\n ^The highest recorded value is returned in *pHighwater.  ^If the\n resetFlag is true, then the highest record value is reset after\n *pHighwater is written.  ^(Some parameters do not record the highest\n value.  For those parameters\n nothing is written into *pHighwater and the resetFlag is ignored.)^\n ^(Other parameters record only the highwater mark and not the current\n value.  For these latter parameters nothing is written into *pCurrent.)^\n\n ^The sqlite3_status() and sqlite3_status64() routines return\n SQLITE_OK on success and a non-zero [error code] on failure.\n\n If either the current value or the highwater mark is too large to\n be represented by a 32-bit integer, then the values returned by\n sqlite3_status() are undefined.\n\n See also: [sqlite3_db_status()]","declarations":[{"spell":"8613:16-8613:30|-1|1|1","param_spellings":["8613:35-8613:37","8613:44-8613:52","8613:59-8613:69","8613:75-8613:84"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":250,"usr":12044378070418024619,"detailed_name":"int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"8614:16-8614:32|-1|1|1","param_spellings":["8615:7-8615:9","8616:18-8616:26","8617:18-8617:28","8618:7-8618:16"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":251,"usr":17606468613689583248,"detailed_name":"int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Database Connection Status\n METHOD: sqlite3\n\n ^This interface is used to retrieve runtime status information\n about a single [database connection].  ^The first argument is the\n database connection object to be interrogated.  ^The second argument\n is an integer constant, taken from the set of\n [SQLITE_DBSTATUS options], that\n determines the parameter to interrogate.  The set of\n [SQLITE_DBSTATUS options] is likely\n to grow in future releases of SQLite.\n\n ^The current value of the requested parameter is written into *pCur\n and the highest instantaneous value is written into *pHiwtr.  ^If\n the resetFlg is true, then the highest instantaneous value is\n reset back down to the current value.\n\n ^The sqlite3_db_status() routine returns SQLITE_OK on success and a\n non-zero [error code] on failure.\n\n See also: [sqlite3_status()] and [sqlite3_stmt_status()].","declarations":[{"spell":"8723:16-8723:33|-1|1|1","param_spellings":["8723:42-8723:42","8723:48-8723:50","8723:57-8723:61","8723:68-8723:74","8723:80-8723:88"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":252,"usr":7303254035015607697,"detailed_name":"int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Prepared Statement Status\n METHOD: sqlite3_stmt\n\n ^(Each prepared statement maintains various\n [SQLITE_STMTSTATUS counters] that measure the number\n of times it has performed specific operations.)^  These counters can\n be used to monitor the performance characteristics of the prepared\n statements.  For example, if the number of table steps greatly exceeds\n the number of table searches or result rows, that would tend to indicate\n that the prepared statement is using a full table scan rather than\n an index.\n\n ^(This interface is used to retrieve and reset counter values from\n a [prepared statement].  The first argument is the prepared statement\n object to be interrogated.  The second argument\n is an integer code for a specific [SQLITE_STMTSTATUS counter]\n to be interrogated.)^\n ^The current value of the requested counter is returned.\n ^If the resetFlg is true, then the counter is reset to zero after this\n interface call returns.\n\n See also: [sqlite3_status()] and [sqlite3_db_status()].","declarations":[{"spell":"8876:16-8876:35|-1|1|1","param_spellings":["8876:49-8876:49","8876:55-8876:57","8876:62-8876:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":253,"usr":8098672016868835205,"detailed_name":"sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)","short_name_offset":16,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Online Backup API.\n\n The backup API copies the content of one database into another.\n It is useful either for creating backups of databases or\n for copying in-memory databases to or from persistent files.\n\n See Also: [Using the SQLite Online Backup API]\n\n ^SQLite holds a write transaction open on the destination database file\n for the duration of the backup operation.\n ^The source database is read-locked only while it is being read;\n it is not locked continuously for the entire backup operation.\n ^Thus, the backup may be performed on a live source database without\n preventing other database connections from\n reading or writing to the source database while the backup is underway.\n\n ^(To perform a backup operation:\n   <ol>\n     <li><b>sqlite3_backup_init()</b> is called once to initialize the\n         backup,\n     <li><b>sqlite3_backup_step()</b> is called one or more times to transfer\n         the data between the two databases, and finally\n     <li><b>sqlite3_backup_finish()</b> is called to release all resources\n         associated with the backup operation.\n   </ol>)^\n There should be exactly one call to sqlite3_backup_finish() for each\n successful call to sqlite3_backup_init().\n\n [[sqlite3_backup_init()]] <b>sqlite3_backup_init()</b>\n\n ^The D and N arguments to sqlite3_backup_init(D,N,S,M) are the\n [database connection] associated with the destination database\n and the database name, respectively.\n ^The database name is \"main\" for the main database, \"temp\" for the\n temporary database, or the name specified after the AS keyword in\n an [ATTACH] statement for an attached database.\n ^The S and M arguments passed to\n sqlite3_backup_init(D,N,S,M) identify the [database connection]\n and database name of the source database, respectively.\n ^The source and destination [database connections] (parameters S and D)\n must be different or else sqlite3_backup_init(D,N,S,M) will fail with\n an error.\n\n ^A call to sqlite3_backup_init() will fail, returning NULL, if\n there is already a read or read-write transaction open on the\n destination database.\n\n ^If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is\n returned and an error code and error message are stored in the\n destination [database connection] D.\n ^The error code and message for the failed call to sqlite3_backup_init()\n can be retrieved using the [sqlite3_errcode()], [sqlite3_errmsg()], and/or\n [sqlite3_errmsg16()] functions.\n ^A successful call to sqlite3_backup_init() returns a pointer to an\n [sqlite3_backup] object.\n ^The [sqlite3_backup] object may be used with the sqlite3_backup_step() and\n sqlite3_backup_finish() functions to perform the specified backup\n operation.\n\n [[sqlite3_backup_step()]] <b>sqlite3_backup_step()</b>\n\n ^Function sqlite3_backup_step(B,N) will copy up to N pages between\n the source and destination databases specified by [sqlite3_backup] object B.\n ^If N is negative, all remaining source pages are copied.\n ^If sqlite3_backup_step(B,N) successfully copies N pages and there\n are still more pages to be copied, then the function returns [SQLITE_OK].\n ^If sqlite3_backup_step(B,N) successfully finishes copying all pages\n from source to destination, then it returns [SQLITE_DONE].\n ^If an error occurs while running sqlite3_backup_step(B,N),\n then an [error code] is returned. ^As well as [SQLITE_OK] and\n [SQLITE_DONE], a call to sqlite3_backup_step() may return [SQLITE_READONLY],\n [SQLITE_NOMEM], [SQLITE_BUSY], [SQLITE_LOCKED], or an\n [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] extended error code.\n\n ^(The sqlite3_backup_step() might return [SQLITE_READONLY] if\n <ol>\n <li> the destination database was opened read-only, or\n <li> the destination database is using write-ahead-log journaling\n and the destination and source page sizes differ, or\n <li> the destination database is an in-memory database and the\n destination and source page sizes differ.\n </ol>)^\n\n ^If sqlite3_backup_step() cannot obtain a required file-system lock, then\n the [sqlite3_busy_handler | busy-handler function]\n is invoked (if one is specified). ^If the\n busy-handler returns non-zero before the lock is available, then\n [SQLITE_BUSY] is returned to the caller. ^In this case the call to\n sqlite3_backup_step() can be retried later. ^If the source\n [database connection]\n is being used to write to the source database when sqlite3_backup_step()\n is called, then [SQLITE_LOCKED] is returned immediately. ^Again, in this\n case the call to sqlite3_backup_step() can be retried later on. ^(If\n [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX], [SQLITE_NOMEM], or\n [SQLITE_READONLY] is returned, then\n there is no point in retrying the call to sqlite3_backup_step(). These\n errors are considered fatal.)^  The application must accept\n that the backup operation has failed and pass the backup operation handle\n to the sqlite3_backup_finish() to release associated resources.\n\n ^The first call to sqlite3_backup_step() obtains an exclusive lock\n on the destination file. ^The exclusive lock is not released until either\n sqlite3_backup_finish() is called or the backup operation is complete\n and sqlite3_backup_step() returns [SQLITE_DONE].  ^Every call to\n sqlite3_backup_step() obtains a [shared lock] on the source database that\n lasts for the duration of the sqlite3_backup_step() call.\n ^Because the source database is not locked between calls to\n sqlite3_backup_step(), the source database may be modified mid-way\n through the backup process.  ^If the source database is modified by an\n external process or via a database connection other than the one being\n used by the backup operation, then the backup will be automatically\n restarted by the next call to sqlite3_backup_step(). ^If the source\n database is modified by the using the same database connection as is used\n by the backup operation, then the backup database is automatically\n updated at the same time.\n\n [[sqlite3_backup_finish()]] <b>sqlite3_backup_finish()</b>\n\n When sqlite3_backup_step() has returned [SQLITE_DONE], or when the\n application wishes to abandon the backup operation, the application\n should destroy the [sqlite3_backup] by passing it to sqlite3_backup_finish().\n ^The sqlite3_backup_finish() interfaces releases all\n resources associated with the [sqlite3_backup] object.\n ^If sqlite3_backup_step() has not yet returned [SQLITE_DONE], then any\n active write-transaction on the destination database is rolled back.\n The [sqlite3_backup] object is invalid\n and may not be used following a call to sqlite3_backup_finish().\n\n ^The value returned by sqlite3_backup_finish is [SQLITE_OK] if no\n sqlite3_backup_step() errors occurred, regardless or whether or not\n sqlite3_backup_step() completed.\n ^If an out-of-memory condition or IO error occurred during any prior\n sqlite3_backup_step() call on the same [sqlite3_backup] object, then\n sqlite3_backup_finish() returns the corresponding [error code].\n\n ^A return of [SQLITE_BUSY] or [SQLITE_LOCKED] from sqlite3_backup_step()\n is not a permanent error and does not affect the return value of\n sqlite3_backup_finish().\n\n [[sqlite3_backup_remaining()]] [[sqlite3_backup_pagecount()]]\n <b>sqlite3_backup_remaining() and sqlite3_backup_pagecount()</b>\n\n ^The sqlite3_backup_remaining() routine returns the number of pages still\n to be backed up at the conclusion of the most recent sqlite3_backup_step().\n ^The sqlite3_backup_pagecount() routine returns the total number of pages\n in the source database at the conclusion of the most recent\n sqlite3_backup_step().\n ^(The values returned by these functions are only updated by\n sqlite3_backup_step(). If the source database is modified in a way that\n changes the size of the source database or the number of pages remaining,\n those changes are not reflected in the output of sqlite3_backup_pagecount()\n and sqlite3_backup_remaining() until after the next\n sqlite3_backup_step().)^\n\n <b>Concurrent Usage of Database Handles</b>\n\n ^The source [database connection] may be used by the application for other\n purposes while a backup operation is underway or being initialized.\n ^If SQLite is compiled and configured to support threadsafe database\n connections, then the source database connection may be used concurrently\n from within other threads.\n\n However, the application must guarantee that the destination\n [database connection] is not passed to any other API (by any thread) after\n sqlite3_backup_init() is called and before the corresponding call to\n sqlite3_backup_finish().  SQLite does not currently check to see\n if the application incorrectly accesses the destination [database connection]\n and so no error code is reported, but the operations may malfunction\n nevertheless.  Use of the destination database connection while a\n backup is in progress might also cause a mutex deadlock.\n\n If running in [shared cache mode], the application must\n guarantee that the shared cache used by the destination database\n is not accessed while the backup is running. In practice this means\n that the application must guarantee that the disk file being\n backed up to is not accessed by any connection within the process,\n not just the specific connection that was passed to sqlite3_backup_init().\n\n The [sqlite3_backup] object itself is partially threadsafe. Multiple\n threads may safely make multiple concurrent calls to sqlite3_backup_step().\n However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount()\n APIs are not strictly speaking threadsafe. If they are invoked at the\n same time as another thread is invoking sqlite3_backup_step() it is\n possible that they return invalid values.\n\n <b>Alternatives To Using The Backup API</b>\n\n Other techniques for safely creating a consistent backup of an SQLite\n database include:\n\n <ul>\n <li> The [VACUUM INTO] command.\n <li> The [sqlite3_rsync] utility program.\n </ul>","declarations":[{"spell":"9388:28-9388:47|-1|1|1","param_spellings":["9389:12-9389:17","9390:15-9390:24","9391:12-9391:19","9392:15-9392:26"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":254,"usr":13298245430981757718,"detailed_name":"int sqlite3_backup_step(sqlite3_backup *p, int nPage)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"9394:16-9394:35|-1|1|1","param_spellings":["9394:52-9394:53","9394:59-9394:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":255,"usr":3994878155578859803,"detailed_name":"int sqlite3_backup_finish(sqlite3_backup *p)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"9395:16-9395:37|-1|1|1","param_spellings":["9395:54-9395:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":256,"usr":16381987636124766494,"detailed_name":"int sqlite3_backup_remaining(sqlite3_backup *p)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"9396:16-9396:40|-1|1|1","param_spellings":["9396:57-9396:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":257,"usr":1315595418269573628,"detailed_name":"int sqlite3_backup_pagecount(sqlite3_backup *p)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"9397:16-9397:40|-1|1|1","param_spellings":["9397:57-9397:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":258,"usr":17975543822537140287,"detailed_name":"int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*)(void **, int) xNotify, void *pNotifyArg)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Unlock Notification\n METHOD: sqlite3\n\n ^When running in shared-cache mode, a database operation may fail with\n an [SQLITE_LOCKED] error if the required locks on the shared-cache or\n individual tables within the shared-cache cannot be obtained. See\n [SQLite Shared-Cache Mode] for a description of shared-cache locking.\n ^This API may be used to register a callback that SQLite will invoke\n when the connection currently holding the required lock relinquishes it.\n ^This API is only available if the library was compiled with the\n [SQLITE_ENABLE_UNLOCK_NOTIFY] C-preprocessor symbol defined.\n\n See Also: [Using the SQLite Unlock Notification Feature].\n\n ^Shared-cache locks are released when a database connection concludes\n its current transaction, either by committing it or rolling it back.\n\n ^When a connection (known as the blocked connection) fails to obtain a\n shared-cache lock and SQLITE_LOCKED is returned to the caller, the\n identity of the database connection (the blocking connection) that\n has locked the required resource is stored internally. ^After an\n application receives an SQLITE_LOCKED error, it may call the\n sqlite3_unlock_notify() method with the blocked connection handle as\n the first argument to register for a callback that will be invoked\n when the blocking connections current transaction is concluded. ^The\n callback is invoked from within the [sqlite3_step] or [sqlite3_close]\n call that concludes the blocking connection's transaction.\n\n ^(If sqlite3_unlock_notify() is called in a multi-threaded application,\n there is a chance that the blocking connection will have already\n concluded its transaction by the time sqlite3_unlock_notify() is invoked.\n If this happens, then the specified callback is invoked immediately,\n from within the call to sqlite3_unlock_notify().)^\n\n ^If the blocked connection is attempting to obtain a write-lock on a\n shared-cache table, and more than one other connection currently holds\n a read-lock on the same table, then SQLite arbitrarily selects one of\n the other connections to use as the blocking connection.\n\n ^(There may be at most one unlock-notify callback registered by a\n blocked connection. If sqlite3_unlock_notify() is called when the\n blocked connection already has a registered unlock-notify callback,\n then the new callback replaces the old.)^ ^If sqlite3_unlock_notify() is\n called with a NULL pointer as its second argument, then any existing\n unlock-notify callback is canceled. ^The blocked connections\n unlock-notify callback may also be canceled by closing the blocked\n connection using [sqlite3_close()].\n\n The unlock-notify callback is not reentrant. If an application invokes\n any sqlite3_xxx API functions from within an unlock-notify callback, a\n crash or deadlock may be the result.\n\n ^Unless deadlock is detected (see below), sqlite3_unlock_notify() always\n returns SQLITE_OK.\n\n <b>Callback Invocation Details</b>\n\n When an unlock-notify callback is registered, the application provides a\n single void* pointer that is passed to the callback when it is invoked.\n However, the signature of the callback function allows SQLite to pass\n it an array of void* context pointers. The first argument passed to\n an unlock-notify callback is a pointer to an array of void* pointers,\n and the second is the number of entries in the array.\n\n When a blocking connection's transaction is concluded, there may be\n more than one blocked connection that has registered for an unlock-notify\n callback. ^If two or more such blocked connections have specified the\n same callback function, then instead of invoking the callback function\n multiple times, it is invoked once with the set of void* context pointers\n specified by the blocked connections bundled together into an array.\n This gives the application an opportunity to prioritize any actions\n related to the set of unblocked database connections.\n\n <b>Deadlock Detection</b>\n\n Assuming that after registering for an unlock-notify callback a\n database waits for the callback to be issued before taking any further\n action (a reasonable assumption), then using this API may cause the\n application to deadlock. For example, if connection X is waiting for\n connection Y's transaction to be concluded, and similarly connection\n Y is waiting on connection X's transaction, then neither connection\n will proceed and the system may remain deadlocked indefinitely.\n\n To avoid this scenario, the sqlite3_unlock_notify() performs deadlock\n detection. ^If a given call to sqlite3_unlock_notify() would put the\n system in a deadlocked state, then SQLITE_LOCKED is returned and no\n unlock-notify callback is registered. The system is said to be in\n a deadlocked state if connection A has registered for an unlock-notify\n callback on the conclusion of connection B's transaction, and connection\n B has itself registered for an unlock-notify callback when connection\n A's transaction is concluded. ^Indirect deadlock is also detected, so\n the system is also considered to be deadlocked if connection B has\n registered for an unlock-notify callback on the conclusion of connection\n C's transaction, where connection C is waiting on connection A. ^Any\n number of levels of indirection are allowed.\n\n <b>The \"DROP TABLE\" Exception</b>\n\n When a call to [sqlite3_step()] returns SQLITE_LOCKED, it is almost\n always appropriate to call sqlite3_unlock_notify(). There is however,\n one exception. When executing a \"DROP TABLE\" or \"DROP INDEX\" statement,\n SQLite checks if there are any currently executing SELECT statements\n that belong to the same connection. If there are, SQLITE_LOCKED is\n returned. In this case there is no \"blocking connection\", so invoking\n sqlite3_unlock_notify() results in the unlock-notify callback being\n invoked immediately. If the application then re-attempts the \"DROP TABLE\"\n or \"DROP INDEX\" query, an infinite loop might be the result.\n\n One way around this problem is to check the extended error code returned\n by an sqlite3_step() call. ^(If there is a blocking connection, then the\n extended error code is set to SQLITE_LOCKED_SHAREDCACHE. Otherwise, in\n the special \"DROP TABLE/INDEX\" case, the extended error code is just\n SQLITE_LOCKED.)^","declarations":[{"spell":"9514:16-9514:37|-1|1|1","param_spellings":["9515:12-9515:20","9516:10-9516:17","9517:9-9517:19"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":259,"usr":3874101771640736783,"detailed_name":"int sqlite3_stricmp(const char *, const char *)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: String Comparison\n\n ^The [sqlite3_stricmp()] and [sqlite3_strnicmp()] APIs allow applications\n and extensions to compare the contents of two buffers containing UTF-8\n strings in a case-independent fashion, using the same definition of \"case\n independence\" that SQLite uses internally when comparing identifiers.","declarations":[{"spell":"9529:16-9529:31|-1|1|1","param_spellings":["9529:44-9529:44","9529:58-9529:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":260,"usr":12288551792948852178,"detailed_name":"int sqlite3_strnicmp(const char *, const char *, int)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"9530:16-9530:32|-1|1|1","param_spellings":["9530:45-9530:45","9530:59-9530:59","9530:64-9530:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":261,"usr":7622960294065708601,"detailed_name":"int sqlite3_strglob(const char *zGlob, const char *zStr)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: String Globbing\n\n ^The [sqlite3_strglob(P,X)] interface returns zero if and only if\n string X matches the [GLOB] pattern P.\n ^The definition of [GLOB] pattern matching used in\n [sqlite3_strglob(P,X)] is the same as for the \"X GLOB P\" operator in the\n SQL dialect understood by SQLite.  ^The [sqlite3_strglob(P,X)] function\n is case sensitive.\n\n Note that this routine returns zero on a match and non-zero if the strings\n do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].\n\n See also: [sqlite3_strlike()].","declarations":[{"spell":"9547:16-9547:31|-1|1|1","param_spellings":["9547:44-9547:49","9547:63-9547:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":262,"usr":2882124017314900305,"detailed_name":"int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: String LIKE Matching\n\n ^The [sqlite3_strlike(P,X,E)] interface returns zero if and only if\n string X matches the [LIKE] pattern P with escape character E.\n ^The definition of [LIKE] pattern matching used in\n [sqlite3_strlike(P,X,E)] is the same as for the \"X LIKE P ESCAPE E\"\n operator in the SQL dialect understood by SQLite.  ^For \"X LIKE P\" without\n the ESCAPE clause, set the E parameter of [sqlite3_strlike(P,X,E)] to 0.\n ^As with the LIKE operator, the [sqlite3_strlike(P,X,E)] function is case\n insensitive - equivalent upper and lower case ASCII characters match\n one another.\n\n ^The [sqlite3_strlike(P,X,E)] function matches Unicode characters, though\n only ASCII characters are case folded.\n\n Note that this routine returns zero on a match and non-zero if the strings\n do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].\n\n See also: [sqlite3_strglob()].","declarations":[{"spell":"9570:16-9570:31|-1|1|1","param_spellings":["9570:44-9570:49","9570:63-9570:67","9570:82-9570:86"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":263,"usr":11336731429278937653,"detailed_name":"void sqlite3_log(int iErrCode, const char *zFormat, ...)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Error Logging Interface\n\n ^The [sqlite3_log()] interface writes a message into the [error log]\n established by the [SQLITE_CONFIG_LOG] option to [sqlite3_config()].\n ^If logging is enabled, the zFormat string and subsequent arguments are\n used with [sqlite3_snprintf()] to generate the final output string.\n\n The sqlite3_log() interface is intended for use by extensions such as\n virtual tables, collating functions, and SQL functions.  While there is\n nothing to prevent an application from calling sqlite3_log(), doing so\n is considered bad form.\n\n The zFormat string must not be NULL.\n\n To avoid deadlocks and other threading problems, the sqlite3_log() routine\n will not use dynamically allocated memory.  The log message is stored in\n a fixed-length buffer on the stack.  If the log message is longer than\n a few hundred characters, it will be truncated to the length of the\n buffer.","declarations":[{"spell":"9593:17-9593:28|-1|1|1","param_spellings":["9593:33-9593:41","9593:55-9593:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":264,"usr":1565834577367783888,"detailed_name":"void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, int), void *)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Write-Ahead Log Commit Hook\n METHOD: sqlite3\n\n ^The [sqlite3_wal_hook()] function is used to register a callback that\n is invoked each time data is committed to a database in wal mode.\n\n ^(The callback is invoked by SQLite after the commit has taken place and\n the associated write-lock on the database released)^, so the implementation\n may read, write or [checkpoint] the database as required.\n\n ^The first parameter passed to the callback function when it is invoked\n is a copy of the third parameter passed to sqlite3_wal_hook() when\n registering the callback. ^The second is a copy of the database handle.\n ^The third parameter is the name of the database that was written to -\n either \"main\" or the name of an [ATTACH]-ed database. ^The fourth parameter\n is the number of pages currently in the write-ahead log file,\n including those that were just committed.\n\n The callback function should normally return [SQLITE_OK].  ^If an error\n code is returned, that error will propagate back up through the\n SQLite code base to cause the statement that provoked the callback\n to report an error, though the commit will have still occurred. If the\n callback returns [SQLITE_ROW] or [SQLITE_DONE], or if it returns a value\n that does not correspond to any valid SQLite error code, the results\n are undefined.\n\n A single database handle may have at most a single write-ahead log callback\n registered at one time. ^Calling [sqlite3_wal_hook()] replaces any\n previously registered write-ahead log callback. ^The return value is\n a copy of the third parameter from the previous call, if any, or 0.\n ^Note that the [sqlite3_wal_autocheckpoint()] interface and the\n [wal_autocheckpoint pragma] both invoke [sqlite3_wal_hook()] and will\n overwrite any prior [sqlite3_wal_hook()] settings.","declarations":[{"spell":"9630:18-9630:34|-1|1|1","param_spellings":["9631:11-9631:11","9632:8-9632:8","9634:1-9634:1"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":265,"usr":14442148747112266796,"detailed_name":"int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Configure an auto-checkpoint\n METHOD: sqlite3\n\n ^The [sqlite3_wal_autocheckpoint(D,N)] is a wrapper around\n [sqlite3_wal_hook()] that causes any database on [database connection] D\n to automatically [checkpoint]\n after committing a transaction if there are N or\n more frames in the [write-ahead log] file.  ^Passing zero or\n a negative value as the nFrame parameter disables automatic\n checkpoints entirely.\n\n ^The callback registered by this function replaces any existing callback\n registered using [sqlite3_wal_hook()].  ^Likewise, registering a callback\n using [sqlite3_wal_hook()] disables the automatic checkpoint mechanism\n configured by this function.\n\n ^The [wal_autocheckpoint pragma] can be used to invoke this interface\n from SQL.\n\n ^Checkpoints initiated by this mechanism are\n [sqlite3_wal_checkpoint_v2|PASSIVE].\n\n ^Every new [database connection] defaults to having the auto-checkpoint\n enabled with a threshold of 1000 or [SQLITE_DEFAULT_WAL_AUTOCHECKPOINT]\n pages.  The use of this interface\n is only necessary if the default setting is found to be suboptimal\n for a particular application.","declarations":[{"spell":"9665:16-9665:42|-1|1|1","param_spellings":["9665:52-9665:54","9665:60-9665:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":266,"usr":1784297687544002431,"detailed_name":"int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Checkpoint a database\n METHOD: sqlite3\n\n ^(The sqlite3_wal_checkpoint(D,X) is equivalent to\n [sqlite3_wal_checkpoint_v2](D,X,[SQLITE_CHECKPOINT_PASSIVE],0,0).)^\n\n In brief, sqlite3_wal_checkpoint(D,X) causes the content in the\n [write-ahead log] for database X on [database connection] D to be\n transferred into the database file and for the write-ahead log to\n be reset.  See the [checkpointing] documentation for addition\n information.\n\n This interface used to be the only way to cause a checkpoint to\n occur.  But then the newer and more powerful [sqlite3_wal_checkpoint_v2()]\n interface was added.  This interface is retained for backwards\n compatibility and as a convenience for applications that need to manually\n start a callback but which do not need the full power (and corresponding\n complication) of [sqlite3_wal_checkpoint_v2()].","declarations":[{"spell":"9687:16-9687:38|-1|1|1","param_spellings":["9687:48-9687:50","9687:64-9687:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":267,"usr":1388865392312101171,"detailed_name":"int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Checkpoint a database\n METHOD: sqlite3\n\n ^(The sqlite3_wal_checkpoint_v2(D,X,M,L,C) interface runs a checkpoint\n operation on database X of [database connection] D in mode M.  Status\n information is written back into integers pointed to by L and C.)^\n ^(The M parameter must be a valid [checkpoint mode]:)^\n\n <dl>\n <dt>SQLITE_CHECKPOINT_PASSIVE<dd>\n   ^Checkpoint as many frames as possible without waiting for any database\n   readers or writers to finish, then sync the database file if all frames\n   in the log were checkpointed. ^The [busy-handler callback]\n   is never invoked in the SQLITE_CHECKPOINT_PASSIVE mode.\n   ^On the other hand, passive mode might leave the checkpoint unfinished\n   if there are concurrent readers or writers.\n\n <dt>SQLITE_CHECKPOINT_FULL<dd>\n   ^This mode blocks (it invokes the\n   [sqlite3_busy_handler|busy-handler callback]) until there is no\n   database writer and all readers are reading from the most recent database\n   snapshot. ^It then checkpoints all frames in the log file and syncs the\n   database file. ^This mode blocks new database writers while it is pending,\n   but new database readers are allowed to continue unimpeded.\n\n <dt>SQLITE_CHECKPOINT_RESTART<dd>\n   ^This mode works the same way as SQLITE_CHECKPOINT_FULL with the addition\n   that after checkpointing the log file it blocks (calls the\n   [busy-handler callback])\n   until all readers are reading from the database file only. ^This ensures\n   that the next writer will restart the log file from the beginning.\n   ^Like SQLITE_CHECKPOINT_FULL, this mode blocks new\n   database writer attempts while it is pending, but does not impede readers.\n\n <dt>SQLITE_CHECKPOINT_TRUNCATE<dd>\n   ^This mode works the same way as SQLITE_CHECKPOINT_RESTART with the\n   addition that it also truncates the log file to zero bytes just prior\n   to a successful return.\n </dl>\n\n ^If pnLog is not NULL, then *pnLog is set to the total number of frames in\n the log file or to -1 if the checkpoint could not run because\n of an error or because the database is not in [WAL mode]. ^If pnCkpt is not\n NULL,then *pnCkpt is set to the total number of checkpointed frames in the\n log file (including any that were already checkpointed before the function\n was called) or to -1 if the checkpoint could not run due to an error or\n because the database is not in WAL mode. ^Note that upon successful\n completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been\n truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.\n\n ^All calls obtain an exclusive \"checkpoint\" lock on the database file. ^If\n any other process is running a checkpoint operation at the same time, the\n lock cannot be obtained and SQLITE_BUSY is returned. ^Even if there is a\n busy-handler configured, it will not be invoked in this case.\n\n ^The SQLITE_CHECKPOINT_FULL, RESTART and TRUNCATE modes also obtain the\n exclusive \"writer\" lock on the database file. ^If the writer lock cannot be\n obtained immediately, and a busy-handler is configured, it is invoked and\n the writer lock retried until either the busy-handler returns 0 or the lock\n is successfully obtained. ^The busy-handler is also invoked while waiting for\n database readers as described above. ^If the busy-handler returns 0 before\n the writer lock is obtained or while waiting for database readers, the\n checkpoint operation proceeds from that point in the same way as\n SQLITE_CHECKPOINT_PASSIVE - checkpointing as many frames as possible\n without blocking any further. ^SQLITE_BUSY is returned in this case.\n\n ^If parameter zDb is NULL or points to a zero length string, then the\n specified operation is attempted on all WAL databases [attached] to\n [database connection] db.  In this case the\n values written to output parameters *pnLog and *pnCkpt are undefined. ^If\n an SQLITE_BUSY error is encountered when processing one or more of the\n attached WAL databases, the operation is still attempted on any remaining\n attached databases and SQLITE_BUSY is returned at the end. ^If any other\n error occurs while processing an attached database, processing is abandoned\n and the error code is returned to the caller immediately. ^If no error\n (SQLITE_BUSY or otherwise) is encountered while processing the attached\n databases, SQLITE_OK is returned.\n\n ^If database zDb is the name of an attached database that is not in WAL\n mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. ^If\n zDb is not NULL (or a zero length string) and is not the name of any\n attached database, SQLITE_ERROR is returned to the caller.\n\n ^Unless it returns SQLITE_MISUSE,\n the sqlite3_wal_checkpoint_v2() interface\n sets the error information that is queried by\n [sqlite3_errcode()] and [sqlite3_errmsg()].\n\n ^The [PRAGMA wal_checkpoint] command can be used to invoke this interface\n from SQL.","declarations":[{"spell":"9781:16-9781:41|-1|1|1","param_spellings":["9782:12-9782:14","9783:15-9783:18","9784:7-9784:12","9785:8-9785:13","9786:8-9786:14"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":268,"usr":3740935057291295754,"detailed_name":"int sqlite3_vtab_config(sqlite3 *, int op, ...)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Virtual Table Interface Configuration\n\n This function may be called by either the [xConnect] or [xCreate] method\n of a [virtual table] implementation to configure\n various facets of the virtual table interface.\n\n If this interface is invoked outside the context of an xConnect or\n xCreate virtual table method then the behavior is undefined.\n\n In the call sqlite3_vtab_config(D,C,...) the D parameter is the\n [database connection] in which the virtual table is being created and\n which is passed in as the first argument to the [xConnect] or [xCreate]\n method that is invoking sqlite3_vtab_config().  The C parameter is one\n of the [virtual table configuration options].  The presence and meaning\n of parameters after C depend on which [virtual table configuration option]\n is used.","declarations":[{"spell":"9821:16-9821:35|-1|1|1","param_spellings":["9821:44-9821:44","9821:50-9821:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":269,"usr":6591125053849201874,"detailed_name":"int sqlite3_vtab_on_conflict(sqlite3 *)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine The Virtual Table Conflict Policy\n\n This function may only be called from within a call to the [xUpdate] method\n of a [virtual table] implementation for an INSERT or UPDATE operation. ^The\n value returned is one of [SQLITE_ROLLBACK], [SQLITE_IGNORE], [SQLITE_FAIL],\n [SQLITE_ABORT], or [SQLITE_REPLACE], according to the [ON CONFLICT] mode\n of the SQL statement that triggered the call to the [xUpdate] method of the\n [virtual table].","declarations":[{"spell":"9909:16-9909:40|-1|1|1","param_spellings":["9909:50-9909:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":270,"usr":14763851353236021877,"detailed_name":"int sqlite3_vtab_nochange(sqlite3_context *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine If Virtual Table Column Access Is For UPDATE\n\n If the sqlite3_vtab_nochange(X) routine is called within the [xColumn]\n method of a [virtual table], then it might return true if the\n column is being fetched as part of an UPDATE operation during which the\n column value will not change.  The virtual table implementation can use\n this hint as permission to substitute a return value that is less\n expensive to compute and that the corresponding\n [xUpdate] method understands as a \"no-change\" value.\n\n If the [xColumn] method calls sqlite3_vtab_nochange() and finds that\n the column is not changed by the UPDATE statement, then the xColumn\n method can optionally return without setting a result, without calling\n any of the [sqlite3_result_int|sqlite3_result_xxxxx() interfaces].\n In that case, [sqlite3_value_nochange(X)] will return true for the\n same column in the [xUpdate] method.\n\n The sqlite3_vtab_nochange() routine is an optimization.  Virtual table\n implementations should continue to give a correct answer even if the\n sqlite3_vtab_nochange() interface were to always return false.  In the\n current implementation, the sqlite3_vtab_nochange() interface does always\n returns false for the enhanced [UPDATE FROM] statement.","declarations":[{"spell":"9935:16-9935:37|-1|1|1","param_spellings":["9935:54-9935:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":271,"usr":16584644579832485995,"detailed_name":"const char *sqlite3_vtab_collation(sqlite3_index_info *, int)","short_name_offset":12,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine The Collation For a Virtual Table Constraint\n METHOD: sqlite3_index_info\n\n This function may only be called from within a call to the [xBestIndex]\n method of a [virtual table].  This function returns a pointer to a string\n that is the name of the appropriate collation sequence to use for text\n comparisons on the constraint identified by its arguments.\n\n The first argument must be the pointer to the [sqlite3_index_info] object\n that is the first parameter to the xBestIndex() method. The second argument\n must be an index into the aConstraint[] array belonging to the\n sqlite3_index_info structure passed to xBestIndex.\n\n Important:\n The first parameter must be the same pointer that is passed into the\n xBestMethod() method.  The first parameter may not be a pointer to a\n different [sqlite3_index_info] object, even an exact copy.\n\n The return value is computed as follows:\n\n <ol>\n <li><p> If the constraint comes from a WHERE clause expression that contains\n         a [COLLATE operator], then the name of the collation specified by\n         that COLLATE operator is returned.\n <li><p> If there is no COLLATE operator, but the column that is the subject\n         of the constraint specifies an alternative collating sequence via\n         a [COLLATE clause] on the column definition within the CREATE TABLE\n         statement that was passed into [sqlite3_declare_vtab()], then the\n         name of that alternative collating sequence is returned.\n <li><p> Otherwise, \"BINARY\" is returned.\n </ol>","declarations":[{"spell":"9970:24-9970:46|-1|1|1","param_spellings":["9970:66-9970:66","9970:70-9970:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":272,"usr":3758552721244124513,"detailed_name":"int sqlite3_vtab_distinct(sqlite3_index_info *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Determine if a virtual table query is DISTINCT\n METHOD: sqlite3_index_info\n\n This API may only be used from within an [xBestIndex|xBestIndex method]\n of a [virtual table] implementation. The result of calling this\n interface from outside of xBestIndex() is undefined and probably harmful.\n\n ^The sqlite3_vtab_distinct() interface returns an integer between 0 and\n 3.  The integer returned by sqlite3_vtab_distinct()\n gives the virtual table additional information about how the query\n planner wants the output to be ordered. As long as the virtual table\n can meet the ordering requirements of the query planner, it may set\n the \"orderByConsumed\" flag.\n\n <ol><li value=\"0\"><p>\n ^If the sqlite3_vtab_distinct() interface returns 0, that means\n that the query planner needs the virtual table to return all rows in the\n sort order defined by the \"nOrderBy\" and \"aOrderBy\" fields of the\n [sqlite3_index_info] object.  This is the default expectation.  If the\n virtual table outputs all rows in sorted order, then it is always safe for\n the xBestIndex method to set the \"orderByConsumed\" flag, regardless of\n the return value from sqlite3_vtab_distinct().\n <li value=\"1\"><p>\n ^(If the sqlite3_vtab_distinct() interface returns 1, that means\n that the query planner does not need the rows to be returned in sorted order\n as long as all rows with the same values in all columns identified by the\n \"aOrderBy\" field are adjacent.)^  This mode is used when the query planner\n is doing a GROUP BY.\n <li value=\"2\"><p>\n ^(If the sqlite3_vtab_distinct() interface returns 2, that means\n that the query planner does not need the rows returned in any particular\n order, as long as rows with the same values in all columns identified\n by \"aOrderBy\" are adjacent.)^  ^(Furthermore, when two or more rows\n contain the same values for all columns identified by \"colUsed\", all but\n one such row may optionally be omitted from the result.)^\n The virtual table is not required to omit rows that are duplicates\n over the \"colUsed\" columns, but if the virtual table can do that without\n too much extra effort, it could potentially help the query to run faster.\n This mode is used for a DISTINCT query.\n <li value=\"3\"><p>\n ^(If the sqlite3_vtab_distinct() interface returns 3, that means the\n virtual table must return rows in the order defined by \"aOrderBy\" as\n if the sqlite3_vtab_distinct() interface had returned 0.  However if\n two or more rows in the result have the same values for all columns\n identified by \"colUsed\", then all but one such row may optionally be\n omitted.)^  Like when the return value is 2, the virtual table\n is not required to omit rows that are duplicates over the \"colUsed\"\n columns, but if the virtual table can do that without\n too much extra effort, it could potentially help the query to run faster.\n This mode is used for queries\n that have both DISTINCT and ORDER BY clauses.\n </ol>\n\n <p>The following table summarizes the conditions under which the\n virtual table is allowed to set the \"orderByConsumed\" flag based on\n the value returned by sqlite3_vtab_distinct().  This table is a\n restatement of the previous four paragraphs:\n\n <table border=1 cellspacing=0 cellpadding=10 width=\"90%\">\n <tr>\n <td valign=\"top\">sqlite3_vtab_distinct() return value\n <td valign=\"top\">Rows are returned in aOrderBy order\n <td valign=\"top\">Rows with the same value in all aOrderBy columns are adjacent\n <td valign=\"top\">Duplicates over all colUsed columns may be omitted\n <tr><td>0<td>yes<td>yes<td>no\n <tr><td>1<td>no<td>yes<td>no\n <tr><td>2<td>no<td>yes<td>yes\n <tr><td>3<td>yes<td>yes<td>yes\n </table>\n\n ^For the purposes of comparing virtual table output values to see if the\n values are same value for sorting purposes, two NULL values are considered\n to be the same.  In other words, the comparison operator is \"IS\"\n (or \"IS NOT DISTINCT FROM\") and not \"==\".\n\n If a virtual table implementation is unable to meet the requirements\n specified above, then it must not set the \"orderByConsumed\" flag in the\n [sqlite3_index_info] object or an incorrect answer may result.\n\n ^A virtual table implementation is always free to return rows in any order\n it wants, as long as the \"orderByConsumed\" flag is not set.  ^When the\n the \"orderByConsumed\" flag is unset, the query planner will add extra\n [bytecode] to ensure that the final results returned by the SQL query are\n ordered correctly.  The use of the \"orderByConsumed\" flag and the\n sqlite3_vtab_distinct() interface is merely an optimization.  ^Careful\n use of the sqlite3_vtab_distinct() interface and the \"orderByConsumed\"\n flag might help queries against a virtual table to run faster.  Being\n overly aggressive and setting the \"orderByConsumed\" flag when it is not\n valid to do so, on the other hand, might cause SQLite to return incorrect\n results.","declarations":[{"spell":"10064:16-10064:37|-1|1|1","param_spellings":["10064:57-10064:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":273,"usr":6130631659332609558,"detailed_name":"int sqlite3_vtab_in(sqlite3_index_info *, int iCons, int bHandle)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Identify and handle IN constraints in xBestIndex\n\n This interface may only be used from within an\n [xBestIndex|xBestIndex() method] of a [virtual table] implementation.\n The result of invoking this interface from any other context is\n undefined and probably harmful.\n\n ^(A constraint on a virtual table of the form\n \"[IN operator|column IN (...)]\" is\n communicated to the xBestIndex method as a\n [SQLITE_INDEX_CONSTRAINT_EQ] constraint.)^  If xBestIndex wants to use\n this constraint, it must set the corresponding\n aConstraintUsage[].argvIndex to a positive integer.  ^(Then, under\n the usual mode of handling IN operators, SQLite generates [bytecode]\n that invokes the [xFilter|xFilter() method] once for each value\n on the right-hand side of the IN operator.)^  Thus the virtual table\n only sees a single value from the right-hand side of the IN operator\n at a time.\n\n In some cases, however, it would be advantageous for the virtual\n table to see all values on the right-hand of the IN operator all at\n once.  The sqlite3_vtab_in() interfaces facilitates this in two ways:\n\n <ol>\n <li><p>\n   ^A call to sqlite3_vtab_in(P,N,-1) will return true (non-zero)\n   if and only if the [sqlite3_index_info|P->aConstraint][N] constraint\n   is an [IN operator] that can be processed all at once.  ^In other words,\n   sqlite3_vtab_in() with -1 in the third argument is a mechanism\n   by which the virtual table can ask SQLite if all-at-once processing\n   of the IN operator is even possible.\n\n <li><p>\n   ^A call to sqlite3_vtab_in(P,N,F) with F==1 or F==0 indicates\n   to SQLite that the virtual table does or does not want to process\n   the IN operator all-at-once, respectively.  ^Thus when the third\n   parameter (F) is non-negative, this interface is the mechanism by\n   which the virtual table tells SQLite how it wants to process the\n   IN operator.\n </ol>\n\n ^The sqlite3_vtab_in(P,N,F) interface can be invoked multiple times\n within the same xBestIndex method call.  ^For any given P,N pair,\n the return value from sqlite3_vtab_in(P,N,F) will always be the same\n within the same xBestIndex call.  ^If the interface returns true\n (non-zero), that means that the constraint is an IN operator\n that can be processed all-at-once.  ^If the constraint is not an IN\n operator or cannot be processed all-at-once, then the interface returns\n false.\n\n ^(All-at-once processing of the IN operator is selected if both of the\n following conditions are met:\n\n <ol>\n <li><p> The P->aConstraintUsage[N].argvIndex value is set to a positive\n integer.  This is how the virtual table tells SQLite that it wants to\n use the N-th constraint.\n\n <li><p> The last call to sqlite3_vtab_in(P,N,F) for which F was\n non-negative had F>=1.\n </ol>)^\n\n ^If either or both of the conditions above are false, then SQLite uses\n the traditional one-at-a-time processing strategy for the IN constraint.\n ^If both conditions are true, then the argvIndex-th parameter to the\n xFilter method will be an [sqlite3_value] that appears to be NULL,\n but which can be passed to [sqlite3_vtab_in_first()] and\n [sqlite3_vtab_in_next()] to find all values on the right-hand side\n of the IN constraint.","declarations":[{"spell":"10137:16-10137:31|-1|1|1","param_spellings":["10137:51-10137:51","10137:57-10137:62","10137:68-10137:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":274,"usr":14288846557495912285,"detailed_name":"int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Find all elements on the right-hand side of an IN constraint.\n\n These interfaces are only useful from within the\n [xFilter|xFilter() method] of a [virtual table] implementation.\n The result of invoking these interfaces from any other context\n is undefined and probably harmful.\n\n The X parameter in a call to sqlite3_vtab_in_first(X,P) or\n sqlite3_vtab_in_next(X,P) should be one of the parameters to the\n xFilter method which invokes these routines, and specifically\n a parameter that was previously selected for all-at-once IN constraint\n processing use the [sqlite3_vtab_in()] interface in the\n [xBestIndex|xBestIndex method].  ^(If the X parameter is not\n an xFilter argument that was selected for all-at-once IN constraint\n processing, then these routines return [SQLITE_ERROR].)^\n\n ^(Use these routines to access all values on the right-hand side\n of the IN constraint using code like the following:\n\n <blockquote><pre>\n &nbsp;  for(rc=sqlite3_vtab_in_first(pList, &pVal);\n &nbsp;      rc==SQLITE_OK && pVal;\n &nbsp;      rc=sqlite3_vtab_in_next(pList, &pVal)\n &nbsp;  ){\n &nbsp;    // do something with pVal\n &nbsp;  }\n &nbsp;  if( rc!=SQLITE_OK ){\n &nbsp;    // an error has occurred\n &nbsp;  }\n </pre></blockquote>)^\n\n ^On success, the sqlite3_vtab_in_first(X,P) and sqlite3_vtab_in_next(X,P)\n routines return SQLITE_OK and set *P to point to the first or next value\n on the RHS of the IN constraint.  ^If there are no more values on the\n right hand side of the IN constraint, then *P is set to NULL and these\n routines return [SQLITE_DONE].  ^The return value might be\n some other value, such as SQLITE_NOMEM, in the event of a malfunction.\n\n The *ppOut values returned by these routines are only valid until the\n next call to either of these routines or until the end of the xFilter\n method from which these routines were called.  If the virtual table\n implementation needs to retain the *ppOut values for longer, it must make\n copies.  The *ppOut values are [protected sqlite3_value|protected].","declarations":[{"spell":"10184:16-10184:37|-1|1|1","param_spellings":["10184:53-10184:57","10184:75-10184:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":275,"usr":13465297065792328095,"detailed_name":"int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"10185:16-10185:36|-1|1|1","param_spellings":["10185:52-10185:56","10185:74-10185:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":276,"usr":4468313211146148632,"detailed_name":"int sqlite3_vtab_rhs_value(sqlite3_index_info *, int, sqlite3_value **ppVal)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Constraint values in xBestIndex()\n METHOD: sqlite3_index_info\n\n This API may only be used from within the [xBestIndex|xBestIndex method]\n of a [virtual table] implementation. The result of calling this interface\n from outside of an xBestIndex method are undefined and probably harmful.\n\n ^When the sqlite3_vtab_rhs_value(P,J,V) interface is invoked from within\n the [xBestIndex] method of a [virtual table] implementation, with P being\n a copy of the [sqlite3_index_info] object pointer passed into xBestIndex and\n J being a 0-based index into P->aConstraint[], then this routine\n attempts to set *V to the value of the right-hand operand of\n that constraint if the right-hand operand is known.  ^If the\n right-hand operand is not known, then *V is set to a NULL pointer.\n ^The sqlite3_vtab_rhs_value(P,J,V) interface returns SQLITE_OK if\n and only if *V is set to a value.  ^The sqlite3_vtab_rhs_value(P,J,V)\n inteface returns SQLITE_NOTFOUND if the right-hand side of the J-th\n constraint is not available.  ^The sqlite3_vtab_rhs_value() interface\n can return an result code other than SQLITE_OK or SQLITE_NOTFOUND if\n something goes wrong.\n\n The sqlite3_vtab_rhs_value() interface is usually only successful if\n the right-hand operand of a constraint is a literal value in the original\n SQL statement.  If the right-hand operand is an expression or a reference\n to some other column or a [host parameter], then sqlite3_vtab_rhs_value()\n will probably return [SQLITE_NOTFOUND].\n\n ^(Some constraints, such as [SQLITE_INDEX_CONSTRAINT_ISNULL] and\n [SQLITE_INDEX_CONSTRAINT_ISNOTNULL], have no right-hand operand.  For such\n constraints, sqlite3_vtab_rhs_value() always returns SQLITE_NOTFOUND.)^\n\n ^The [sqlite3_value] object returned in *V is a protected sqlite3_value\n and remains valid for the duration of the xBestIndex method call.\n ^When xBestIndex returns, the sqlite3_value object returned by\n sqlite3_vtab_rhs_value() is automatically deallocated.\n\n The \"_rhs_\" in the name of this routine is an abbreviation for\n \"Right-Hand Side\".","declarations":[{"spell":"10227:16-10227:38|-1|1|1","param_spellings":["10227:58-10227:58","10227:63-10227:63","10227:81-10227:86"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":277,"usr":3738294550397167649,"detailed_name":"int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Prepared Statement Scan Status\n METHOD: sqlite3_stmt\n\n These interfaces return information about the predicted and measured\n performance for pStmt.  Advanced applications can use this\n interface to compare the predicted and the measured performance and\n issue warnings and/or rerun [ANALYZE] if discrepancies are found.\n\n Since this interface is expected to be rarely used, it is only\n available if SQLite is compiled using the [SQLITE_ENABLE_STMT_SCANSTATUS]\n compile-time option.\n\n The \"iScanStatusOp\" parameter determines which status information to return.\n The \"iScanStatusOp\" must be one of the [scanstatus options] or the behavior\n of this interface is undefined. ^The requested measurement is written into\n a variable pointed to by the \"pOut\" parameter.\n\n The \"flags\" parameter must be passed a mask of flags. At present only\n one flag is defined - SQLITE_SCANSTAT_COMPLEX. If SQLITE_SCANSTAT_COMPLEX\n is specified, then status information is available for all elements\n of a query plan that are reported by \"EXPLAIN QUERY PLAN\" output. If\n SQLITE_SCANSTAT_COMPLEX is not specified, then only query plan elements\n that correspond to query loops (the \"SCAN...\" and \"SEARCH...\" elements of\n the EXPLAIN QUERY PLAN output) are available. Invoking API\n sqlite3_stmt_scanstatus() is equivalent to calling\n sqlite3_stmt_scanstatus_v2() with a zeroed flags parameter.\n\n Parameter \"idx\" identifies the specific query element to retrieve statistics\n for. Query elements are numbered starting from zero. A value of -1 may be\n to query for statistics regarding the entire query. ^If idx is out of range\n - less than -1 or greater than or equal to the total number of query\n elements used to implement the statement - a non-zero value is returned and\n the variable that pOut points to is unchanged.\n\n See also: [sqlite3_stmt_scanstatus_reset()]","declarations":[{"spell":"10356:16-10356:39|-1|1|1","param_spellings":["10357:17-10357:22","10358:7-10358:10","10359:7-10359:20","10360:9-10360:13"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":278,"usr":18089512189931707226,"detailed_name":"int sqlite3_stmt_scanstatus_v2(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, int flags, void *pOut)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"10362:16-10362:42|-1|1|1","param_spellings":["10363:17-10363:22","10364:7-10364:10","10365:7-10365:20","10366:7-10366:12","10367:9-10367:13"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":279,"usr":1255164437461271030,"detailed_name":"void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Zero Scan-Status Counters\n METHOD: sqlite3_stmt\n\n ^Zero all [sqlite3_stmt_scanstatus()] related event counters.\n\n This API is only available if the library is built with pre-processor\n symbol [SQLITE_ENABLE_STMT_SCANSTATUS] defined.","declarations":[{"spell":"10385:17-10385:46|-1|1|1","param_spellings":["10385:60-10385:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":280,"usr":10643243144053450678,"detailed_name":"int sqlite3_db_cacheflush(sqlite3 *)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Flush caches to disk mid-transaction\n METHOD: sqlite3\n\n ^If a write-transaction is open on [database connection] D when the\n [sqlite3_db_cacheflush(D)] interface invoked, any dirty\n pages in the pager-cache that are not currently in use are written out\n to disk. A dirty page may be in use if a database cursor created by an\n active SQL statement is reading from it, or if it is page 1 of a database\n file (page 1 is always \"in use\").  ^The [sqlite3_db_cacheflush(D)]\n interface flushes caches for all schemas - \"main\", \"temp\", and\n any [attached] databases.\n\n ^If this function needs to obtain extra database locks before dirty pages\n can be flushed to disk, it does so. ^If those locks cannot be obtained\n immediately and there is a busy-handler callback configured, it is invoked\n in the usual manner. ^If the required lock still cannot be obtained, then\n the database is skipped and an attempt made to flush any dirty pages\n belonging to the next (if any) database. ^If any databases are skipped\n because locks cannot be obtained, but no other error occurs, this\n function returns SQLITE_BUSY.\n\n ^If any other error occurs while flushing dirty pages to disk (for\n example an IO error or out-of-memory condition), then processing is\n abandoned and an SQLite [error code] is returned to the caller immediately.\n\n ^Otherwise, if no error occurs, [sqlite3_db_cacheflush()] returns SQLITE_OK.\n\n ^This function does not set the database handle error code or message\n returned by the [sqlite3_errcode()] and [sqlite3_errmsg()] functions.","declarations":[{"spell":"10418:16-10418:37|-1|1|1","param_spellings":["10418:46-10418:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":281,"usr":11833111824405536773,"detailed_name":"int sqlite3_system_errno(sqlite3 *)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Low-level system error code\n METHOD: sqlite3\n\n ^Attempt to return the underlying operating system error code or error\n number that caused the most recent I/O error or failure to open a file.\n The return value is OS-dependent.  For example, on unix systems, after\n [sqlite3_open_v2()] returns [SQLITE_CANTOPEN], this interface could be\n called to get back the underlying \"errno\" that caused the problem, such\n as ENOSPC, EAUTH, EISDIR, and so forth.","declarations":[{"spell":"10548:16-10548:36|-1|1|1","param_spellings":["10548:45-10548:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":282,"usr":14625591200321402536,"detailed_name":"int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Record A Database Snapshot\n CONSTRUCTOR: sqlite3_snapshot\n\n ^The [sqlite3_snapshot_get(D,S,P)] interface attempts to make a\n new [sqlite3_snapshot] object that records the current state of\n schema S in database connection D.  ^On success, the\n [sqlite3_snapshot_get(D,S,P)] interface writes a pointer to the newly\n created [sqlite3_snapshot] object into *P and returns SQLITE_OK.\n If there is not already a read-transaction open on schema S when\n this function is called, one is opened automatically.\n\n If a read-transaction is opened by this function, then it is guaranteed\n that the returned snapshot object may not be invalidated by a database\n writer or checkpointer until after the read-transaction is closed. This\n is not guaranteed if a read-transaction is already open when this\n function is called. In that case, any subsequent write or checkpoint\n operation on the database may invalidate the returned snapshot handle,\n even while the read-transaction remains open.\n\n The following must be true for this function to succeed. If any of\n the following statements are false when sqlite3_snapshot_get() is\n called, SQLITE_ERROR is returned. The final value of *P is undefined\n in this case.\n\n <ul>\n   <li> The database handle must not be in [autocommit mode].\n\n   <li> Schema S of [database connection] D must be a [WAL mode] database.\n\n   <li> There must not be a write transaction open on schema S of database\n        connection D.\n\n   <li> One or more transactions must have been written to the current wal\n        file since it was created on disk (by any connection). This means\n        that a snapshot cannot be taken on a wal mode database with no wal\n        file immediately after it is first opened. At least one transaction\n        must be written to it first.\n </ul>\n\n This function may also return SQLITE_NOMEM.  If it is called with the\n database handle in autocommit mode but fails for some other reason,\n whether or not a read transaction is opened on schema S is undefined.\n\n The [sqlite3_snapshot] object returned from a successful call to\n [sqlite3_snapshot_get()] must be freed using [sqlite3_snapshot_free()]\n to avoid a memory leak.\n\n The [sqlite3_snapshot_get()] interface is only available when the\n [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.","declarations":[{"spell":"10625:36-10625:56|-1|1|1","param_spellings":["10626:12-10626:14","10627:15-10627:22","10628:22-10628:32"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":283,"usr":7388912262148670680,"detailed_name":"int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Start a read transaction on an historical snapshot\n METHOD: sqlite3_snapshot\n\n ^The [sqlite3_snapshot_open(D,S,P)] interface either starts a new read\n transaction or upgrades an existing one for schema S of\n [database connection] D such that the read transaction refers to\n historical [snapshot] P, rather than the most recent change to the\n database. ^The [sqlite3_snapshot_open()] interface returns SQLITE_OK\n on success or an appropriate [error code] if it fails.\n\n ^In order to succeed, the database connection must not be in\n [autocommit mode] when [sqlite3_snapshot_open(D,S,P)] is called. If there\n is already a read transaction open on schema S, then the database handle\n must have no active statements (SELECT statements that have been passed\n to sqlite3_step() but not sqlite3_reset() or sqlite3_finalize()).\n SQLITE_ERROR is returned if either of these conditions is violated, or\n if schema S does not exist, or if the snapshot object is invalid.\n\n ^A call to sqlite3_snapshot_open() will fail to open if the specified\n snapshot has been overwritten by a [checkpoint]. In this case\n SQLITE_ERROR_SNAPSHOT is returned.\n\n If there is already a read transaction open when this function is\n invoked, then the same read transaction remains open (on the same\n database snapshot) if SQLITE_ERROR, SQLITE_BUSY or SQLITE_ERROR_SNAPSHOT\n is returned. If another error code - for example SQLITE_PROTOCOL or an\n SQLITE_IOERR error code - is returned, then the final state of the\n read transaction is undefined. If SQLITE_OK is returned, then the\n read transaction is now open on database snapshot P.\n\n ^(A call to [sqlite3_snapshot_open(D,S,P)] will fail if the\n database connection D does not know that the database file for\n schema S is in [WAL mode].  A database connection might not know\n that the database file is in [WAL mode] if there has been no prior\n I/O on that database connection, or if the database entered [WAL mode]\n after the most recent I/O on the database connection.)^\n (Hint: Run \"[PRAGMA application_id]\" against a newly opened\n database connection in order to make it ready to use snapshots.)\n\n The [sqlite3_snapshot_open()] interface is only available when the\n [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.","declarations":[{"spell":"10674:36-10674:57|-1|1|1","param_spellings":["10675:12-10675:14","10676:15-10676:22","10677:21-10677:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":284,"usr":2616929341990588101,"detailed_name":"void sqlite3_snapshot_free(sqlite3_snapshot *)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Destroy a snapshot\n DESTRUCTOR: sqlite3_snapshot\n\n ^The [sqlite3_snapshot_free(P)] interface destroys [sqlite3_snapshot] P.\n The application must eventually free every [sqlite3_snapshot] object\n using this routine to avoid a memory leak.\n\n The [sqlite3_snapshot_free()] interface is only available when the\n [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.","declarations":[{"spell":"10691:37-10691:58|-1|1|1","param_spellings":["10691:76-10691:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":285,"usr":7942581767995540698,"detailed_name":"int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Compare the ages of two snapshot handles.\n METHOD: sqlite3_snapshot\n\n The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages\n of two valid snapshot handles.\n\n If the two snapshot handles are not associated with the same database\n file, the result of the comparison is undefined.\n\n Additionally, the result of the comparison is only valid if both of the\n snapshot handles were obtained by calling sqlite3_snapshot_get() since the\n last time the wal file was deleted. The wal file is deleted when the\n database is changed back to rollback mode or when the number of database\n clients drops to zero. If either snapshot handle was obtained before the\n wal file was last deleted, the value returned by this function\n is undefined.\n\n Otherwise, this API returns a negative value if P1 refers to an older\n snapshot than P2, zero if the two handles refer to the same database\n snapshot, and a positive value if P1 is a newer snapshot than P2.\n\n This interface is only available if SQLite is compiled with the\n [SQLITE_ENABLE_SNAPSHOT] option.","declarations":[{"spell":"10718:36-10718:56|-1|1|1","param_spellings":["10719:21-10719:23","10720:21-10720:23"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":286,"usr":7898856719272037696,"detailed_name":"int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Recover snapshots from a wal file\n METHOD: sqlite3_snapshot\n\n If a [WAL file] remains on disk after all database connections close\n (either through the use of the [SQLITE_FCNTL_PERSIST_WAL] [file control]\n or because the last process to have the database opened exited without\n calling [sqlite3_close()]) and a new connection is subsequently opened\n on that database and [WAL file], the [sqlite3_snapshot_open()] interface\n will only be able to open the last transaction added to the WAL file\n even though the WAL file contains other valid transactions.\n\n This function attempts to scan the WAL file associated with database zDb\n of database handle db and make all valid snapshots available to\n sqlite3_snapshot_open(). It is an error if there is already a read\n transaction open on the database, or if the database is not a WAL mode\n database.\n\n SQLITE_OK is returned if successful, or an SQLite error code otherwise.\n\n This interface is only available if SQLite is compiled with the\n [SQLITE_ENABLE_SNAPSHOT] option.","declarations":[{"spell":"10746:36-10746:60|-1|1|1","param_spellings":["10746:70-10746:72","10746:86-10746:89"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":287,"usr":13093723603564328359,"detailed_name":"unsigned char *sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)","short_name_offset":15,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Serialize a database\n\n The sqlite3_serialize(D,S,P,F) interface returns a pointer to memory\n that is a serialization of the S database on [database connection] D.\n If P is not a NULL pointer, then the size of the database in bytes\n is written into *P.\n\n For an ordinary on-disk database file, the serialization is just a\n copy of the disk file.  For an in-memory database or a \"TEMP\" database,\n the serialization is the same sequence of bytes which would be written\n to disk if that database where backed up to disk.\n\n The usual case is that sqlite3_serialize() copies the serialization of\n the database into memory obtained from [sqlite3_malloc64()] and returns\n a pointer to that memory.  The caller is responsible for freeing the\n returned value to avoid a memory leak.  However, if the F argument\n contains the SQLITE_SERIALIZE_NOCOPY bit, then no memory allocations\n are made, and the sqlite3_serialize() function will return a pointer\n to the contiguous memory representation of the database that SQLite\n is currently using for that database, or NULL if the no such contiguous\n memory representation of the database exists.  A contiguous memory\n representation of the database will usually only exist if there has\n been a prior call to [sqlite3_deserialize(D,S,...)] with the same\n values of D and S.\n The size of the database is written into *P even if the\n SQLITE_SERIALIZE_NOCOPY bit is set but no contiguous copy\n of the database exists.\n\n After the call, if the SQLITE_SERIALIZE_NOCOPY bit had been set,\n the returned buffer content will remain accessible and unchanged\n until either the next write operation on the connection or when\n the connection is closed, and applications must not modify the\n buffer. If the bit had been clear, the returned buffer will not\n be accessed by SQLite after the call.\n\n A call to sqlite3_serialize(D,S,P,F) might return NULL even if the\n SQLITE_SERIALIZE_NOCOPY bit is omitted from argument F if a memory\n allocation error occurs.\n\n This interface is omitted if SQLite is compiled with the\n [SQLITE_OMIT_DESERIALIZE] option.","declarations":[{"spell":"10791:27-10791:44|-1|1|1","param_spellings":["10792:12-10792:14","10793:15-10793:22","10794:18-10794:24","10795:16-10795:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":288,"usr":953862820810446626,"detailed_name":"int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned char *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n CAPI3REF: Deserialize a database\n\n The sqlite3_deserialize(D,S,P,N,M,F) interface causes the\n [database connection] D to disconnect from database S and then\n reopen S as an in-memory database based on the serialization contained\n in P.  The serialized database P is N bytes in size.  M is the size of\n the buffer P, which might be larger than N.  If M is larger than N, and\n the SQLITE_DESERIALIZE_READONLY bit is not set in F, then SQLite is\n permitted to add content to the in-memory database as long as the total\n size does not exceed M bytes.\n\n If the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in F, then SQLite will\n invoke sqlite3_free() on the serialization buffer when the database\n connection closes.  If the SQLITE_DESERIALIZE_RESIZEABLE bit is set, then\n SQLite will try to increase the buffer size using sqlite3_realloc64()\n if writes on the database cause it to grow larger than M bytes.\n\n Applications must not modify the buffer P or invalidate it before\n the database connection D is closed.\n\n The sqlite3_deserialize() interface will fail with SQLITE_BUSY if the\n database is currently in a read transaction or is involved in a backup\n operation.\n\n It is not possible to deserialized into the TEMP database.  If the\n S argument to sqlite3_deserialize(D,S,P,N,M,F) is \"temp\" then the\n function returns SQLITE_ERROR.\n\n The deserialized database should not be in [WAL mode].  If the database\n is in WAL mode, then any attempt to use the database file will result\n in an [SQLITE_CANTOPEN] error.  The application can set the\n [file format version numbers] (bytes 18 and 19) of the input database P\n to 0x01 prior to invoking sqlite3_deserialize(D,S,P,N,M,F) to force the\n database file into rollback mode and work around this limitation.\n\n If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the\n SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then\n [sqlite3_free()] is invoked on argument P prior to returning.\n\n This interface is omitted if SQLite is compiled with the\n [SQLITE_OMIT_DESERIALIZE] option.","declarations":[{"spell":"10857:16-10857:35|-1|1|1","param_spellings":["10858:12-10858:14","10859:15-10859:22","10860:18-10860:23","10861:17-10861:21","10862:17-10862:22","10863:12-10863:18"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":289,"usr":2146177237878677961,"detailed_name":"int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *) xGeom, void *pContext)","short_name_offset":4,"short_name_size":31,"kind":12,"storage":1,"hover":"","comments":"\n Register a geometry callback named zGeom that can be used as part of an\n R-Tree geometry query as follows:\n\n   SELECT ... FROM <rtree> WHERE <rtree col> MATCH $zGeom(... params ...)","declarations":[{"spell":"10955:16-10955:47|-1|1|1","param_spellings":["10956:12-10956:14","10957:15-10957:20","10958:9-10958:14","10959:9-10959:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":290,"usr":14887052135915706690,"detailed_name":"int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*)(sqlite3_rtree_query_info *) xQueryFunc, void *pContext, void (*)(void *) xDestructor)","short_name_offset":4,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n Register a 2nd-generation geometry callback named zScore that can be\n used as part of an R-Tree geometry query as follows:\n\n   SELECT ... FROM <rtree> WHERE <rtree col> MATCH $zQueryFunc(... params ...)","declarations":[{"spell":"10981:16-10981:44|-1|1|1","param_spellings":["10982:12-10982:14","10983:15-10983:25","10984:9-10984:19","10985:9-10985:17","10986:10-10986:21"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":2473350381979576058,"detailed_name":"const char [] sqlite3_version","short_name_offset":14,"short_name_size":15,"hover":"","comments":"\n CAPI3REF: Run-Time Library Version Numbers\n KEYWORDS: sqlite3_version sqlite3_sourceid\n\n These interfaces provide the same information as the [SQLITE_VERSION],\n [SQLITE_VERSION_NUMBER], and [SQLITE_SOURCE_ID] C preprocessor macros\n but are associated with the library instead of the header file.  ^(Cautious\n programmers might include assert() statements in their application to\n verify that values returned by these interfaces match the macros in\n the header, and thus ensure that the application is\n compiled with matching library and header files.\n\n <blockquote><pre>\n assert( sqlite3_libversion_number()==SQLITE_VERSION_NUMBER );\n assert( strncmp(sqlite3_sourceid(),SQLITE_SOURCE_ID,80)==0 );\n assert( strcmp(sqlite3_libversion(),SQLITE_VERSION)==0 );\n </pre></blockquote>)^\n\n ^The sqlite3_version[] string constant contains the text of [SQLITE_VERSION]\n macro.  ^The sqlite3_libversion() function returns a pointer to the\n to the sqlite3_version[] string constant.  The sqlite3_libversion()\n function is provided for use in DLLs since DLL users usually do not have\n direct access to string constants within the DLL.  ^The\n sqlite3_libversion_number() function returns an integer equal to\n [SQLITE_VERSION_NUMBER].  ^(The sqlite3_sourceid() function returns\n a pointer to a string constant whose value is the same as the\n [SQLITE_SOURCE_ID] C preprocessor macro.  Except if SQLite is built\n using an edited copy of [the amalgamation], then the last four characters\n of the hash might be different from [SQLITE_SOURCE_ID].)^\n\n See also: [sqlite_version()] and [sqlite_source_id()].","declarations":["185:37-185:52|-1|1|1"],"type":0,"uses":[],"kind":13,"storage":2},{"id":1,"usr":3206826515570978759,"detailed_name":"const struct sqlite3_io_methods *sqlite3_file::pMethods","short_name_offset":47,"short_name_size":8,"hover":"","comments":"Methods for an open file","declarations":[],"spell":"740:36-740:44|11|2|2","extent":"740:3-740:44|11|2|0","type":13,"uses":[],"kind":8,"storage":0},{"id":2,"usr":13046548447897841292,"detailed_name":"int sqlite3_io_methods::iVersion","short_name_offset":24,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"847:7-847:15|13|2|2","extent":"847:3-847:15|13|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":3,"usr":11811427825851430855,"detailed_name":"int (*)(sqlite3_file *) sqlite3_io_methods::xClose","short_name_offset":44,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"848:9-848:15|13|2|2","extent":"848:3-848:31|13|2|0","uses":[],"kind":8,"storage":0},{"id":4,"usr":2684447013275638144,"detailed_name":"int (*)(sqlite3_file *, void *, int, sqlite3_int64) sqlite3_io_methods::xRead","short_name_offset":72,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"849:9-849:14|13|2|2","extent":"849:3-849:68|13|2|0","uses":[],"kind":8,"storage":0},{"id":5,"usr":3282153208199302670,"detailed_name":"int (*)(sqlite3_file *, const void *, int, sqlite3_int64) sqlite3_io_methods::xWrite","short_name_offset":78,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"850:9-850:15|13|2|2","extent":"850:3-850:75|13|2|0","uses":[],"kind":8,"storage":0},{"id":6,"usr":3522812556658788156,"detailed_name":"int (*)(sqlite3_file *, sqlite3_int64) sqlite3_io_methods::xTruncate","short_name_offset":59,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"851:9-851:18|13|2|2","extent":"851:3-851:54|13|2|0","uses":[],"kind":8,"storage":0},{"id":7,"usr":9333208989754740282,"detailed_name":"int (*)(sqlite3_file *, int) sqlite3_io_methods::xSync","short_name_offset":49,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"852:9-852:14|13|2|2","extent":"852:3-852:41|13|2|0","uses":[],"kind":8,"storage":0},{"id":8,"usr":8608995329685661429,"detailed_name":"int (*)(sqlite3_file *, sqlite3_int64 *) sqlite3_io_methods::xFileSize","short_name_offset":61,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"853:9-853:18|13|2|2","extent":"853:3-853:56|13|2|0","uses":[],"kind":8,"storage":0},{"id":9,"usr":11569534200015413817,"detailed_name":"int (*)(sqlite3_file *, int) sqlite3_io_methods::xLock","short_name_offset":49,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"854:9-854:14|13|2|2","extent":"854:3-854:35|13|2|0","uses":[],"kind":8,"storage":0},{"id":10,"usr":5294618911043147506,"detailed_name":"int (*)(sqlite3_file *, int) sqlite3_io_methods::xUnlock","short_name_offset":49,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"855:9-855:16|13|2|2","extent":"855:3-855:37|13|2|0","uses":[],"kind":8,"storage":0},{"id":11,"usr":15312013718173546059,"detailed_name":"int (*)(sqlite3_file *, int *) sqlite3_io_methods::xCheckReservedLock","short_name_offset":51,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"856:9-856:27|13|2|2","extent":"856:3-856:57|13|2|0","uses":[],"kind":8,"storage":0},{"id":12,"usr":6097538723017874484,"detailed_name":"int (*)(sqlite3_file *, int, void *) sqlite3_io_methods::xFileControl","short_name_offset":57,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"857:9-857:21|13|2|2","extent":"857:3-857:57|13|2|0","uses":[],"kind":8,"storage":0},{"id":13,"usr":15060053665762697173,"detailed_name":"int (*)(sqlite3_file *) sqlite3_io_methods::xSectorSize","short_name_offset":44,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"858:9-858:20|13|2|2","extent":"858:3-858:36|13|2|0","uses":[],"kind":8,"storage":0},{"id":14,"usr":6447137679073687857,"detailed_name":"int (*)(sqlite3_file *) sqlite3_io_methods::xDeviceCharacteristics","short_name_offset":44,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"859:9-859:31|13|2|2","extent":"859:3-859:47|13|2|0","uses":[],"kind":8,"storage":0},{"id":15,"usr":12772148526352095301,"detailed_name":"int (*)(sqlite3_file *, int, int, int, volatile void **) sqlite3_io_methods::xShmMap","short_name_offset":77,"short_name_size":7,"hover":"","comments":"Methods above are valid for version 1","declarations":[],"spell":"861:9-861:16|13|2|2","extent":"861:3-861:73|13|2|0","uses":[],"kind":8,"storage":0},{"id":16,"usr":17900697070801758515,"detailed_name":"int (*)(sqlite3_file *, int, int, int) sqlite3_io_methods::xShmLock","short_name_offset":59,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"862:9-862:17|13|2|2","extent":"862:3-862:63|13|2|0","uses":[],"kind":8,"storage":0},{"id":17,"usr":1634802336296068039,"detailed_name":"void (*)(sqlite3_file *) sqlite3_io_methods::xShmBarrier","short_name_offset":45,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"863:10-863:21|13|2|2","extent":"863:3-863:37|13|2|0","uses":[],"kind":8,"storage":0},{"id":18,"usr":8724224247975501269,"detailed_name":"int (*)(sqlite3_file *, int) sqlite3_io_methods::xShmUnmap","short_name_offset":49,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"864:9-864:18|13|2|2","extent":"864:3-864:50|13|2|0","uses":[],"kind":8,"storage":0},{"id":19,"usr":2107356356046890063,"detailed_name":"int (*)(sqlite3_file *, sqlite3_int64, int, void **) sqlite3_io_methods::xFetch","short_name_offset":73,"short_name_size":6,"hover":"","comments":"Methods above are valid for version 2","declarations":[],"spell":"866:9-866:15|13|2|2","extent":"866:3-866:73|13|2|0","uses":[],"kind":8,"storage":0},{"id":20,"usr":10522758530808105145,"detailed_name":"int (*)(sqlite3_file *, sqlite3_int64, void *) sqlite3_io_methods::xUnfetch","short_name_offset":67,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"867:9-867:17|13|2|2","extent":"867:3-867:63|13|2|0","uses":[],"kind":8,"storage":0},{"id":21,"usr":15756322359107442032,"detailed_name":"int sqlite3_vfs::iVersion","short_name_offset":17,"short_name_size":8,"hover":"","comments":"Structure version number (currently 3)","declarations":[],"spell":"1483:7-1483:15|21|2|2","extent":"1483:3-1483:15|21|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":22,"usr":13544784971530547207,"detailed_name":"int sqlite3_vfs::szOsFile","short_name_offset":17,"short_name_size":8,"hover":"","comments":"Size of subclassed sqlite3_file","declarations":[],"spell":"1484:7-1484:15|21|2|2","extent":"1484:3-1484:15|21|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":23,"usr":3731227452441646670,"detailed_name":"int sqlite3_vfs::mxPathname","short_name_offset":17,"short_name_size":10,"hover":"","comments":"Maximum file pathname length","declarations":[],"spell":"1485:7-1485:17|21|2|2","extent":"1485:3-1485:17|21|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":24,"usr":7330625943062520475,"detailed_name":"sqlite3_vfs *sqlite3_vfs::pNext","short_name_offset":26,"short_name_size":5,"hover":"","comments":"Next registered VFS","declarations":[],"spell":"1486:16-1486:21|21|2|2","extent":"1486:3-1486:21|21|2|0","type":21,"uses":[],"kind":8,"storage":0},{"id":25,"usr":17412312311137702016,"detailed_name":"const char *sqlite3_vfs::zName","short_name_offset":25,"short_name_size":5,"hover":"","comments":"Name of this virtual file system","declarations":[],"spell":"1487:15-1487:20|21|2|2","extent":"1487:3-1487:20|21|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":26,"usr":11242980951426911028,"detailed_name":"void *sqlite3_vfs::pAppData","short_name_offset":19,"short_name_size":8,"hover":"","comments":"Pointer to application-specific data","declarations":[],"spell":"1488:9-1488:17|21|2|2","extent":"1488:3-1488:17|21|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":27,"usr":13649854036004138453,"detailed_name":"int (*)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *) sqlite3_vfs::xOpen","short_name_offset":82,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1489:9-1489:14|21|2|2","extent":"1489:3-1490:42|21|2|0","uses":[],"kind":8,"storage":0},{"id":28,"usr":11189733638127483757,"detailed_name":"int (*)(sqlite3_vfs *, const char *, int) sqlite3_vfs::xDelete","short_name_offset":55,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1491:9-1491:16|21|2|2","extent":"1491:3-1491:63|21|2|0","uses":[],"kind":8,"storage":0},{"id":29,"usr":6456204731573423695,"detailed_name":"int (*)(sqlite3_vfs *, const char *, int, int *) sqlite3_vfs::xAccess","short_name_offset":62,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1492:9-1492:16|21|2|2","extent":"1492:3-1492:75|21|2|0","uses":[],"kind":8,"storage":0},{"id":30,"usr":1176231150595568333,"detailed_name":"int (*)(sqlite3_vfs *, const char *, int, char *) sqlite3_vfs::xFullPathname","short_name_offset":63,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"1493:9-1493:22|21|2|2","extent":"1493:3-1493:78|21|2|0","uses":[],"kind":8,"storage":0},{"id":31,"usr":1722868013446203826,"detailed_name":"void *(*)(sqlite3_vfs *, const char *) sqlite3_vfs::xDlOpen","short_name_offset":52,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1494:11-1494:18|21|2|2","extent":"1494:3-1494:56|21|2|0","uses":[],"kind":8,"storage":0},{"id":32,"usr":16854242797206510619,"detailed_name":"void (*)(sqlite3_vfs *, int, char *) sqlite3_vfs::xDlError","short_name_offset":50,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1495:10-1495:18|21|2|2","extent":"1495:3-1495:59|21|2|0","uses":[],"kind":8,"storage":0},{"id":33,"usr":18348152059912507311,"detailed_name":"void (*(*)(sqlite3_vfs *, void *, const char *))() sqlite3_vfs::xDlSym","short_name_offset":64,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1496:12-1496:18|21|2|2","extent":"1496:3-1496:67|21|2|0","uses":[],"kind":8,"storage":0},{"id":34,"usr":14412454793495491054,"detailed_name":"void (*)(sqlite3_vfs *, void *) sqlite3_vfs::xDlClose","short_name_offset":45,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1497:10-1497:18|21|2|2","extent":"1497:3-1497:40|21|2|0","uses":[],"kind":8,"storage":0},{"id":35,"usr":9331374915131505388,"detailed_name":"int (*)(sqlite3_vfs *, int, char *) sqlite3_vfs::xRandomness","short_name_offset":49,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"1498:9-1498:20|21|2|2","extent":"1498:3-1498:58|21|2|0","uses":[],"kind":8,"storage":0},{"id":36,"usr":9363567433403476697,"detailed_name":"int (*)(sqlite3_vfs *, int) sqlite3_vfs::xSleep","short_name_offset":41,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1499:9-1499:15|21|2|2","extent":"1499:3-1499:48|21|2|0","uses":[],"kind":8,"storage":0},{"id":37,"usr":5582360462218192458,"detailed_name":"int (*)(sqlite3_vfs *, double *) sqlite3_vfs::xCurrentTime","short_name_offset":46,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"1500:9-1500:21|21|2|2","extent":"1500:3-1500:45|21|2|0","uses":[],"kind":8,"storage":0},{"id":38,"usr":16720657332617004396,"detailed_name":"int (*)(sqlite3_vfs *, int, char *) sqlite3_vfs::xGetLastError","short_name_offset":49,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"1501:9-1501:22|21|2|2","extent":"1501:3-1501:50|21|2|0","uses":[],"kind":8,"storage":0},{"id":39,"usr":14450841656459229043,"detailed_name":"int (*)(sqlite3_vfs *, sqlite3_int64 *) sqlite3_vfs::xCurrentTimeInt64","short_name_offset":53,"short_name_size":17,"hover":"","comments":"\n The methods above are in version 1 of the sqlite_vfs object\n definition.  Those that follow are added in version 2 or later","declarations":[],"spell":"1506:9-1506:26|21|2|2","extent":"1506:3-1506:57|21|2|0","uses":[],"kind":8,"storage":0},{"id":40,"usr":16741741373615871075,"detailed_name":"int (*)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr) sqlite3_vfs::xSetSystemCall","short_name_offset":71,"short_name_size":14,"hover":"","comments":"\n The methods above are in versions 1 and 2 of the sqlite_vfs object.\n Those below are for version 3 and greater.","declarations":[],"spell":"1511:9-1511:23|21|2|2","extent":"1511:3-1511:78|21|2|0","uses":[],"kind":8,"storage":0},{"id":41,"usr":9668464067589730378,"detailed_name":"sqlite3_syscall_ptr (*)(sqlite3_vfs *, const char *) sqlite3_vfs::xGetSystemCall","short_name_offset":66,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"1512:25-1512:39|21|2|2","extent":"1512:3-1512:73|21|2|0","uses":[],"kind":8,"storage":0},{"id":42,"usr":12653051602419520367,"detailed_name":"const char *(*)(sqlite3_vfs *, const char *) sqlite3_vfs::xNextSystemCall","short_name_offset":58,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"1513:17-1513:32|21|2|2","extent":"1513:3-1513:66|21|2|0","uses":[],"kind":8,"storage":0},{"id":43,"usr":18421691437847651929,"detailed_name":"void *(*)(int) sqlite3_mem_methods::xMalloc","short_name_offset":36,"short_name_size":7,"hover":"","comments":"Memory allocation function","declarations":[],"spell":"1783:11-1783:18|25|2|2","extent":"1783:3-1783:24|25|2|0","uses":[],"kind":8,"storage":0},{"id":44,"usr":4303751478094166696,"detailed_name":"void (*)(void *) sqlite3_mem_methods::xFree","short_name_offset":38,"short_name_size":5,"hover":"","comments":"Free a prior allocation","declarations":[],"spell":"1784:10-1784:15|25|2|2","extent":"1784:3-1784:23|25|2|0","uses":[],"kind":8,"storage":0},{"id":45,"usr":2928153501333080917,"detailed_name":"void *(*)(void *, int) sqlite3_mem_methods::xRealloc","short_name_offset":44,"short_name_size":8,"hover":"","comments":"Resize an allocation","declarations":[],"spell":"1785:11-1785:19|25|2|2","extent":"1785:3-1785:31|25|2|0","uses":[],"kind":8,"storage":0},{"id":46,"usr":4338305121173089051,"detailed_name":"int (*)(void *) sqlite3_mem_methods::xSize","short_name_offset":37,"short_name_size":5,"hover":"","comments":"Return the size of an allocation","declarations":[],"spell":"1786:9-1786:14|25|2|2","extent":"1786:3-1786:22|25|2|0","uses":[],"kind":8,"storage":0},{"id":47,"usr":12200076993167062861,"detailed_name":"int (*)(int) sqlite3_mem_methods::xRoundup","short_name_offset":34,"short_name_size":8,"hover":"","comments":"Round up request size to allocation size","declarations":[],"spell":"1787:9-1787:17|25|2|2","extent":"1787:3-1787:23|25|2|0","uses":[],"kind":8,"storage":0},{"id":48,"usr":16710770458745231792,"detailed_name":"int (*)(void *) sqlite3_mem_methods::xInit","short_name_offset":37,"short_name_size":5,"hover":"","comments":"Initialize the memory allocator","declarations":[],"spell":"1788:9-1788:14|25|2|2","extent":"1788:3-1788:22|25|2|0","uses":[],"kind":8,"storage":0},{"id":49,"usr":7800198615704252522,"detailed_name":"void (*)(void *) sqlite3_mem_methods::xShutdown","short_name_offset":38,"short_name_size":9,"hover":"","comments":"Deinitialize the memory allocator","declarations":[],"spell":"1789:10-1789:19|25|2|2","extent":"1789:3-1789:27|25|2|0","uses":[],"kind":8,"storage":0},{"id":50,"usr":15721051078747292780,"detailed_name":"void *sqlite3_mem_methods::pAppData","short_name_offset":27,"short_name_size":8,"hover":"","comments":"Argument to xInit() and xShutdown()","declarations":[],"spell":"1790:9-1790:17|25|2|2","extent":"1790:3-1790:17|25|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":51,"usr":7558883142382923473,"detailed_name":"char *sqlite3_temp_directory","short_name_offset":6,"short_name_size":22,"hover":"","comments":"\n CAPI3REF: Name Of The Folder Holding Temporary Files\n\n ^(If this global variable is made to point to a string which is\n the name of a folder (a.k.a. directory), then all temporary files\n created by SQLite when using a built-in [sqlite3_vfs | VFS]\n will be placed in that directory.)^  ^If this variable\n is a NULL pointer, then SQLite performs a search for an appropriate\n temporary file directory.\n\n Applications are strongly discouraged from using this global variable.\n It is required to set a temporary folder on Windows Runtime (WinRT).\n But for all other platforms, it is highly recommended that applications\n neither read nor write this variable.  This global variable is a relic\n that exists for backwards compatibility of legacy applications and should\n be avoided in new projects.\n\n It is not safe to read or modify this variable in more than one\n thread at a time.  It is not safe to read or modify this variable\n if a [database connection] is being used at the same time in a separate\n thread.\n It is intended that this variable be set once\n as part of process initialization and before any SQLite interface\n routines have been called and that this variable remain unchanged\n thereafter.\n\n ^The [temp_store_directory pragma] may modify this variable and cause\n it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,\n the [temp_store_directory pragma] always assumes that any string\n that this variable points to is held in memory obtained from\n [sqlite3_malloc] and the pragma may attempt to free that memory\n using [sqlite3_free].\n Hence, if this variable is modified directly, either it should be\n made NULL or made to point to memory obtained from [sqlite3_malloc]\n or else the use of the [temp_store_directory pragma] should be avoided.\n Except when requested by the [temp_store_directory pragma], SQLite\n does not free the memory that sqlite3_temp_directory points to.  If\n the application wants that memory to be freed, it must do\n so itself, taking care to only do so after all [database connection]\n objects have been destroyed.\n\n <b>Note to Windows Runtime users:</b>  The temporary directory must be set\n prior to calling [sqlite3_open] or [sqlite3_open_v2].  Otherwise, various\n features that require the use of temporary files may fail.  Here is an\n example of how to do this using C++ with the Windows Runtime:\n\n <blockquote><pre>\n LPCWSTR zPath = Windows::Storage::ApplicationData::Current->\n &nbsp;     TemporaryFolder->Path->Data();\n char zPathBuf&#91;MAX_PATH + 1&#93;;\n memset(zPathBuf, 0, sizeof(zPathBuf));\n WideCharToMultiByte(CP_UTF8, 0, zPath, -1, zPathBuf, sizeof(zPathBuf),\n &nbsp;     NULL, NULL);\n sqlite3_temp_directory = sqlite3_mprintf(\"%s\", zPathBuf);\n </pre></blockquote>","declarations":["6542:32-6542:54|-1|1|1"],"type":0,"uses":[],"kind":13,"storage":2},{"id":52,"usr":13301846434555138857,"detailed_name":"char *sqlite3_data_directory","short_name_offset":6,"short_name_size":22,"hover":"","comments":"\n CAPI3REF: Name Of The Folder Holding Database Files\n\n ^(If this global variable is made to point to a string which is\n the name of a folder (a.k.a. directory), then all database files\n specified with a relative pathname and created or accessed by\n SQLite when using a built-in windows [sqlite3_vfs | VFS] will be assumed\n to be relative to that directory.)^ ^If this variable is a NULL\n pointer, then SQLite assumes that all database files specified\n with a relative pathname are relative to the current directory\n for the process.  Only the windows VFS makes use of this global\n variable; it is ignored by the unix VFS.\n\n Changing the value of this variable while a database connection is\n open can result in a corrupt database.\n\n It is not safe to read or modify this variable in more than one\n thread at a time.  It is not safe to read or modify this variable\n if a [database connection] is being used at the same time in a separate\n thread.\n It is intended that this variable be set once\n as part of process initialization and before any SQLite interface\n routines have been called and that this variable remain unchanged\n thereafter.\n\n ^The [data_store_directory pragma] may modify this variable and cause\n it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,\n the [data_store_directory pragma] always assumes that any string\n that this variable points to is held in memory obtained from\n [sqlite3_malloc] and the pragma may attempt to free that memory\n using [sqlite3_free].\n Hence, if this variable is modified directly, either it should be\n made NULL or made to point to memory obtained from [sqlite3_malloc]\n or else the use of the [data_store_directory pragma] should be avoided.","declarations":["6579:32-6579:54|-1|1|1"],"type":0,"uses":[],"kind":13,"storage":2},{"id":53,"usr":7672318114801869073,"detailed_name":"int sqlite3_module::iVersion","short_name_offset":20,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"7358:7-7358:15|41|2|2","extent":"7358:3-7358:15|41|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":54,"usr":16158228509852323369,"detailed_name":"int (*)(sqlite3 *, void *, int, const char *const *, sqlite3_vtab **, char **) sqlite3_module::xCreate","short_name_offset":95,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7359:9-7359:16|41|2|2","extent":"7359:3-7361:46|41|2|0","uses":[],"kind":8,"storage":0},{"id":55,"usr":818307726029391643,"detailed_name":"int (*)(sqlite3 *, void *, int, const char *const *, sqlite3_vtab **, char **) sqlite3_module::xConnect","short_name_offset":95,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"7362:9-7362:17|41|2|2","extent":"7362:3-7364:46|41|2|0","uses":[],"kind":8,"storage":0},{"id":56,"usr":4770030411892767609,"detailed_name":"int (*)(sqlite3_vtab *, sqlite3_index_info *) sqlite3_module::xBestIndex","short_name_offset":62,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"7365:9-7365:19|41|2|2","extent":"7365:3-7365:62|41|2|0","uses":[],"kind":8,"storage":0},{"id":57,"usr":12733814097117564091,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xDisconnect","short_name_offset":40,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"7366:9-7366:20|41|2|2","extent":"7366:3-7366:42|41|2|0","uses":[],"kind":8,"storage":0},{"id":58,"usr":8029443107122996465,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xDestroy","short_name_offset":40,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"7367:9-7367:17|41|2|2","extent":"7367:3-7367:39|41|2|0","uses":[],"kind":8,"storage":0},{"id":59,"usr":5495099980590284851,"detailed_name":"int (*)(sqlite3_vtab *, sqlite3_vtab_cursor **) sqlite3_module::xOpen","short_name_offset":64,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"7368:9-7368:14|41|2|2","extent":"7368:3-7368:68|41|2|0","uses":[],"kind":8,"storage":0},{"id":60,"usr":18254379936061935456,"detailed_name":"int (*)(sqlite3_vtab_cursor *) sqlite3_module::xClose","short_name_offset":47,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"7369:9-7369:15|41|2|2","extent":"7369:3-7369:38|41|2|0","uses":[],"kind":8,"storage":0},{"id":61,"usr":12923760170511315220,"detailed_name":"int (*)(sqlite3_vtab_cursor *, int, const char *, int, sqlite3_value **) sqlite3_module::xFilter","short_name_offset":89,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7370:9-7370:16|41|2|2","extent":"7370:3-7371:48|41|2|0","uses":[],"kind":8,"storage":0},{"id":62,"usr":7132328176198024927,"detailed_name":"int (*)(sqlite3_vtab_cursor *) sqlite3_module::xNext","short_name_offset":47,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"7372:9-7372:14|41|2|2","extent":"7372:3-7372:37|41|2|0","uses":[],"kind":8,"storage":0},{"id":63,"usr":4641063330109410887,"detailed_name":"int (*)(sqlite3_vtab_cursor *) sqlite3_module::xEof","short_name_offset":47,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"7373:9-7373:13|41|2|2","extent":"7373:3-7373:36|41|2|0","uses":[],"kind":8,"storage":0},{"id":64,"usr":1782892533517036526,"detailed_name":"int (*)(sqlite3_vtab_cursor *, sqlite3_context *, int) sqlite3_module::xColumn","short_name_offset":71,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7374:9-7374:16|41|2|2","extent":"7374:3-7374:62|41|2|0","uses":[],"kind":8,"storage":0},{"id":65,"usr":15202700932241144284,"detailed_name":"int (*)(sqlite3_vtab_cursor *, sqlite3_int64 *) sqlite3_module::xRowid","short_name_offset":64,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"7375:9-7375:15|41|2|2","extent":"7375:3-7375:61|41|2|0","uses":[],"kind":8,"storage":0},{"id":66,"usr":11963272918091752821,"detailed_name":"int (*)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *) sqlite3_module::xUpdate","short_name_offset":80,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7376:9-7376:16|41|2|2","extent":"7376:3-7376:73|41|2|0","uses":[],"kind":8,"storage":0},{"id":67,"usr":5787841484726653226,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xBegin","short_name_offset":40,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"7377:9-7377:15|41|2|2","extent":"7377:3-7377:37|41|2|0","uses":[],"kind":8,"storage":0},{"id":68,"usr":10869726732622852709,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xSync","short_name_offset":40,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"7378:9-7378:14|41|2|2","extent":"7378:3-7378:36|41|2|0","uses":[],"kind":8,"storage":0},{"id":69,"usr":2452712240381757307,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xCommit","short_name_offset":40,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7379:9-7379:16|41|2|2","extent":"7379:3-7379:38|41|2|0","uses":[],"kind":8,"storage":0},{"id":70,"usr":11766046431013196889,"detailed_name":"int (*)(sqlite3_vtab *) sqlite3_module::xRollback","short_name_offset":40,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"7380:9-7380:18|41|2|2","extent":"7380:3-7380:40|41|2|0","uses":[],"kind":8,"storage":0},{"id":71,"usr":15873038162282793525,"detailed_name":"int (*)(sqlite3_vtab *, int, const char *, void (**)(sqlite3_context *, int, sqlite3_value **), void **) sqlite3_module::xFindFunction","short_name_offset":121,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"7381:9-7381:22|41|2|2","extent":"7381:3-7383:37|41|2|0","uses":[],"kind":8,"storage":0},{"id":72,"usr":11358509897370418972,"detailed_name":"int (*)(sqlite3_vtab *, const char *) sqlite3_module::xRename","short_name_offset":54,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"7384:9-7384:16|41|2|2","extent":"7384:3-7384:56|41|2|0","uses":[],"kind":8,"storage":0},{"id":73,"usr":2028549320773958742,"detailed_name":"int (*)(sqlite3_vtab *, int) sqlite3_module::xSavepoint","short_name_offset":45,"short_name_size":10,"hover":"","comments":"The methods above are in version 1 of the sqlite_module object. Those\nbelow are for version 2 and greater.","declarations":[],"spell":"7387:9-7387:19|41|2|2","extent":"7387:3-7387:46|41|2|0","uses":[],"kind":8,"storage":0},{"id":74,"usr":1134565997297389114,"detailed_name":"int (*)(sqlite3_vtab *, int) sqlite3_module::xRelease","short_name_offset":45,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"7388:9-7388:17|41|2|2","extent":"7388:3-7388:44|41|2|0","uses":[],"kind":8,"storage":0},{"id":75,"usr":11059343400390182345,"detailed_name":"int (*)(sqlite3_vtab *, int) sqlite3_module::xRollbackTo","short_name_offset":45,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"7389:9-7389:20|41|2|2","extent":"7389:3-7389:47|41|2|0","uses":[],"kind":8,"storage":0},{"id":76,"usr":6741974662646722526,"detailed_name":"int (*)(const char *) sqlite3_module::xShadowName","short_name_offset":38,"short_name_size":11,"hover":"","comments":"The methods above are in versions 1 and 2 of the sqlite_module object.\nThose below are for version 3 and greater.","declarations":[],"spell":"7392:9-7392:20|41|2|2","extent":"7392:3-7392:34|41|2|0","uses":[],"kind":8,"storage":0},{"id":77,"usr":18385697663077499135,"detailed_name":"int (*)(sqlite3_vtab *, const char *, const char *, int, char **) sqlite3_module::xIntegrity","short_name_offset":82,"short_name_size":10,"hover":"","comments":"The methods above are in versions 1 through 3 of the sqlite_module object.\nThose below are for version 4 and greater.","declarations":[],"spell":"7395:9-7395:19|41|2|2","extent":"7395:3-7396:68|41|2|0","uses":[],"kind":8,"storage":0},{"id":78,"usr":690525496370103651,"detailed_name":"int sqlite3_index_info::nConstraint","short_name_offset":24,"short_name_size":11,"hover":"","comments":"Number of entries in aConstraint","declarations":[],"spell":"7505:7-7505:18|37|2|2","extent":"7505:3-7505:18|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":79,"usr":7325925101431422756,"detailed_name":"struct sqlite3_index_constraint *sqlite3_index_info::aConstraint","short_name_offset":53,"short_name_size":11,"hover":"","comments":"Table of WHERE clause constraints","declarations":[],"spell":"7511:6-7511:17|37|2|2","extent":"7506:3-7511:17|37|2|0","type":43,"uses":[],"kind":8,"storage":0},{"id":80,"usr":10614056347475751002,"detailed_name":"int sqlite3_index_info::sqlite3_index_constraint::iColumn","short_name_offset":50,"short_name_size":7,"hover":"","comments":"Column constrained.  -1 for ROWID","declarations":[],"spell":"7507:10-7507:17|43|2|2","extent":"7507:6-7507:17|43|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":81,"usr":9768940118982467751,"detailed_name":"unsigned char sqlite3_index_info::sqlite3_index_constraint::op","short_name_offset":60,"short_name_size":2,"hover":"","comments":"Constraint operator","declarations":[],"spell":"7508:20-7508:22|43|2|2","extent":"7508:6-7508:22|43|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":82,"usr":14503080953322240841,"detailed_name":"unsigned char sqlite3_index_info::sqlite3_index_constraint::usable","short_name_offset":60,"short_name_size":6,"hover":"","comments":"True if this constraint is usable","declarations":[],"spell":"7509:20-7509:26|43|2|2","extent":"7509:6-7509:26|43|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":83,"usr":6896714721792293447,"detailed_name":"int sqlite3_index_info::sqlite3_index_constraint::iTermOffset","short_name_offset":50,"short_name_size":11,"hover":"","comments":"Used internally - xBestIndex should ignore","declarations":[],"spell":"7510:10-7510:21|43|2|2","extent":"7510:6-7510:21|43|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":84,"usr":4904836637054158109,"detailed_name":"int sqlite3_index_info::nOrderBy","short_name_offset":24,"short_name_size":8,"hover":"","comments":"Number of terms in the ORDER BY clause","declarations":[],"spell":"7512:7-7512:15|37|2|2","extent":"7512:3-7512:15|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":85,"usr":13382996703205967358,"detailed_name":"struct sqlite3_index_orderby *sqlite3_index_info::aOrderBy","short_name_offset":50,"short_name_size":8,"hover":"","comments":"The ORDER BY clause","declarations":[],"spell":"7516:6-7516:14|37|2|2","extent":"7513:3-7516:14|37|2|0","type":45,"uses":[],"kind":8,"storage":0},{"id":86,"usr":6438030918164915702,"detailed_name":"int sqlite3_index_info::sqlite3_index_orderby::iColumn","short_name_offset":47,"short_name_size":7,"hover":"","comments":"Column number","declarations":[],"spell":"7514:10-7514:17|45|2|2","extent":"7514:6-7514:17|45|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":87,"usr":8195068533224099438,"detailed_name":"unsigned char sqlite3_index_info::sqlite3_index_orderby::desc","short_name_offset":57,"short_name_size":4,"hover":"","comments":"True for DESC.  False for ASC.","declarations":[],"spell":"7515:20-7515:24|45|2|2","extent":"7515:6-7515:24|45|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":88,"usr":11687283878596076277,"detailed_name":"struct sqlite3_index_constraint_usage *sqlite3_index_info::aConstraintUsage","short_name_offset":59,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"7521:6-7521:22|37|2|2","extent":"7518:3-7521:22|37|2|0","type":46,"uses":[],"kind":8,"storage":0},{"id":89,"usr":15530979500163010758,"detailed_name":"int sqlite3_index_info::sqlite3_index_constraint_usage::argvIndex","short_name_offset":56,"short_name_size":9,"hover":"","comments":"if >0, constraint is part of argv to xFilter","declarations":[],"spell":"7519:9-7519:18|46|2|2","extent":"7519:5-7519:18|46|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":90,"usr":12888312186031063532,"detailed_name":"unsigned char sqlite3_index_info::sqlite3_index_constraint_usage::omit","short_name_offset":66,"short_name_size":4,"hover":"","comments":"Do not code a test for this constraint","declarations":[],"spell":"7520:19-7520:23|46|2|2","extent":"7520:5-7520:23|46|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":91,"usr":2610119178637146051,"detailed_name":"int sqlite3_index_info::idxNum","short_name_offset":24,"short_name_size":6,"hover":"","comments":"Number used to identify the index","declarations":[],"spell":"7522:7-7522:13|37|2|2","extent":"7522:3-7522:13|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":92,"usr":1949777958504187232,"detailed_name":"char *sqlite3_index_info::idxStr","short_name_offset":26,"short_name_size":6,"hover":"","comments":"String, possibly obtained from sqlite3_malloc","declarations":[],"spell":"7523:9-7523:15|37|2|2","extent":"7523:3-7523:15|37|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":93,"usr":9607517648750177054,"detailed_name":"int sqlite3_index_info::needToFreeIdxStr","short_name_offset":24,"short_name_size":16,"hover":"","comments":"Free idxStr using sqlite3_free() if true","declarations":[],"spell":"7524:7-7524:23|37|2|2","extent":"7524:3-7524:23|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":94,"usr":14020040019352557929,"detailed_name":"int sqlite3_index_info::orderByConsumed","short_name_offset":24,"short_name_size":15,"hover":"","comments":"True if output is already ordered","declarations":[],"spell":"7525:7-7525:22|37|2|2","extent":"7525:3-7525:22|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":95,"usr":17735243000235995827,"detailed_name":"double sqlite3_index_info::estimatedCost","short_name_offset":27,"short_name_size":13,"hover":"","comments":"Estimated cost of using this index","declarations":[],"spell":"7526:10-7526:23|37|2|2","extent":"7526:3-7526:23|37|2|0","type":47,"uses":[],"kind":8,"storage":0},{"id":96,"usr":13422471621384098761,"detailed_name":"sqlite3_int64 sqlite3_index_info::estimatedRows","short_name_offset":34,"short_name_size":13,"hover":"","comments":"Estimated number of rows returned","declarations":[],"spell":"7528:17-7528:30|37|2|2","extent":"7528:3-7528:30|37|2|0","type":7,"uses":[],"kind":8,"storage":0},{"id":97,"usr":3883780516717278619,"detailed_name":"int sqlite3_index_info::idxFlags","short_name_offset":24,"short_name_size":8,"hover":"","comments":"Mask of SQLITE_INDEX_SCAN_* flags","declarations":[],"spell":"7530:7-7530:15|37|2|2","extent":"7530:3-7530:15|37|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":98,"usr":10846412294616025405,"detailed_name":"sqlite3_uint64 sqlite3_index_info::colUsed","short_name_offset":35,"short_name_size":7,"hover":"","comments":"Input: Mask of columns used by statement","declarations":[],"spell":"7532:18-7532:25|37|2|2","extent":"7532:3-7532:25|37|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":99,"usr":2730282112298040413,"detailed_name":"const sqlite3_module *sqlite3_vtab::pModule","short_name_offset":36,"short_name_size":7,"hover":"","comments":"The module for this virtual table","declarations":[],"spell":"7684:25-7684:32|35|2|2","extent":"7684:3-7684:32|35|2|0","type":42,"uses":[],"kind":8,"storage":0},{"id":100,"usr":6741663856889451403,"detailed_name":"int sqlite3_vtab::nRef","short_name_offset":18,"short_name_size":4,"hover":"","comments":"Number of open cursors","declarations":[],"spell":"7685:7-7685:11|35|2|2","extent":"7685:3-7685:11|35|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":101,"usr":13612132173548180415,"detailed_name":"char *sqlite3_vtab::zErrMsg","short_name_offset":20,"short_name_size":7,"hover":"","comments":"Error message from sqlite3_mprintf()","declarations":[],"spell":"7686:9-7686:16|35|2|2","extent":"7686:3-7686:16|35|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":102,"usr":9063124547183771517,"detailed_name":"sqlite3_vtab *sqlite3_vtab_cursor::pVtab","short_name_offset":35,"short_name_size":5,"hover":"","comments":"Virtual table of this cursor","declarations":[],"spell":"7708:17-7708:22|39|2|2","extent":"7708:3-7708:22|39|2|0","type":36,"uses":[],"kind":8,"storage":0},{"id":103,"usr":2156338354967060743,"detailed_name":"int (*)() sqlite3_mutex_methods::xMutexInit","short_name_offset":33,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"8205:9-8205:19|50|2|2","extent":"8205:3-8205:26|50|2|0","uses":[],"kind":8,"storage":0},{"id":104,"usr":10052540257198622591,"detailed_name":"int (*)() sqlite3_mutex_methods::xMutexEnd","short_name_offset":33,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"8206:9-8206:18|50|2|2","extent":"8206:3-8206:25|50|2|0","uses":[],"kind":8,"storage":0},{"id":105,"usr":7964570242752735815,"detailed_name":"sqlite3_mutex *(*)(int) sqlite3_mutex_methods::xMutexAlloc","short_name_offset":47,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"8207:20-8207:31|50|2|2","extent":"8207:3-8207:37|50|2|0","uses":[],"kind":8,"storage":0},{"id":106,"usr":987045472671353620,"detailed_name":"void (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexFree","short_name_offset":49,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"8208:10-8208:20|50|2|2","extent":"8208:3-8208:38|50|2|0","uses":[],"kind":8,"storage":0},{"id":107,"usr":16195036481873972070,"detailed_name":"void (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexEnter","short_name_offset":49,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"8209:10-8209:21|50|2|2","extent":"8209:3-8209:39|50|2|0","uses":[],"kind":8,"storage":0},{"id":108,"usr":8543953394300158488,"detailed_name":"int (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexTry","short_name_offset":48,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"8210:9-8210:18|50|2|2","extent":"8210:3-8210:36|50|2|0","uses":[],"kind":8,"storage":0},{"id":109,"usr":3566018514422692236,"detailed_name":"void (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexLeave","short_name_offset":49,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"8211:10-8211:21|50|2|2","extent":"8211:3-8211:39|50|2|0","uses":[],"kind":8,"storage":0},{"id":110,"usr":5167000674488976939,"detailed_name":"int (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexHeld","short_name_offset":48,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"8212:9-8212:19|50|2|2","extent":"8212:3-8212:37|50|2|0","uses":[],"kind":8,"storage":0},{"id":111,"usr":2642582502140068824,"detailed_name":"int (*)(sqlite3_mutex *) sqlite3_mutex_methods::xMutexNotheld","short_name_offset":48,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"8213:9-8213:22|50|2|2","extent":"8213:3-8213:40|50|2|0","uses":[],"kind":8,"storage":0},{"id":112,"usr":12813295026396978726,"detailed_name":"void *sqlite3_pcache_page::pBuf","short_name_offset":27,"short_name_size":4,"hover":"","comments":"The content of the page","declarations":[],"spell":"8978:9-8978:13|56|2|2","extent":"8978:3-8978:13|56|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":113,"usr":17400609526478874548,"detailed_name":"void *sqlite3_pcache_page::pExtra","short_name_offset":27,"short_name_size":6,"hover":"","comments":"Extra information associated with the page","declarations":[],"spell":"8979:9-8979:15|56|2|2","extent":"8979:3-8979:15|56|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":114,"usr":7677767096231963001,"detailed_name":"int sqlite3_pcache_methods2::iVersion","short_name_offset":29,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"9143:7-9143:15|58|2|2","extent":"9143:3-9143:15|58|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":115,"usr":12218751768834168029,"detailed_name":"void *sqlite3_pcache_methods2::pArg","short_name_offset":31,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"9144:9-9144:13|58|2|2","extent":"9144:3-9144:13|58|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":116,"usr":14356462607557937925,"detailed_name":"int (*)(void *) sqlite3_pcache_methods2::xInit","short_name_offset":41,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"9145:9-9145:14|58|2|2","extent":"9145:3-9145:22|58|2|0","uses":[],"kind":8,"storage":0},{"id":117,"usr":18182092946232749571,"detailed_name":"void (*)(void *) sqlite3_pcache_methods2::xShutdown","short_name_offset":42,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"9146:10-9146:19|58|2|2","extent":"9146:3-9146:27|58|2|0","uses":[],"kind":8,"storage":0},{"id":118,"usr":15014075576139934419,"detailed_name":"sqlite3_pcache *(*)(int, int, int) sqlite3_pcache_methods2::xCreate","short_name_offset":60,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"9147:21-9147:28|58|2|2","extent":"9147:3-9147:70|58|2|0","uses":[],"kind":8,"storage":0},{"id":119,"usr":5312407308168613505,"detailed_name":"void (*)(sqlite3_pcache *, int) sqlite3_pcache_methods2::xCachesize","short_name_offset":57,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"9148:10-9148:20|58|2|2","extent":"9148:3-9148:54|58|2|0","uses":[],"kind":8,"storage":0},{"id":120,"usr":8954886558905103369,"detailed_name":"int (*)(sqlite3_pcache *) sqlite3_pcache_methods2::xPagecount","short_name_offset":51,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"9149:9-9149:19|58|2|2","extent":"9149:3-9149:37|58|2|0","uses":[],"kind":8,"storage":0},{"id":121,"usr":4845410438268883503,"detailed_name":"sqlite3_pcache_page *(*)(sqlite3_pcache *, unsigned int, int) sqlite3_pcache_methods2::xFetch","short_name_offset":87,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9150:26-9150:32|58|2|2","extent":"9150:3-9150:80|58|2|0","uses":[],"kind":8,"storage":0},{"id":122,"usr":6004244566067010852,"detailed_name":"void (*)(sqlite3_pcache *, sqlite3_pcache_page *, int) sqlite3_pcache_methods2::xUnpin","short_name_offset":80,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9151:10-9151:16|58|2|2","extent":"9151:3-9151:69|58|2|0","uses":[],"kind":8,"storage":0},{"id":123,"usr":15882283555265592096,"detailed_name":"void (*)(sqlite3_pcache *, sqlite3_pcache_page *, unsigned int, unsigned int) sqlite3_pcache_methods2::xRekey","short_name_offset":103,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9152:10-9152:16|58|2|2","extent":"9152:3-9153:40|58|2|0","uses":[],"kind":8,"storage":0},{"id":124,"usr":13210081271886973241,"detailed_name":"void (*)(sqlite3_pcache *, unsigned int) sqlite3_pcache_methods2::xTruncate","short_name_offset":66,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"9154:10-9154:19|58|2|2","extent":"9154:3-9154:54|58|2|0","uses":[],"kind":8,"storage":0},{"id":125,"usr":15323685579033273926,"detailed_name":"void (*)(sqlite3_pcache *) sqlite3_pcache_methods2::xDestroy","short_name_offset":52,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"9155:10-9155:18|58|2|2","extent":"9155:3-9155:36|58|2|0","uses":[],"kind":8,"storage":0},{"id":126,"usr":3867795273899841552,"detailed_name":"void (*)(sqlite3_pcache *) sqlite3_pcache_methods2::xShrink","short_name_offset":52,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"9156:10-9156:17|58|2|2","extent":"9156:3-9156:35|58|2|0","uses":[],"kind":8,"storage":0},{"id":127,"usr":13831729967625767615,"detailed_name":"void *sqlite3_pcache_methods::pArg","short_name_offset":30,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"9166:9-9166:13|60|2|2","extent":"9166:3-9166:13|60|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":128,"usr":7604672462303124158,"detailed_name":"int (*)(void *) sqlite3_pcache_methods::xInit","short_name_offset":40,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"9167:9-9167:14|60|2|2","extent":"9167:3-9167:22|60|2|0","uses":[],"kind":8,"storage":0},{"id":129,"usr":3775806025188037382,"detailed_name":"void (*)(void *) sqlite3_pcache_methods::xShutdown","short_name_offset":41,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"9168:10-9168:19|60|2|2","extent":"9168:3-9168:27|60|2|0","uses":[],"kind":8,"storage":0},{"id":130,"usr":197365462733387177,"detailed_name":"sqlite3_pcache *(*)(int, int) sqlite3_pcache_methods::xCreate","short_name_offset":54,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"9169:21-9169:28|60|2|2","extent":"9169:3-9169:57|60|2|0","uses":[],"kind":8,"storage":0},{"id":131,"usr":10188752656795481882,"detailed_name":"void (*)(sqlite3_pcache *, int) sqlite3_pcache_methods::xCachesize","short_name_offset":56,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"9170:10-9170:20|60|2|2","extent":"9170:3-9170:54|60|2|0","uses":[],"kind":8,"storage":0},{"id":132,"usr":1274304013673634028,"detailed_name":"int (*)(sqlite3_pcache *) sqlite3_pcache_methods::xPagecount","short_name_offset":50,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"9171:9-9171:19|60|2|2","extent":"9171:3-9171:37|60|2|0","uses":[],"kind":8,"storage":0},{"id":133,"usr":1149769442971597000,"detailed_name":"void *(*)(sqlite3_pcache *, unsigned int, int) sqlite3_pcache_methods::xFetch","short_name_offset":71,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9172:11-9172:17|60|2|2","extent":"9172:3-9172:65|60|2|0","uses":[],"kind":8,"storage":0},{"id":134,"usr":3499637128815834987,"detailed_name":"void (*)(sqlite3_pcache *, void *, int) sqlite3_pcache_methods::xUnpin","short_name_offset":64,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9173:10-9173:16|60|2|2","extent":"9173:3-9173:54|60|2|0","uses":[],"kind":8,"storage":0},{"id":135,"usr":1301580907734388709,"detailed_name":"void (*)(sqlite3_pcache *, void *, unsigned int, unsigned int) sqlite3_pcache_methods::xRekey","short_name_offset":87,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"9174:10-9174:16|60|2|2","extent":"9174:3-9174:75|60|2|0","uses":[],"kind":8,"storage":0},{"id":136,"usr":13875825098137292133,"detailed_name":"void (*)(sqlite3_pcache *, unsigned int) sqlite3_pcache_methods::xTruncate","short_name_offset":65,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"9175:10-9175:19|60|2|2","extent":"9175:3-9175:54|60|2|0","uses":[],"kind":8,"storage":0},{"id":137,"usr":14451364465648300393,"detailed_name":"void (*)(sqlite3_pcache *) sqlite3_pcache_methods::xDestroy","short_name_offset":51,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"9176:10-9176:18|60|2|2","extent":"9176:3-9176:36|60|2|0","uses":[],"kind":8,"storage":0},{"id":138,"usr":17033800305749965950,"detailed_name":"unsigned char [48] sqlite3_snapshot::hidden","short_name_offset":37,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"10571:17-10571:23|64|2|2","extent":"10571:3-10571:27|64|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":139,"usr":8036797180815891637,"detailed_name":"void *sqlite3_rtree_geometry::pContext","short_name_offset":30,"short_name_size":8,"hover":"","comments":"Copy of pContext passed to s_r_g_c()","declarations":[],"spell":"10968:9-10968:17|66|2|2","extent":"10968:3-10968:17|66|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":140,"usr":10308321146297081792,"detailed_name":"int sqlite3_rtree_geometry::nParam","short_name_offset":28,"short_name_size":6,"hover":"","comments":"Size of array aParam[]","declarations":[],"spell":"10969:7-10969:13|66|2|2","extent":"10969:3-10969:13|66|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":141,"usr":1465493942897297813,"detailed_name":"sqlite3_rtree_dbl *sqlite3_rtree_geometry::aParam","short_name_offset":43,"short_name_size":6,"hover":"","comments":"Parameters passed to SQL geom function","declarations":[],"spell":"10970:22-10970:28|66|2|2","extent":"10970:3-10970:28|66|2|0","type":70,"uses":[],"kind":8,"storage":0},{"id":142,"usr":15341214675618040870,"detailed_name":"void *sqlite3_rtree_geometry::pUser","short_name_offset":30,"short_name_size":5,"hover":"","comments":"Callback implementation user data","declarations":[],"spell":"10971:9-10971:14|66|2|2","extent":"10971:3-10971:14|66|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":143,"usr":4948762396196331446,"detailed_name":"void (*)(void *) sqlite3_rtree_geometry::xDelUser","short_name_offset":41,"short_name_size":8,"hover":"","comments":"Called by SQLite to clean up pUser","declarations":[],"spell":"10972:10-10972:18|66|2|2","extent":"10972:3-10972:27|66|2|0","uses":[],"kind":8,"storage":0},{"id":144,"usr":71101168488052579,"detailed_name":"void *sqlite3_rtree_query_info::pContext","short_name_offset":32,"short_name_size":8,"hover":"","comments":"pContext from when function registered","declarations":[],"spell":"11000:9-11000:17|68|2|2","extent":"11000:3-11000:17|68|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":145,"usr":4421944987826249066,"detailed_name":"int sqlite3_rtree_query_info::nParam","short_name_offset":30,"short_name_size":6,"hover":"","comments":"Number of function parameters","declarations":[],"spell":"11001:7-11001:13|68|2|2","extent":"11001:3-11001:13|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":146,"usr":4802860243899092693,"detailed_name":"sqlite3_rtree_dbl *sqlite3_rtree_query_info::aParam","short_name_offset":45,"short_name_size":6,"hover":"","comments":"value of function parameters","declarations":[],"spell":"11002:22-11002:28|68|2|2","extent":"11002:3-11002:28|68|2|0","type":70,"uses":[],"kind":8,"storage":0},{"id":147,"usr":13941366527249269554,"detailed_name":"void *sqlite3_rtree_query_info::pUser","short_name_offset":32,"short_name_size":5,"hover":"","comments":"callback can use this, if desired","declarations":[],"spell":"11003:9-11003:14|68|2|2","extent":"11003:3-11003:14|68|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":148,"usr":9908659387014023610,"detailed_name":"void (*)(void *) sqlite3_rtree_query_info::xDelUser","short_name_offset":43,"short_name_size":8,"hover":"","comments":"function to free pUser","declarations":[],"spell":"11004:10-11004:18|68|2|2","extent":"11004:3-11004:26|68|2|0","uses":[],"kind":8,"storage":0},{"id":149,"usr":13743092172585652060,"detailed_name":"sqlite3_rtree_dbl *sqlite3_rtree_query_info::aCoord","short_name_offset":45,"short_name_size":6,"hover":"","comments":"Coordinates of node or entry to check","declarations":[],"spell":"11005:22-11005:28|68|2|2","extent":"11005:3-11005:28|68|2|0","type":70,"uses":[],"kind":8,"storage":0},{"id":150,"usr":6419599074752504890,"detailed_name":"unsigned int *sqlite3_rtree_query_info::anQueue","short_name_offset":40,"short_name_size":7,"hover":"","comments":"Number of pending entries in the queue","declarations":[],"spell":"11006:17-11006:24|68|2|2","extent":"11006:3-11006:24|68|2|0","type":71,"uses":[],"kind":8,"storage":0},{"id":151,"usr":16056368238885434999,"detailed_name":"int sqlite3_rtree_query_info::nCoord","short_name_offset":30,"short_name_size":6,"hover":"","comments":"Number of coordinates","declarations":[],"spell":"11007:7-11007:13|68|2|2","extent":"11007:3-11007:13|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":152,"usr":2429651024972746869,"detailed_name":"int sqlite3_rtree_query_info::iLevel","short_name_offset":30,"short_name_size":6,"hover":"","comments":"Level of current node or entry","declarations":[],"spell":"11008:7-11008:13|68|2|2","extent":"11008:3-11008:13|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":153,"usr":16616870692206661509,"detailed_name":"int sqlite3_rtree_query_info::mxLevel","short_name_offset":30,"short_name_size":7,"hover":"","comments":"The largest iLevel value in the tree","declarations":[],"spell":"11009:7-11009:14|68|2|2","extent":"11009:3-11009:14|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":154,"usr":7784276907345385141,"detailed_name":"sqlite3_int64 sqlite3_rtree_query_info::iRowid","short_name_offset":40,"short_name_size":6,"hover":"","comments":"Rowid for current entry","declarations":[],"spell":"11010:17-11010:23|68|2|2","extent":"11010:3-11010:23|68|2|0","type":7,"uses":[],"kind":8,"storage":0},{"id":155,"usr":9776060029075990188,"detailed_name":"sqlite3_rtree_dbl sqlite3_rtree_query_info::rParentScore","short_name_offset":44,"short_name_size":12,"hover":"","comments":"Score of parent node","declarations":[],"spell":"11011:21-11011:33|68|2|2","extent":"11011:3-11011:33|68|2|0","type":70,"uses":[],"kind":8,"storage":0},{"id":156,"usr":11656909200370277474,"detailed_name":"int sqlite3_rtree_query_info::eParentWithin","short_name_offset":30,"short_name_size":13,"hover":"","comments":"Visibility of parent node","declarations":[],"spell":"11012:7-11012:20|68|2|2","extent":"11012:3-11012:20|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":157,"usr":14200031590750996951,"detailed_name":"int sqlite3_rtree_query_info::eWithin","short_name_offset":30,"short_name_size":7,"hover":"","comments":"OUT: Visibility","declarations":[],"spell":"11013:7-11013:14|68|2|2","extent":"11013:3-11013:14|68|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":158,"usr":6169241076370367320,"detailed_name":"sqlite3_rtree_dbl sqlite3_rtree_query_info::rScore","short_name_offset":44,"short_name_size":6,"hover":"","comments":"OUT: Write the score here","declarations":[],"spell":"11014:21-11014:27|68|2|2","extent":"11014:3-11014:27|68|2|0","type":70,"uses":[],"kind":8,"storage":0},{"id":159,"usr":12648759137898924527,"detailed_name":"sqlite3_value **sqlite3_rtree_query_info::apSqlParam","short_name_offset":42,"short_name_size":10,"hover":"","comments":"Original SQL values of parameters","declarations":[],"spell":"11016:19-11016:29|68|2|2","extent":"11016:3-11016:29|68|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":160,"usr":2702395989698255388,"detailed_name":"const unsigned char *Fts5PhraseIter::a","short_name_offset":37,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"12913:24-12913:25|76|2|2","extent":"12913:3-12913:25|76|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":161,"usr":13841419583529440229,"detailed_name":"const unsigned char *Fts5PhraseIter::b","short_name_offset":37,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"12914:24-12914:25|76|2|2","extent":"12914:3-12914:25|76|2|0","type":44,"uses":[],"kind":8,"storage":0},{"id":162,"usr":9612634335640888709,"detailed_name":"int Fts5ExtensionApi::iVersion","short_name_offset":22,"short_name_size":8,"hover":"","comments":"Currently always set to 4","declarations":[],"spell":"13214:7-13214:15|72|2|2","extent":"13214:3-13214:15|72|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":163,"usr":8003328097304379844,"detailed_name":"void *(*)(Fts5Context *) Fts5ExtensionApi::xUserData","short_name_offset":43,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"13216:11-13216:20|72|2|2","extent":"13216:3-13216:35|72|2|0","uses":[],"kind":8,"storage":0},{"id":164,"usr":17808484079604926473,"detailed_name":"int (*)(Fts5Context *) Fts5ExtensionApi::xColumnCount","short_name_offset":41,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"13218:9-13218:21|72|2|2","extent":"13218:3-13218:36|72|2|0","uses":[],"kind":8,"storage":0},{"id":165,"usr":16816641411745016874,"detailed_name":"int (*)(Fts5Context *, sqlite3_int64 *) Fts5ExtensionApi::xRowCount","short_name_offset":58,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"13219:9-13219:18|72|2|2","extent":"13219:3-13219:55|72|2|0","uses":[],"kind":8,"storage":0},{"id":166,"usr":5224865282768581590,"detailed_name":"int (*)(Fts5Context *, int, sqlite3_int64 *) Fts5ExtensionApi::xColumnTotalSize","short_name_offset":63,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"13220:9-13220:25|72|2|2","extent":"13220:3-13220:74|72|2|0","uses":[],"kind":8,"storage":0},{"id":167,"usr":13496650189516364699,"detailed_name":"int (*)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int)) Fts5ExtensionApi::xTokenize","short_name_offset":119,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"13222:9-13222:18|72|2|2","extent":"13222:3-13226:4|72|2|0","uses":[],"kind":8,"storage":0},{"id":168,"usr":8478951190344626412,"detailed_name":"int (*)(Fts5Context *) Fts5ExtensionApi::xPhraseCount","short_name_offset":41,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"13228:9-13228:21|72|2|2","extent":"13228:3-13228:36|72|2|0","uses":[],"kind":8,"storage":0},{"id":169,"usr":6014677313737600738,"detailed_name":"int (*)(Fts5Context *, int) Fts5ExtensionApi::xPhraseSize","short_name_offset":46,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13229:9-13229:20|72|2|2","extent":"13229:3-13229:48|72|2|0","uses":[],"kind":8,"storage":0},{"id":170,"usr":4061394728738783563,"detailed_name":"int (*)(Fts5Context *, int *) Fts5ExtensionApi::xInstCount","short_name_offset":48,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"13231:9-13231:19|72|2|2","extent":"13231:3-13231:47|72|2|0","uses":[],"kind":8,"storage":0},{"id":171,"usr":7992080129217504550,"detailed_name":"int (*)(Fts5Context *, int, int *, int *, int *) Fts5ExtensionApi::xInst","short_name_offset":67,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"13232:9-13232:14|72|2|2","extent":"13232:3-13232:78|72|2|0","uses":[],"kind":8,"storage":0},{"id":172,"usr":2994458237170881514,"detailed_name":"sqlite3_int64 (*)(Fts5Context *) Fts5ExtensionApi::xRowid","short_name_offset":51,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"13234:19-13234:25|72|2|2","extent":"13234:3-13234:40|72|2|0","uses":[],"kind":8,"storage":0},{"id":173,"usr":12633398137407674125,"detailed_name":"int (*)(Fts5Context *, int, const char **, int *) Fts5ExtensionApi::xColumnText","short_name_offset":68,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13235:9-13235:20|72|2|2","extent":"13235:3-13235:71|72|2|0","uses":[],"kind":8,"storage":0},{"id":174,"usr":11797546574179904157,"detailed_name":"int (*)(Fts5Context *, int, int *) Fts5ExtensionApi::xColumnSize","short_name_offset":53,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13236:9-13236:20|72|2|2","extent":"13236:3-13236:59|72|2|0","uses":[],"kind":8,"storage":0},{"id":175,"usr":2750798938025969587,"detailed_name":"int (*)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *)) Fts5ExtensionApi::xQueryPhrase","short_name_offset":112,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"13238:9-13238:21|72|2|2","extent":"13238:3-13240:4|72|2|0","uses":[],"kind":8,"storage":0},{"id":176,"usr":2682987676472311232,"detailed_name":"int (*)(Fts5Context *, void *, void (*)(void *)) Fts5ExtensionApi::xSetAuxdata","short_name_offset":67,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13241:9-13241:20|72|2|2","extent":"13241:3-13241:70|72|2|0","uses":[],"kind":8,"storage":0},{"id":177,"usr":17968840279732017890,"detailed_name":"void *(*)(Fts5Context *, int) Fts5ExtensionApi::xGetAuxdata","short_name_offset":48,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13242:11-13242:22|72|2|2","extent":"13242:3-13242:49|72|2|0","uses":[],"kind":8,"storage":0},{"id":178,"usr":9081784092795726968,"detailed_name":"int (*)(Fts5Context *, int, Fts5PhraseIter *, int *, int *) Fts5ExtensionApi::xPhraseFirst","short_name_offset":78,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"13244:9-13244:21|72|2|2","extent":"13244:3-13244:78|72|2|0","uses":[],"kind":8,"storage":0},{"id":179,"usr":11723991484712868817,"detailed_name":"void (*)(Fts5Context *, Fts5PhraseIter *, int *, int *) Fts5ExtensionApi::xPhraseNext","short_name_offset":74,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"13245:10-13245:21|72|2|2","extent":"13245:3-13245:77|72|2|0","uses":[],"kind":8,"storage":0},{"id":180,"usr":2496689918491441823,"detailed_name":"int (*)(Fts5Context *, int, Fts5PhraseIter *, int *) Fts5ExtensionApi::xPhraseFirstColumn","short_name_offset":71,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"13247:9-13247:27|72|2|2","extent":"13247:3-13247:78|72|2|0","uses":[],"kind":8,"storage":0},{"id":181,"usr":1341117001240897992,"detailed_name":"void (*)(Fts5Context *, Fts5PhraseIter *, int *) Fts5ExtensionApi::xPhraseNextColumn","short_name_offset":67,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"13248:10-13248:27|72|2|2","extent":"13248:3-13248:71|72|2|0","uses":[],"kind":8,"storage":0},{"id":182,"usr":4443906101256382522,"detailed_name":"int (*)(Fts5Context *, int, int, const char **, int *) Fts5ExtensionApi::xQueryToken","short_name_offset":73,"short_name_size":11,"hover":"","comments":"Below this point are iVersion>=3 only","declarations":[],"spell":"13251:9-13251:20|72|2|2","extent":"13251:3-13254:4|72|2|0","uses":[],"kind":8,"storage":0},{"id":183,"usr":6430149549275144716,"detailed_name":"int (*)(Fts5Context *, int, int, const char **, int *) Fts5ExtensionApi::xInstToken","short_name_offset":73,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"13255:9-13255:19|72|2|2","extent":"13255:3-13255:76|72|2|0","uses":[],"kind":8,"storage":0},{"id":184,"usr":9276897432996761015,"detailed_name":"int (*)(Fts5Context *, int, const char **, int *) Fts5ExtensionApi::xColumnLocale","short_name_offset":68,"short_name_size":13,"hover":"","comments":"Below this point are iVersion>=4 only","declarations":[],"spell":"13258:9-13258:22|72|2|2","extent":"13258:3-13258:73|72|2|0","uses":[],"kind":8,"storage":0},{"id":185,"usr":9502852063910414115,"detailed_name":"int (*)(Fts5Context *, const char *, int, const char *, int, void *, int (*)(void *, int, const char *, int, int, int)) Fts5ExtensionApi::xTokenize_v2","short_name_offset":138,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"13259:9-13259:21|72|2|2","extent":"13259:3-13264:4|72|2|0","uses":[],"kind":8,"storage":0},{"id":186,"usr":16026652319484558538,"detailed_name":"int fts5_tokenizer_v2::iVersion","short_name_offset":23,"short_name_size":8,"hover":"","comments":"Currently always 2","declarations":[],"spell":"13497:7-13497:15|81|2|2","extent":"13497:3-13497:15|81|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":187,"usr":15039615205681081348,"detailed_name":"int (*)(void *, const char **, int, Fts5Tokenizer **) fts5_tokenizer_v2::xCreate","short_name_offset":73,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"13499:9-13499:16|81|2|2","extent":"13499:3-13499:77|81|2|0","uses":[],"kind":8,"storage":0},{"id":188,"usr":1989063028556004792,"detailed_name":"void (*)(Fts5Tokenizer *) fts5_tokenizer_v2::xDelete","short_name_offset":45,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"13500:10-13500:17|81|2|2","extent":"13500:3-13500:34|81|2|0","uses":[],"kind":8,"storage":0},{"id":189,"usr":1790308855273521405,"detailed_name":"int (*)(Fts5Tokenizer *, void *, int, const char *, int, const char *, int, int (*)(void *, int, const char *, int, int, int)) fts5_tokenizer_v2::xTokenize","short_name_offset":146,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"13501:9-13501:18|81|2|2","extent":"13501:3-13514:4|81|2|0","uses":[],"kind":8,"storage":0},{"id":190,"usr":11777588047730813243,"detailed_name":"int (*)(void *, const char **, int, Fts5Tokenizer **) fts5_tokenizer::xCreate","short_name_offset":70,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"13524:9-13524:16|83|2|2","extent":"13524:3-13524:77|83|2|0","uses":[],"kind":8,"storage":0},{"id":191,"usr":6760947892159289902,"detailed_name":"void (*)(Fts5Tokenizer *) fts5_tokenizer::xDelete","short_name_offset":42,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"13525:10-13525:17|83|2|2","extent":"13525:3-13525:34|83|2|0","uses":[],"kind":8,"storage":0},{"id":192,"usr":12810125419147920783,"detailed_name":"int (*)(Fts5Tokenizer *, void *, int, const char *, int, int (*)(void *, int, const char *, int, int, int)) fts5_tokenizer::xTokenize","short_name_offset":124,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"13526:9-13526:18|83|2|2","extent":"13526:3-13538:4|83|2|0","uses":[],"kind":8,"storage":0},{"id":193,"usr":6232321511607816391,"detailed_name":"int fts5_api::iVersion","short_name_offset":14,"short_name_size":8,"hover":"","comments":"Currently always set to 3","declarations":[],"spell":"13561:7-13561:15|85|2|2","extent":"13561:3-13561:15|85|2|0","type":15,"uses":[],"kind":8,"storage":0},{"id":194,"usr":1912307503276249777,"detailed_name":"int (*)(fts5_api *, const char *, void *, fts5_tokenizer *, void (*)(void *)) fts5_api::xCreateTokenizer","short_name_offset":88,"short_name_size":16,"hover":"","comments":"Create a new tokenizer","declarations":[],"spell":"13564:9-13564:25|85|2|2","extent":"13564:3-13570:4|85|2|0","uses":[],"kind":8,"storage":0},{"id":195,"usr":13649759722518298521,"detailed_name":"int (*)(fts5_api *, const char *, void **, fts5_tokenizer *) fts5_api::xFindTokenizer","short_name_offset":71,"short_name_size":14,"hover":"","comments":"Find an existing tokenizer","declarations":[],"spell":"13573:9-13573:23|85|2|2","extent":"13573:3-13578:4|85|2|0","uses":[],"kind":8,"storage":0},{"id":196,"usr":6278193548356259019,"detailed_name":"int (*)(fts5_api *, const char *, void *, fts5_extension_function, void (*)(void *)) fts5_api::xCreateFunction","short_name_offset":95,"short_name_size":15,"hover":"","comments":"Create a new auxiliary function","declarations":[],"spell":"13581:9-13581:24|85|2|2","extent":"13581:3-13587:4|85|2|0","uses":[],"kind":8,"storage":0},{"id":197,"usr":5584783212253319076,"detailed_name":"int (*)(fts5_api *, const char *, void *, fts5_tokenizer_v2 *, void (*)(void *)) fts5_api::xCreateTokenizer_v2","short_name_offset":91,"short_name_size":19,"hover":"","comments":"Create a new tokenizer","declarations":[],"spell":"13592:9-13592:28|85|2|2","extent":"13592:3-13598:4|85|2|0","uses":[],"kind":8,"storage":0},{"id":198,"usr":10852348079284757148,"detailed_name":"int (*)(fts5_api *, const char *, void **, fts5_tokenizer_v2 **) fts5_api::xFindTokenizer_v2","short_name_offset":75,"short_name_size":17,"hover":"","comments":"Find an existing tokenizer","declarations":[],"spell":"13601:9-13601:26|85|2|2","extent":"13601:3-13606:4|85|2|0","uses":[],"kind":8,"storage":0},{"id":199,"usr":2363947833168837031,"detailed_name":"SQLITE3_H","short_name_offset":0,"short_name_size":9,"hover":"#define SQLITE3_H","comments":"","declarations":[],"spell":"34:9-34:18|-1|1|2","extent":"34:9-34:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":200,"usr":6899744554554580474,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["40:8-40:19|-1|1|4","10910:8-10910:19|-1|1|4","10933:8-10933:19|-1|1|4","11027:8-11027:19|-1|1|4","12889:8-12889:19|-1|1|4","13613:8-13613:19|-1|1|4"],"kind":0,"storage":0},{"id":201,"usr":11186187537560282792,"detailed_name":"SQLITE_EXTERN","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_EXTERN extern","comments":"","declarations":[],"spell":"72:10-72:23|-1|1|2","extent":"72:10-72:30|-1|1|0","uses":["185:12-185:25|-1|1|4","6542:12-6542:25|-1|1|4","6579:12-6579:25|-1|1|4"],"kind":255,"storage":0},{"id":202,"usr":8301597003392584017,"detailed_name":"SQLITE_API","short_name_offset":0,"short_name_size":10,"hover":"#define SQLITE_API","comments":"","declarations":[],"spell":"75:10-75:20|-1|1|2","extent":"75:10-75:20|-1|1|0","uses":["185:1-185:11|-1|1|4","186:1-186:11|-1|1|4","187:1-187:11|-1|1|4","188:1-188:11|-1|1|4","213:1-213:11|-1|1|4","214:1-214:11|-1|1|4","256:1-256:11|-1|1|4","353:1-353:11|-1|1|4","354:1-354:11|-1|1|4","427:1-427:11|-1|1|4","1658:1-1658:11|-1|1|4","1659:1-1659:11|-1|1|4","1660:1-1660:11|-1|1|4","1661:1-1661:11|-1|1|4","1697:1-1697:11|-1|1|4","1716:1-1716:11|-1|1|4","2558:1-2558:11|-1|1|4","2620:1-2620:11|-1|1|4","2630:1-2630:11|-1|1|4","2695:1-2695:11|-1|1|4","2696:1-2696:11|-1|1|4","2737:1-2737:11|-1|1|4","2738:1-2738:11|-1|1|4","2779:1-2779:11|-1|1|4","2780:1-2780:11|-1|1|4","2815:1-2815:11|-1|1|4","2816:1-2816:11|-1|1|4","2877:1-2877:11|-1|1|4","2900:1-2900:11|-1|1|4","2975:1-2975:11|-1|1|4","2983:1-2983:11|-1|1|4","3025:1-3025:11|-1|1|4","3026:1-3026:11|-1|1|4","3027:1-3027:11|-1|1|4","3028:1-3028:11|-1|1|4","3105:1-3105:11|-1|1|4","3106:1-3106:11|-1|1|4","3107:1-3107:11|-1|1|4","3108:1-3108:11|-1|1|4","3109:1-3109:11|-1|1|4","3110:1-3110:11|-1|1|4","3135:1-3135:11|-1|1|4","3136:1-3136:11|-1|1|4","3159:1-3159:11|-1|1|4","3250:1-3250:11|-1|1|4","3358:1-3358:11|-1|1|4","3360:1-3360:11|-1|1|4","3451:1-3451:11|-1|1|4","3497:1-3497:11|-1|1|4","3777:1-3777:11|-1|1|4","3781:1-3781:11|-1|1|4","3785:1-3785:11|-1|1|4","3858:1-3858:11|-1|1|4","3859:1-3859:11|-1|1|4","3860:1-3860:11|-1|1|4","3861:1-3861:11|-1|1|4","3890:1-3890:11|-1|1|4","3891:1-3891:11|-1|1|4","3892:1-3892:11|-1|1|4","3911:1-3911:11|-1|1|4","3958:1-3958:11|-1|1|4","3965:1-3965:11|-1|1|4","4030:1-4030:11|-1|1|4","4031:1-4031:11|-1|1|4","4032:1-4032:11|-1|1|4","4033:1-4033:11|-1|1|4","4034:1-4034:11|-1|1|4","4035:1-4035:11|-1|1|4","4103:1-4103:11|-1|1|4","4328:1-4328:11|-1|1|4","4335:1-4335:11|-1|1|4","4342:1-4342:11|-1|1|4","4350:1-4350:11|-1|1|4","4357:1-4357:11|-1|1|4","4364:1-4364:11|-1|1|4","4414:1-4414:11|-1|1|4","4415:1-4415:11|-1|1|4","4467:1-4467:11|-1|1|4","4479:1-4479:11|-1|1|4","4514:1-4514:11|-1|1|4","4535:1-4535:11|-1|1|4","4735:1-4735:11|-1|1|4","4736:1-4736:11|-1|1|4","4738:1-4738:11|-1|1|4","4739:1-4739:11|-1|1|4","4740:1-4740:11|-1|1|4","4741:1-4741:11|-1|1|4","4742:1-4742:11|-1|1|4","4743:1-4743:11|-1|1|4","4744:1-4744:11|-1|1|4","4746:1-4746:11|-1|1|4","4747:1-4747:11|-1|1|4","4748:1-4748:11|-1|1|4","4749:1-4749:11|-1|1|4","4770:1-4770:11|-1|1|4","4798:1-4798:11|-1|1|4","4816:1-4816:11|-1|1|4","4826:1-4826:11|-1|1|4","4842:1-4842:11|-1|1|4","4871:1-4871:11|-1|1|4","4872:1-4872:11|-1|1|4","4916:1-4916:11|-1|1|4","4917:1-4917:11|-1|1|4","4918:1-4918:11|-1|1|4","4919:1-4919:11|-1|1|4","4920:1-4920:11|-1|1|4","4921:1-4921:11|-1|1|4","4953:1-4953:11|-1|1|4","4954:1-4954:11|-1|1|4","5038:1-5038:11|-1|1|4","5059:1-5059:11|-1|1|4","5306:1-5306:11|-1|1|4","5307:1-5307:11|-1|1|4","5308:1-5308:11|-1|1|4","5309:1-5309:11|-1|1|4","5310:1-5310:11|-1|1|4","5311:1-5311:11|-1|1|4","5312:1-5312:11|-1|1|4","5313:1-5313:11|-1|1|4","5314:1-5314:11|-1|1|4","5315:1-5315:11|-1|1|4","5343:1-5343:11|-1|1|4","5382:1-5382:11|-1|1|4","5508:1-5508:11|-1|1|4","5518:1-5518:11|-1|1|4","5528:1-5528:11|-1|1|4","5539:1-5539:11|-1|1|4","5682:1-5682:11|-1|1|4","5683:1-5683:11|-1|1|4","5684:1-5684:11|-1|1|4","5685:1-5685:11|-1|1|4","5686:1-5686:11|-1|1|4","5687:1-5687:11|-1|1|4","5819:1-5819:11|-1|1|4","5820:1-5820:11|-1|1|4","5821:1-5821:11|-1|1|4","5822:1-5822:11|-1|1|4","5823:1-5823:11|-1|1|4","5824:1-5824:11|-1|1|4","5825:1-5825:11|-1|1|4","5826:1-5826:11|-1|1|4","5827:1-5827:11|-1|1|4","5828:1-5828:11|-1|1|4","5829:1-5829:11|-1|1|4","5830:1-5830:11|-1|1|4","5831:1-5831:11|-1|1|4","5832:1-5832:11|-1|1|4","5833:1-5833:11|-1|1|4","5855:1-5855:11|-1|1|4","5873:1-5873:11|-1|1|4","5890:1-5890:11|-1|1|4","5891:1-5891:11|-1|1|4","5936:1-5936:11|-1|1|4","5951:1-5951:11|-1|1|4","5963:1-5963:11|-1|1|4","6032:1-6032:11|-1|1|4","6033:1-6033:11|-1|1|4","6088:1-6088:11|-1|1|4","6089:1-6089:11|-1|1|4","6256:1-6256:11|-1|1|4","6257:1-6257:11|-1|1|4","6259:1-6259:11|-1|1|4","6260:1-6260:11|-1|1|4","6261:1-6261:11|-1|1|4","6262:1-6262:11|-1|1|4","6263:1-6263:11|-1|1|4","6264:1-6264:11|-1|1|4","6265:1-6265:11|-1|1|4","6266:1-6266:11|-1|1|4","6267:1-6267:11|-1|1|4","6268:1-6268:11|-1|1|4","6269:1-6269:11|-1|1|4","6271:1-6271:11|-1|1|4","6272:1-6272:11|-1|1|4","6273:1-6273:11|-1|1|4","6274:1-6274:11|-1|1|4","6275:1-6275:11|-1|1|4","6276:1-6276:11|-1|1|4","6277:1-6277:11|-1|1|4","6306:1-6306:11|-1|1|4","6389:1-6389:11|-1|1|4","6396:1-6396:11|-1|1|4","6404:1-6404:11|-1|1|4","6439:1-6439:11|-1|1|4","6444:1-6444:11|-1|1|4","6484:1-6484:11|-1|1|4","6542:1-6542:11|-1|1|4","6579:1-6579:11|-1|1|4","6600:1-6600:11|-1|1|4","6604:1-6604:11|-1|1|4","6605:1-6605:11|-1|1|4","6638:1-6638:11|-1|1|4","6651:1-6651:11|-1|1|4","6673:1-6673:11|-1|1|4","6705:1-6705:11|-1|1|4","6715:1-6715:11|-1|1|4","6733:1-6733:11|-1|1|4","6782:1-6782:11|-1|1|4","6831:1-6831:11|-1|1|4","6832:1-6832:11|-1|1|4","6892:1-6892:11|-1|1|4","6955:1-6955:11|-1|1|4","7005:1-7005:11|-1|1|4","7021:1-7021:11|-1|1|4","7035:1-7035:11|-1|1|4","7101:1-7101:11|-1|1|4","7102:1-7102:11|-1|1|4","7113:1-7113:11|-1|1|4","7185:1-7185:11|-1|1|4","7241:1-7241:11|-1|1|4","7273:1-7273:11|-1|1|4","7311:1-7311:11|-1|1|4","7323:1-7323:11|-1|1|4","7331:1-7331:11|-1|1|4","7634:1-7634:11|-1|1|4","7640:1-7640:11|-1|1|4","7660:1-7660:11|-1|1|4","7720:1-7720:11|-1|1|4","7739:1-7739:11|-1|1|4","7838:1-7838:11|-1|1|4","7871:1-7871:11|-1|1|4","7894:1-7894:11|-1|1|4","7910:1-7910:11|-1|1|4","7939:1-7939:11|-1|1|4","7981:1-7981:11|-1|1|4","8012:1-8012:11|-1|1|4","8013:1-8013:11|-1|1|4","8014:1-8014:11|-1|1|4","8132:1-8132:11|-1|1|4","8133:1-8133:11|-1|1|4","8134:1-8134:11|-1|1|4","8135:1-8135:11|-1|1|4","8136:1-8136:11|-1|1|4","8246:1-8246:11|-1|1|4","8247:1-8247:11|-1|1|4","8291:1-8291:11|-1|1|4","8334:1-8334:11|-1|1|4","8353:1-8353:11|-1|1|4","8451:1-8451:11|-1|1|4","8452:1-8452:11|-1|1|4","8453:1-8453:11|-1|1|4","8498:1-8498:11|-1|1|4","8513:1-8513:11|-1|1|4","8547:1-8547:11|-1|1|4","8548:1-8548:11|-1|1|4","8549:1-8549:11|-1|1|4","8550:1-8550:11|-1|1|4","8551:1-8551:11|-1|1|4","8552:1-8552:11|-1|1|4","8583:1-8583:11|-1|1|4","8584:1-8584:11|-1|1|4","8585:1-8585:11|-1|1|4","8613:1-8613:11|-1|1|4","8614:1-8614:11|-1|1|4","8723:1-8723:11|-1|1|4","8876:1-8876:11|-1|1|4","9388:1-9388:11|-1|1|4","9394:1-9394:11|-1|1|4","9395:1-9395:11|-1|1|4","9396:1-9396:11|-1|1|4","9397:1-9397:11|-1|1|4","9514:1-9514:11|-1|1|4","9529:1-9529:11|-1|1|4","9530:1-9530:11|-1|1|4","9547:1-9547:11|-1|1|4","9570:1-9570:11|-1|1|4","9593:1-9593:11|-1|1|4","9630:1-9630:11|-1|1|4","9665:1-9665:11|-1|1|4","9687:1-9687:11|-1|1|4","9781:1-9781:11|-1|1|4","9821:1-9821:11|-1|1|4","9909:1-9909:11|-1|1|4","9935:1-9935:11|-1|1|4","9970:1-9970:11|-1|1|4","10064:1-10064:11|-1|1|4","10137:1-10137:11|-1|1|4","10184:1-10184:11|-1|1|4","10185:1-10185:11|-1|1|4","10227:1-10227:11|-1|1|4","10356:1-10356:11|-1|1|4","10362:1-10362:11|-1|1|4","10385:1-10385:11|-1|1|4","10418:1-10418:11|-1|1|4","10548:1-10548:11|-1|1|4","10625:1-10625:11|-1|1|4","10674:1-10674:11|-1|1|4","10691:1-10691:11|-1|1|4","10718:1-10718:11|-1|1|4","10746:1-10746:11|-1|1|4","10791:1-10791:11|-1|1|4","10857:1-10857:11|-1|1|4","10955:1-10955:11|-1|1|4","10981:1-10981:11|-1|1|4"],"kind":255,"storage":0},{"id":203,"usr":9597848463943797450,"detailed_name":"SQLITE_CDECL","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_CDECL","comments":"","declarations":[],"spell":"78:10-78:22|-1|1|2","extent":"78:10-78:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":204,"usr":1726348489787575632,"detailed_name":"SQLITE_APICALL","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_APICALL","comments":"","declarations":[],"spell":"81:10-81:24|-1|1|2","extent":"81:10-81:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":205,"usr":2362500573368635286,"detailed_name":"SQLITE_STDCALL","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_STDCALL SQLITE_APICALL","comments":"","declarations":[],"spell":"84:10-84:24|-1|1|2","extent":"84:10-84:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":206,"usr":16421136994839034058,"detailed_name":"SQLITE_CALLBACK","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_CALLBACK","comments":"","declarations":[],"spell":"87:10-87:25|-1|1|2","extent":"87:10-87:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":207,"usr":3141708761853891746,"detailed_name":"SQLITE_SYSAPI","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_SYSAPI","comments":"","declarations":[],"spell":"90:10-90:23|-1|1|2","extent":"90:10-90:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":208,"usr":2109066917626019046,"detailed_name":"SQLITE_DEPRECATED","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_DEPRECATED","comments":"","declarations":[],"spell":"106:9-106:26|-1|1|2","extent":"106:9-106:26|-1|1|0","uses":["3358:12-3358:29|-1|1|4","3360:12-3360:29|-1|1|4","5682:12-5682:29|-1|1|4","5683:12-5683:29|-1|1|4","5684:12-5684:29|-1|1|4","5685:12-5685:29|-1|1|4","5686:12-5686:29|-1|1|4","5687:12-5687:29|-1|1|4","7113:12-7113:29|-1|1|4"],"kind":255,"storage":0},{"id":209,"usr":11149363032403274286,"detailed_name":"SQLITE_EXPERIMENTAL","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_EXPERIMENTAL","comments":"","declarations":[],"spell":"107:9-107:28|-1|1|2","extent":"107:9-107:28|-1|1|0","uses":["10625:12-10625:31|-1|1|4","10674:12-10674:31|-1|1|4","10691:12-10691:31|-1|1|4","10718:12-10718:31|-1|1|4","10746:12-10746:31|-1|1|4"],"kind":255,"storage":0},{"id":210,"usr":11847952971723799787,"detailed_name":"SQLITE_VERSION","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_VERSION        \"3.48.0\"","comments":"","declarations":[],"spell":"149:9-149:23|-1|1|2","extent":"149:9-149:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":211,"usr":4717254954285154165,"detailed_name":"SQLITE_VERSION_NUMBER","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_VERSION_NUMBER 3048000","comments":"","declarations":[],"spell":"150:9-150:30|-1|1|2","extent":"150:9-150:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":212,"usr":3735393135025464387,"detailed_name":"SQLITE_SOURCE_ID","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_SOURCE_ID      \"2025-01-14 11:05:00 d2fe6b05f38d9d7cd78c5d252e99ac59f1aea071d669830c1ffe4e8966e84010\"","comments":"","declarations":[],"spell":"151:9-151:25|-1|1|2","extent":"151:9-151:117|-1|1|0","uses":[],"kind":255,"storage":0},{"id":213,"usr":16792119007763903248,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["297:36-297:48|-1|1|4"],"kind":0,"storage":0},{"id":214,"usr":15927726676497858890,"detailed_name":"SQLITE_OK","short_name_offset":0,"short_name_size":9,"hover":"#define SQLITE_OK           0","comments":"","declarations":[],"spell":"446:9-446:18|-1|1|2","extent":"446:9-446:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":215,"usr":3441903246872070871,"detailed_name":"SQLITE_ERROR","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_ERROR        1","comments":"","declarations":[],"spell":"448:9-448:21|-1|1|2","extent":"448:9-448:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":216,"usr":3373588433864393241,"detailed_name":"SQLITE_INTERNAL","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_INTERNAL     2","comments":"","declarations":[],"spell":"449:9-449:24|-1|1|2","extent":"449:9-449:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":217,"usr":16375252986165735005,"detailed_name":"SQLITE_PERM","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_PERM         3","comments":"","declarations":[],"spell":"450:9-450:20|-1|1|2","extent":"450:9-450:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":218,"usr":14450500258700776560,"detailed_name":"SQLITE_ABORT","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_ABORT        4","comments":"","declarations":[],"spell":"451:9-451:21|-1|1|2","extent":"451:9-451:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":219,"usr":16050923879231120776,"detailed_name":"SQLITE_BUSY","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_BUSY         5","comments":"","declarations":[],"spell":"452:9-452:20|-1|1|2","extent":"452:9-452:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":220,"usr":10374833636268727407,"detailed_name":"SQLITE_LOCKED","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_LOCKED       6","comments":"","declarations":[],"spell":"453:9-453:22|-1|1|2","extent":"453:9-453:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":221,"usr":5128232827925590039,"detailed_name":"SQLITE_NOMEM","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_NOMEM        7","comments":"","declarations":[],"spell":"454:9-454:21|-1|1|2","extent":"454:9-454:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":222,"usr":8088181525540112394,"detailed_name":"SQLITE_READONLY","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_READONLY     8","comments":"","declarations":[],"spell":"455:9-455:24|-1|1|2","extent":"455:9-455:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":223,"usr":5875434408324872800,"detailed_name":"SQLITE_INTERRUPT","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_INTERRUPT    9","comments":"","declarations":[],"spell":"456:9-456:25|-1|1|2","extent":"456:9-456:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":224,"usr":4410521419720841494,"detailed_name":"SQLITE_IOERR","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_IOERR       10","comments":"","declarations":[],"spell":"457:9-457:21|-1|1|2","extent":"457:9-457:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":225,"usr":13889906295733199904,"detailed_name":"SQLITE_CORRUPT","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_CORRUPT     11","comments":"","declarations":[],"spell":"458:9-458:23|-1|1|2","extent":"458:9-458:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":226,"usr":9399910499933303141,"detailed_name":"SQLITE_NOTFOUND","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_NOTFOUND    12","comments":"","declarations":[],"spell":"459:9-459:24|-1|1|2","extent":"459:9-459:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":227,"usr":12019633186676819524,"detailed_name":"SQLITE_FULL","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_FULL        13","comments":"","declarations":[],"spell":"460:9-460:20|-1|1|2","extent":"460:9-460:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":228,"usr":9999260300451191172,"detailed_name":"SQLITE_CANTOPEN","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_CANTOPEN    14","comments":"","declarations":[],"spell":"461:9-461:24|-1|1|2","extent":"461:9-461:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":229,"usr":7271074661251569827,"detailed_name":"SQLITE_PROTOCOL","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_PROTOCOL    15","comments":"","declarations":[],"spell":"462:9-462:24|-1|1|2","extent":"462:9-462:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":230,"usr":8242555275094362112,"detailed_name":"SQLITE_EMPTY","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_EMPTY       16","comments":"","declarations":[],"spell":"463:9-463:21|-1|1|2","extent":"463:9-463:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":231,"usr":1254807234823666168,"detailed_name":"SQLITE_SCHEMA","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_SCHEMA      17","comments":"","declarations":[],"spell":"464:9-464:22|-1|1|2","extent":"464:9-464:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":232,"usr":8994091674221519822,"detailed_name":"SQLITE_TOOBIG","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_TOOBIG      18","comments":"","declarations":[],"spell":"465:9-465:22|-1|1|2","extent":"465:9-465:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":233,"usr":18386752854679844519,"detailed_name":"SQLITE_CONSTRAINT","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_CONSTRAINT  19","comments":"","declarations":[],"spell":"466:9-466:26|-1|1|2","extent":"466:9-466:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":234,"usr":7603978810878466129,"detailed_name":"SQLITE_MISMATCH","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_MISMATCH    20","comments":"","declarations":[],"spell":"467:9-467:24|-1|1|2","extent":"467:9-467:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":235,"usr":16187877184327576594,"detailed_name":"SQLITE_MISUSE","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_MISUSE      21","comments":"","declarations":[],"spell":"468:9-468:22|-1|1|2","extent":"468:9-468:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":236,"usr":7568179418390060817,"detailed_name":"SQLITE_NOLFS","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_NOLFS       22","comments":"","declarations":[],"spell":"469:9-469:21|-1|1|2","extent":"469:9-469:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":237,"usr":13918527265090955668,"detailed_name":"SQLITE_AUTH","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_AUTH        23","comments":"","declarations":[],"spell":"470:9-470:20|-1|1|2","extent":"470:9-470:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":238,"usr":12285072747959223156,"detailed_name":"SQLITE_FORMAT","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_FORMAT      24","comments":"","declarations":[],"spell":"471:9-471:22|-1|1|2","extent":"471:9-471:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":239,"usr":3426709130468606887,"detailed_name":"SQLITE_RANGE","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_RANGE       25","comments":"","declarations":[],"spell":"472:9-472:21|-1|1|2","extent":"472:9-472:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":240,"usr":14696195603511219693,"detailed_name":"SQLITE_NOTADB","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_NOTADB      26","comments":"","declarations":[],"spell":"473:9-473:22|-1|1|2","extent":"473:9-473:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":241,"usr":14007180170055274906,"detailed_name":"SQLITE_NOTICE","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_NOTICE      27","comments":"","declarations":[],"spell":"474:9-474:22|-1|1|2","extent":"474:9-474:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":242,"usr":16873311460439710990,"detailed_name":"SQLITE_WARNING","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_WARNING     28","comments":"","declarations":[],"spell":"475:9-475:23|-1|1|2","extent":"475:9-475:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":243,"usr":17916187824625905742,"detailed_name":"SQLITE_ROW","short_name_offset":0,"short_name_size":10,"hover":"#define SQLITE_ROW         100","comments":"","declarations":[],"spell":"476:9-476:19|-1|1|2","extent":"476:9-476:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":244,"usr":5724267570930301700,"detailed_name":"SQLITE_DONE","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_DONE        101","comments":"","declarations":[],"spell":"477:9-477:20|-1|1|2","extent":"477:9-477:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":245,"usr":11392984508943067442,"detailed_name":"SQLITE_ERROR_MISSING_COLLSEQ","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_ERROR_MISSING_COLLSEQ   (SQLITE_ERROR | (1<<8))","comments":"","declarations":[],"spell":"497:9-497:37|-1|1|2","extent":"497:9-497:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":246,"usr":5629850491190193303,"detailed_name":"SQLITE_ERROR_RETRY","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_ERROR_RETRY             (SQLITE_ERROR | (2<<8))","comments":"","declarations":[],"spell":"498:9-498:27|-1|1|2","extent":"498:9-498:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":247,"usr":15027767559892036040,"detailed_name":"SQLITE_ERROR_SNAPSHOT","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_ERROR_SNAPSHOT          (SQLITE_ERROR | (3<<8))","comments":"","declarations":[],"spell":"499:9-499:30|-1|1|2","extent":"499:9-499:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":248,"usr":5113705392986068946,"detailed_name":"SQLITE_IOERR_READ","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_READ              (SQLITE_IOERR | (1<<8))","comments":"","declarations":[],"spell":"500:9-500:26|-1|1|2","extent":"500:9-500:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":249,"usr":12827100177673878657,"detailed_name":"SQLITE_IOERR_SHORT_READ","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_IOERR_SHORT_READ        (SQLITE_IOERR | (2<<8))","comments":"","declarations":[],"spell":"501:9-501:32|-1|1|2","extent":"501:9-501:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":250,"usr":14645195838545488575,"detailed_name":"SQLITE_IOERR_WRITE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_WRITE             (SQLITE_IOERR | (3<<8))","comments":"","declarations":[],"spell":"502:9-502:27|-1|1|2","extent":"502:9-502:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":251,"usr":3165960162381782383,"detailed_name":"SQLITE_IOERR_FSYNC","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_FSYNC             (SQLITE_IOERR | (4<<8))","comments":"","declarations":[],"spell":"503:9-503:27|-1|1|2","extent":"503:9-503:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":252,"usr":7370212463966209051,"detailed_name":"SQLITE_IOERR_DIR_FSYNC","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOERR_DIR_FSYNC         (SQLITE_IOERR | (5<<8))","comments":"","declarations":[],"spell":"504:9-504:31|-1|1|2","extent":"504:9-504:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":253,"usr":4043221079668889258,"detailed_name":"SQLITE_IOERR_TRUNCATE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOERR_TRUNCATE          (SQLITE_IOERR | (6<<8))","comments":"","declarations":[],"spell":"505:9-505:30|-1|1|2","extent":"505:9-505:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":254,"usr":11151681363587991677,"detailed_name":"SQLITE_IOERR_FSTAT","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_FSTAT             (SQLITE_IOERR | (7<<8))","comments":"","declarations":[],"spell":"506:9-506:27|-1|1|2","extent":"506:9-506:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":255,"usr":1155267593106398563,"detailed_name":"SQLITE_IOERR_UNLOCK","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOERR_UNLOCK            (SQLITE_IOERR | (8<<8))","comments":"","declarations":[],"spell":"507:9-507:28|-1|1|2","extent":"507:9-507:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":256,"usr":17724201837624582378,"detailed_name":"SQLITE_IOERR_RDLOCK","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOERR_RDLOCK            (SQLITE_IOERR | (9<<8))","comments":"","declarations":[],"spell":"508:9-508:28|-1|1|2","extent":"508:9-508:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":257,"usr":4628578588201085204,"detailed_name":"SQLITE_IOERR_DELETE","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOERR_DELETE            (SQLITE_IOERR | (10<<8))","comments":"","declarations":[],"spell":"509:9-509:28|-1|1|2","extent":"509:9-509:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":258,"usr":17603361045177122009,"detailed_name":"SQLITE_IOERR_BLOCKED","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_IOERR_BLOCKED           (SQLITE_IOERR | (11<<8))","comments":"","declarations":[],"spell":"510:9-510:29|-1|1|2","extent":"510:9-510:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":259,"usr":17731231943010732841,"detailed_name":"SQLITE_IOERR_NOMEM","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_NOMEM             (SQLITE_IOERR | (12<<8))","comments":"","declarations":[],"spell":"511:9-511:27|-1|1|2","extent":"511:9-511:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":260,"usr":16918134551485518676,"detailed_name":"SQLITE_IOERR_ACCESS","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOERR_ACCESS            (SQLITE_IOERR | (13<<8))","comments":"","declarations":[],"spell":"512:9-512:28|-1|1|2","extent":"512:9-512:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":261,"usr":3038502462148482158,"detailed_name":"SQLITE_IOERR_CHECKRESERVEDLOCK","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_IOERR_CHECKRESERVEDLOCK (SQLITE_IOERR | (14<<8))","comments":"","declarations":[],"spell":"513:9-513:39|-1|1|2","extent":"513:9-513:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":262,"usr":2839532800398990144,"detailed_name":"SQLITE_IOERR_LOCK","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_LOCK              (SQLITE_IOERR | (15<<8))","comments":"","declarations":[],"spell":"514:9-514:26|-1|1|2","extent":"514:9-514:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":263,"usr":956472799600665490,"detailed_name":"SQLITE_IOERR_CLOSE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_CLOSE             (SQLITE_IOERR | (16<<8))","comments":"","declarations":[],"spell":"515:9-515:27|-1|1|2","extent":"515:9-515:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":264,"usr":13553824076819305906,"detailed_name":"SQLITE_IOERR_DIR_CLOSE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOERR_DIR_CLOSE         (SQLITE_IOERR | (17<<8))","comments":"","declarations":[],"spell":"516:9-516:31|-1|1|2","extent":"516:9-516:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":265,"usr":17383058660184898849,"detailed_name":"SQLITE_IOERR_SHMOPEN","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_IOERR_SHMOPEN           (SQLITE_IOERR | (18<<8))","comments":"","declarations":[],"spell":"517:9-517:29|-1|1|2","extent":"517:9-517:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":266,"usr":16878436513214687703,"detailed_name":"SQLITE_IOERR_SHMSIZE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_IOERR_SHMSIZE           (SQLITE_IOERR | (19<<8))","comments":"","declarations":[],"spell":"518:9-518:29|-1|1|2","extent":"518:9-518:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":267,"usr":14222843801919704162,"detailed_name":"SQLITE_IOERR_SHMLOCK","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_IOERR_SHMLOCK           (SQLITE_IOERR | (20<<8))","comments":"","declarations":[],"spell":"519:9-519:29|-1|1|2","extent":"519:9-519:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":268,"usr":13712138041765653767,"detailed_name":"SQLITE_IOERR_SHMMAP","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOERR_SHMMAP            (SQLITE_IOERR | (21<<8))","comments":"","declarations":[],"spell":"520:9-520:28|-1|1|2","extent":"520:9-520:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":269,"usr":11057986985946945102,"detailed_name":"SQLITE_IOERR_SEEK","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_SEEK              (SQLITE_IOERR | (22<<8))","comments":"","declarations":[],"spell":"521:9-521:26|-1|1|2","extent":"521:9-521:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":270,"usr":12385523117104724570,"detailed_name":"SQLITE_IOERR_DELETE_NOENT","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_IOERR_DELETE_NOENT      (SQLITE_IOERR | (23<<8))","comments":"","declarations":[],"spell":"522:9-522:34|-1|1|2","extent":"522:9-522:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":271,"usr":17083787756912613506,"detailed_name":"SQLITE_IOERR_MMAP","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_MMAP              (SQLITE_IOERR | (24<<8))","comments":"","declarations":[],"spell":"523:9-523:26|-1|1|2","extent":"523:9-523:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":272,"usr":8318956836160560307,"detailed_name":"SQLITE_IOERR_GETTEMPPATH","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_IOERR_GETTEMPPATH       (SQLITE_IOERR | (25<<8))","comments":"","declarations":[],"spell":"524:9-524:33|-1|1|2","extent":"524:9-524:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":273,"usr":14504910295613947477,"detailed_name":"SQLITE_IOERR_CONVPATH","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOERR_CONVPATH          (SQLITE_IOERR | (26<<8))","comments":"","declarations":[],"spell":"525:9-525:30|-1|1|2","extent":"525:9-525:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":274,"usr":7003701145507423794,"detailed_name":"SQLITE_IOERR_VNODE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_IOERR_VNODE             (SQLITE_IOERR | (27<<8))","comments":"","declarations":[],"spell":"526:9-526:27|-1|1|2","extent":"526:9-526:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":275,"usr":527874096902079845,"detailed_name":"SQLITE_IOERR_AUTH","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_AUTH              (SQLITE_IOERR | (28<<8))","comments":"","declarations":[],"spell":"527:9-527:26|-1|1|2","extent":"527:9-527:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":276,"usr":18263888106816648413,"detailed_name":"SQLITE_IOERR_BEGIN_ATOMIC","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_IOERR_BEGIN_ATOMIC      (SQLITE_IOERR | (29<<8))","comments":"","declarations":[],"spell":"528:9-528:34|-1|1|2","extent":"528:9-528:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":277,"usr":1127743646544670922,"detailed_name":"SQLITE_IOERR_COMMIT_ATOMIC","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_IOERR_COMMIT_ATOMIC     (SQLITE_IOERR | (30<<8))","comments":"","declarations":[],"spell":"529:9-529:35|-1|1|2","extent":"529:9-529:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":278,"usr":10510264789906681758,"detailed_name":"SQLITE_IOERR_ROLLBACK_ATOMIC","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_IOERR_ROLLBACK_ATOMIC   (SQLITE_IOERR | (31<<8))","comments":"","declarations":[],"spell":"530:9-530:37|-1|1|2","extent":"530:9-530:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":279,"usr":15062897740509648082,"detailed_name":"SQLITE_IOERR_DATA","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_IOERR_DATA              (SQLITE_IOERR | (32<<8))","comments":"","declarations":[],"spell":"531:9-531:26|-1|1|2","extent":"531:9-531:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":280,"usr":11399154302749296873,"detailed_name":"SQLITE_IOERR_CORRUPTFS","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOERR_CORRUPTFS         (SQLITE_IOERR | (33<<8))","comments":"","declarations":[],"spell":"532:9-532:31|-1|1|2","extent":"532:9-532:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":281,"usr":909864024806235844,"detailed_name":"SQLITE_IOERR_IN_PAGE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_IOERR_IN_PAGE           (SQLITE_IOERR | (34<<8))","comments":"","declarations":[],"spell":"533:9-533:29|-1|1|2","extent":"533:9-533:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":282,"usr":15329116120223482646,"detailed_name":"SQLITE_LOCKED_SHAREDCACHE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED |  (1<<8))","comments":"","declarations":[],"spell":"534:9-534:34|-1|1|2","extent":"534:9-534:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":283,"usr":12576540697132577997,"detailed_name":"SQLITE_LOCKED_VTAB","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))","comments":"","declarations":[],"spell":"535:9-535:27|-1|1|2","extent":"535:9-535:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":284,"usr":5209695096284622874,"detailed_name":"SQLITE_BUSY_RECOVERY","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))","comments":"","declarations":[],"spell":"536:9-536:29|-1|1|2","extent":"536:9-536:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":285,"usr":4270424070857458195,"detailed_name":"SQLITE_BUSY_SNAPSHOT","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_BUSY_SNAPSHOT           (SQLITE_BUSY   |  (2<<8))","comments":"","declarations":[],"spell":"537:9-537:29|-1|1|2","extent":"537:9-537:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":286,"usr":9551329921156317144,"detailed_name":"SQLITE_BUSY_TIMEOUT","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_BUSY_TIMEOUT            (SQLITE_BUSY   |  (3<<8))","comments":"","declarations":[],"spell":"538:9-538:28|-1|1|2","extent":"538:9-538:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":287,"usr":874403025704951637,"detailed_name":"SQLITE_CANTOPEN_NOTEMPDIR","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CANTOPEN_NOTEMPDIR      (SQLITE_CANTOPEN | (1<<8))","comments":"","declarations":[],"spell":"539:9-539:34|-1|1|2","extent":"539:9-539:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":288,"usr":10377163855643257870,"detailed_name":"SQLITE_CANTOPEN_ISDIR","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_CANTOPEN_ISDIR          (SQLITE_CANTOPEN | (2<<8))","comments":"","declarations":[],"spell":"540:9-540:30|-1|1|2","extent":"540:9-540:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":289,"usr":1281772250326729421,"detailed_name":"SQLITE_CANTOPEN_FULLPATH","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))","comments":"","declarations":[],"spell":"541:9-541:33|-1|1|2","extent":"541:9-541:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":290,"usr":3572617017570962866,"detailed_name":"SQLITE_CANTOPEN_CONVPATH","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))","comments":"","declarations":[],"spell":"542:9-542:33|-1|1|2","extent":"542:9-542:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":291,"usr":7847233915327084498,"detailed_name":"SQLITE_CANTOPEN_DIRTYWAL","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CANTOPEN_DIRTYWAL       (SQLITE_CANTOPEN | (5<<8))","comments":"","declarations":[],"spell":"543:9-543:33|-1|1|2","extent":"543:9-543:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":292,"usr":5437936154571208672,"detailed_name":"SQLITE_CANTOPEN_SYMLINK","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))","comments":"","declarations":[],"spell":"544:9-544:32|-1|1|2","extent":"544:9-544:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":293,"usr":2826806142343931910,"detailed_name":"SQLITE_CORRUPT_VTAB","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))","comments":"","declarations":[],"spell":"545:9-545:28|-1|1|2","extent":"545:9-545:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":294,"usr":13831235407847888026,"detailed_name":"SQLITE_CORRUPT_SEQUENCE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))","comments":"","declarations":[],"spell":"546:9-546:32|-1|1|2","extent":"546:9-546:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":295,"usr":18441910895158770725,"detailed_name":"SQLITE_CORRUPT_INDEX","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_CORRUPT_INDEX           (SQLITE_CORRUPT | (3<<8))","comments":"","declarations":[],"spell":"547:9-547:29|-1|1|2","extent":"547:9-547:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":296,"usr":250900778943451063,"detailed_name":"SQLITE_READONLY_RECOVERY","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))","comments":"","declarations":[],"spell":"548:9-548:33|-1|1|2","extent":"548:9-548:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":297,"usr":418667834513262476,"detailed_name":"SQLITE_READONLY_CANTLOCK","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_READONLY_CANTLOCK       (SQLITE_READONLY | (2<<8))","comments":"","declarations":[],"spell":"549:9-549:33|-1|1|2","extent":"549:9-549:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":298,"usr":10430872954251529083,"detailed_name":"SQLITE_READONLY_ROLLBACK","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_READONLY_ROLLBACK       (SQLITE_READONLY | (3<<8))","comments":"","declarations":[],"spell":"550:9-550:33|-1|1|2","extent":"550:9-550:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":299,"usr":13576483208424284165,"detailed_name":"SQLITE_READONLY_DBMOVED","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_READONLY_DBMOVED        (SQLITE_READONLY | (4<<8))","comments":"","declarations":[],"spell":"551:9-551:32|-1|1|2","extent":"551:9-551:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":300,"usr":15575760216990369862,"detailed_name":"SQLITE_READONLY_CANTINIT","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_READONLY_CANTINIT       (SQLITE_READONLY | (5<<8))","comments":"","declarations":[],"spell":"552:9-552:33|-1|1|2","extent":"552:9-552:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":301,"usr":7531182660462866379,"detailed_name":"SQLITE_READONLY_DIRECTORY","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_READONLY_DIRECTORY      (SQLITE_READONLY | (6<<8))","comments":"","declarations":[],"spell":"553:9-553:34|-1|1|2","extent":"553:9-553:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":302,"usr":11769721891347317547,"detailed_name":"SQLITE_ABORT_ROLLBACK","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_ABORT_ROLLBACK          (SQLITE_ABORT | (2<<8))","comments":"","declarations":[],"spell":"554:9-554:30|-1|1|2","extent":"554:9-554:63|-1|1|0","uses":[],"kind":255,"storage":0},{"id":303,"usr":7792685292200690134,"detailed_name":"SQLITE_CONSTRAINT_CHECK","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONSTRAINT_CHECK        (SQLITE_CONSTRAINT | (1<<8))","comments":"","declarations":[],"spell":"555:9-555:32|-1|1|2","extent":"555:9-555:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":304,"usr":5709541252002842472,"detailed_name":"SQLITE_CONSTRAINT_COMMITHOOK","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONSTRAINT_COMMITHOOK   (SQLITE_CONSTRAINT | (2<<8))","comments":"","declarations":[],"spell":"556:9-556:37|-1|1|2","extent":"556:9-556:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":305,"usr":7778651444342034597,"detailed_name":"SQLITE_CONSTRAINT_FOREIGNKEY","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONSTRAINT_FOREIGNKEY   (SQLITE_CONSTRAINT | (3<<8))","comments":"","declarations":[],"spell":"557:9-557:37|-1|1|2","extent":"557:9-557:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":306,"usr":4049621435471200048,"detailed_name":"SQLITE_CONSTRAINT_FUNCTION","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CONSTRAINT_FUNCTION     (SQLITE_CONSTRAINT | (4<<8))","comments":"","declarations":[],"spell":"558:9-558:35|-1|1|2","extent":"558:9-558:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":307,"usr":9200558359132912068,"detailed_name":"SQLITE_CONSTRAINT_NOTNULL","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CONSTRAINT_NOTNULL      (SQLITE_CONSTRAINT | (5<<8))","comments":"","declarations":[],"spell":"559:9-559:34|-1|1|2","extent":"559:9-559:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":308,"usr":7036611609029757728,"detailed_name":"SQLITE_CONSTRAINT_PRIMARYKEY","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONSTRAINT_PRIMARYKEY   (SQLITE_CONSTRAINT | (6<<8))","comments":"","declarations":[],"spell":"560:9-560:37|-1|1|2","extent":"560:9-560:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":309,"usr":1734909610539131379,"detailed_name":"SQLITE_CONSTRAINT_TRIGGER","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CONSTRAINT_TRIGGER      (SQLITE_CONSTRAINT | (7<<8))","comments":"","declarations":[],"spell":"561:9-561:34|-1|1|2","extent":"561:9-561:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":310,"usr":3863609857413517999,"detailed_name":"SQLITE_CONSTRAINT_UNIQUE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CONSTRAINT_UNIQUE       (SQLITE_CONSTRAINT | (8<<8))","comments":"","declarations":[],"spell":"562:9-562:33|-1|1|2","extent":"562:9-562:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":311,"usr":2716049744151604706,"detailed_name":"SQLITE_CONSTRAINT_VTAB","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_CONSTRAINT_VTAB         (SQLITE_CONSTRAINT | (9<<8))","comments":"","declarations":[],"spell":"563:9-563:31|-1|1|2","extent":"563:9-563:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":312,"usr":13270342192088735709,"detailed_name":"SQLITE_CONSTRAINT_ROWID","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONSTRAINT_ROWID        (SQLITE_CONSTRAINT |(10<<8))","comments":"","declarations":[],"spell":"564:9-564:32|-1|1|2","extent":"564:9-564:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":313,"usr":17416182675890534761,"detailed_name":"SQLITE_CONSTRAINT_PINNED","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CONSTRAINT_PINNED       (SQLITE_CONSTRAINT |(11<<8))","comments":"","declarations":[],"spell":"565:9-565:33|-1|1|2","extent":"565:9-565:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":314,"usr":6824560078283382716,"detailed_name":"SQLITE_CONSTRAINT_DATATYPE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CONSTRAINT_DATATYPE     (SQLITE_CONSTRAINT |(12<<8))","comments":"","declarations":[],"spell":"566:9-566:35|-1|1|2","extent":"566:9-566:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":315,"usr":15704316000513853840,"detailed_name":"SQLITE_NOTICE_RECOVER_WAL","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_NOTICE_RECOVER_WAL      (SQLITE_NOTICE | (1<<8))","comments":"","declarations":[],"spell":"567:9-567:34|-1|1|2","extent":"567:9-567:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":316,"usr":10379423711054021022,"detailed_name":"SQLITE_NOTICE_RECOVER_ROLLBACK","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_NOTICE_RECOVER_ROLLBACK (SQLITE_NOTICE | (2<<8))","comments":"","declarations":[],"spell":"568:9-568:39|-1|1|2","extent":"568:9-568:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":317,"usr":18022676475617028460,"detailed_name":"SQLITE_NOTICE_RBU","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_NOTICE_RBU              (SQLITE_NOTICE | (3<<8))","comments":"","declarations":[],"spell":"569:9-569:26|-1|1|2","extent":"569:9-569:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":318,"usr":3941676752503489329,"detailed_name":"SQLITE_WARNING_AUTOINDEX","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))","comments":"","declarations":[],"spell":"570:9-570:33|-1|1|2","extent":"570:9-570:65|-1|1|0","uses":[],"kind":255,"storage":0},{"id":319,"usr":7130989151641934271,"detailed_name":"SQLITE_AUTH_USER","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_AUTH_USER               (SQLITE_AUTH | (1<<8))","comments":"","declarations":[],"spell":"571:9-571:25|-1|1|2","extent":"571:9-571:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":320,"usr":17415258904831953923,"detailed_name":"SQLITE_OK_LOAD_PERMANENTLY","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1<<8))","comments":"","declarations":[],"spell":"572:9-572:35|-1|1|2","extent":"572:9-572:60|-1|1|0","uses":[],"kind":255,"storage":0},{"id":321,"usr":14746052075887419568,"detailed_name":"SQLITE_OK_SYMLINK","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))","comments":"","declarations":[],"spell":"573:9-573:26|-1|1|2","extent":"573:9-573:60|-1|1|0","uses":[],"kind":255,"storage":0},{"id":322,"usr":1583328279707944122,"detailed_name":"SQLITE_OPEN_READONLY","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_OPEN_READONLY         0x00000001","comments":"","declarations":[],"spell":"595:9-595:29|-1|1|2","extent":"595:9-595:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":323,"usr":15572725180723676065,"detailed_name":"SQLITE_OPEN_READWRITE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_OPEN_READWRITE        0x00000002","comments":"","declarations":[],"spell":"596:9-596:30|-1|1|2","extent":"596:9-596:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":324,"usr":15537519177729512353,"detailed_name":"SQLITE_OPEN_CREATE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_OPEN_CREATE           0x00000004","comments":"","declarations":[],"spell":"597:9-597:27|-1|1|2","extent":"597:9-597:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":325,"usr":9806628444918587097,"detailed_name":"SQLITE_OPEN_DELETEONCLOSE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_OPEN_DELETEONCLOSE    0x00000008","comments":"","declarations":[],"spell":"598:9-598:34|-1|1|2","extent":"598:9-598:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":326,"usr":12391594767709486173,"detailed_name":"SQLITE_OPEN_EXCLUSIVE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_OPEN_EXCLUSIVE        0x00000010","comments":"","declarations":[],"spell":"599:9-599:30|-1|1|2","extent":"599:9-599:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":327,"usr":10764956496470816322,"detailed_name":"SQLITE_OPEN_AUTOPROXY","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_OPEN_AUTOPROXY        0x00000020","comments":"","declarations":[],"spell":"600:9-600:30|-1|1|2","extent":"600:9-600:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":328,"usr":584678310782985009,"detailed_name":"SQLITE_OPEN_URI","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_OPEN_URI              0x00000040","comments":"","declarations":[],"spell":"601:9-601:24|-1|1|2","extent":"601:9-601:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":329,"usr":14218643921825362378,"detailed_name":"SQLITE_OPEN_MEMORY","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_OPEN_MEMORY           0x00000080","comments":"","declarations":[],"spell":"602:9-602:27|-1|1|2","extent":"602:9-602:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":330,"usr":13354601952673118145,"detailed_name":"SQLITE_OPEN_MAIN_DB","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_OPEN_MAIN_DB          0x00000100","comments":"","declarations":[],"spell":"603:9-603:28|-1|1|2","extent":"603:9-603:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":331,"usr":16236304254246254450,"detailed_name":"SQLITE_OPEN_TEMP_DB","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_OPEN_TEMP_DB          0x00000200","comments":"","declarations":[],"spell":"604:9-604:28|-1|1|2","extent":"604:9-604:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":332,"usr":5946179666566048269,"detailed_name":"SQLITE_OPEN_TRANSIENT_DB","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_OPEN_TRANSIENT_DB     0x00000400","comments":"","declarations":[],"spell":"605:9-605:33|-1|1|2","extent":"605:9-605:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":333,"usr":8493076672789022978,"detailed_name":"SQLITE_OPEN_MAIN_JOURNAL","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_OPEN_MAIN_JOURNAL     0x00000800","comments":"","declarations":[],"spell":"606:9-606:33|-1|1|2","extent":"606:9-606:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":334,"usr":7674939136180966104,"detailed_name":"SQLITE_OPEN_TEMP_JOURNAL","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_OPEN_TEMP_JOURNAL     0x00001000","comments":"","declarations":[],"spell":"607:9-607:33|-1|1|2","extent":"607:9-607:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":335,"usr":12836013585938930846,"detailed_name":"SQLITE_OPEN_SUBJOURNAL","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_OPEN_SUBJOURNAL       0x00002000","comments":"","declarations":[],"spell":"608:9-608:31|-1|1|2","extent":"608:9-608:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":336,"usr":6744295031175721233,"detailed_name":"SQLITE_OPEN_SUPER_JOURNAL","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_OPEN_SUPER_JOURNAL    0x00004000","comments":"","declarations":[],"spell":"609:9-609:34|-1|1|2","extent":"609:9-609:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":337,"usr":111108495465226658,"detailed_name":"SQLITE_OPEN_NOMUTEX","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_OPEN_NOMUTEX          0x00008000","comments":"","declarations":[],"spell":"610:9-610:28|-1|1|2","extent":"610:9-610:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":338,"usr":11239230807600191930,"detailed_name":"SQLITE_OPEN_FULLMUTEX","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_OPEN_FULLMUTEX        0x00010000","comments":"","declarations":[],"spell":"611:9-611:30|-1|1|2","extent":"611:9-611:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":339,"usr":11445680234111444258,"detailed_name":"SQLITE_OPEN_SHAREDCACHE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_OPEN_SHAREDCACHE      0x00020000","comments":"","declarations":[],"spell":"612:9-612:32|-1|1|2","extent":"612:9-612:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":340,"usr":6415809300152094230,"detailed_name":"SQLITE_OPEN_PRIVATECACHE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_OPEN_PRIVATECACHE     0x00040000","comments":"","declarations":[],"spell":"613:9-613:33|-1|1|2","extent":"613:9-613:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":341,"usr":14020387561317304267,"detailed_name":"SQLITE_OPEN_WAL","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_OPEN_WAL              0x00080000","comments":"","declarations":[],"spell":"614:9-614:24|-1|1|2","extent":"614:9-614:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":342,"usr":2368610371164415421,"detailed_name":"SQLITE_OPEN_NOFOLLOW","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_OPEN_NOFOLLOW         0x01000000","comments":"","declarations":[],"spell":"615:9-615:29|-1|1|2","extent":"615:9-615:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":343,"usr":4197632958606280038,"detailed_name":"SQLITE_OPEN_EXRESCODE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_OPEN_EXRESCODE        0x02000000","comments":"","declarations":[],"spell":"616:9-616:30|-1|1|2","extent":"616:9-616:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":344,"usr":17514611870258056396,"detailed_name":"SQLITE_OPEN_MASTER_JOURNAL","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_OPEN_MASTER_JOURNAL   0x00004000","comments":"","declarations":[],"spell":"620:9-620:35|-1|1|2","extent":"620:9-620:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":345,"usr":4507227974751194217,"detailed_name":"SQLITE_IOCAP_ATOMIC","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_IOCAP_ATOMIC                 0x00000001","comments":"","declarations":[],"spell":"663:9-663:28|-1|1|2","extent":"663:9-663:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":346,"usr":1863863656453145760,"detailed_name":"SQLITE_IOCAP_ATOMIC512","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOCAP_ATOMIC512              0x00000002","comments":"","declarations":[],"spell":"664:9-664:31|-1|1|2","extent":"664:9-664:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":347,"usr":13682835272445714875,"detailed_name":"SQLITE_IOCAP_ATOMIC1K","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOCAP_ATOMIC1K               0x00000004","comments":"","declarations":[],"spell":"665:9-665:30|-1|1|2","extent":"665:9-665:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":348,"usr":295306899956467328,"detailed_name":"SQLITE_IOCAP_ATOMIC2K","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOCAP_ATOMIC2K               0x00000008","comments":"","declarations":[],"spell":"666:9-666:30|-1|1|2","extent":"666:9-666:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":349,"usr":10395439995202589862,"detailed_name":"SQLITE_IOCAP_ATOMIC4K","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOCAP_ATOMIC4K               0x00000010","comments":"","declarations":[],"spell":"667:9-667:30|-1|1|2","extent":"667:9-667:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":350,"usr":14669064567798261562,"detailed_name":"SQLITE_IOCAP_ATOMIC8K","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_IOCAP_ATOMIC8K               0x00000020","comments":"","declarations":[],"spell":"668:9-668:30|-1|1|2","extent":"668:9-668:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":351,"usr":14309866500198631507,"detailed_name":"SQLITE_IOCAP_ATOMIC16K","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOCAP_ATOMIC16K              0x00000040","comments":"","declarations":[],"spell":"669:9-669:31|-1|1|2","extent":"669:9-669:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":352,"usr":7236654550246822205,"detailed_name":"SQLITE_IOCAP_ATOMIC32K","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOCAP_ATOMIC32K              0x00000080","comments":"","declarations":[],"spell":"670:9-670:31|-1|1|2","extent":"670:9-670:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":353,"usr":1267827234208590120,"detailed_name":"SQLITE_IOCAP_ATOMIC64K","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOCAP_ATOMIC64K              0x00000100","comments":"","declarations":[],"spell":"671:9-671:31|-1|1|2","extent":"671:9-671:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":354,"usr":7972275714329271180,"detailed_name":"SQLITE_IOCAP_SAFE_APPEND","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_IOCAP_SAFE_APPEND            0x00000200","comments":"","declarations":[],"spell":"672:9-672:33|-1|1|2","extent":"672:9-672:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":355,"usr":6877245611599159188,"detailed_name":"SQLITE_IOCAP_SEQUENTIAL","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_IOCAP_SEQUENTIAL             0x00000400","comments":"","declarations":[],"spell":"673:9-673:32|-1|1|2","extent":"673:9-673:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":356,"usr":8576654261810285755,"detailed_name":"SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN","short_name_offset":0,"short_name_size":34,"hover":"#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN  0x00000800","comments":"","declarations":[],"spell":"674:9-674:43|-1|1|2","extent":"674:9-674:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":357,"usr":16705769598650151817,"detailed_name":"SQLITE_IOCAP_POWERSAFE_OVERWRITE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_IOCAP_POWERSAFE_OVERWRITE    0x00001000","comments":"","declarations":[],"spell":"675:9-675:41|-1|1|2","extent":"675:9-675:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":358,"usr":4065548088202028995,"detailed_name":"SQLITE_IOCAP_IMMUTABLE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_IOCAP_IMMUTABLE              0x00002000","comments":"","declarations":[],"spell":"676:9-676:31|-1|1|2","extent":"676:9-676:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":359,"usr":12862091491115807035,"detailed_name":"SQLITE_IOCAP_BATCH_ATOMIC","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_IOCAP_BATCH_ATOMIC           0x00004000","comments":"","declarations":[],"spell":"677:9-677:34|-1|1|2","extent":"677:9-677:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":360,"usr":3050317341586044234,"detailed_name":"SQLITE_IOCAP_SUBPAGE_READ","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_IOCAP_SUBPAGE_READ           0x00008000","comments":"","declarations":[],"spell":"678:9-678:34|-1|1|2","extent":"678:9-678:55|-1|1|0","uses":[],"kind":255,"storage":0},{"id":361,"usr":4913903100861637342,"detailed_name":"SQLITE_LOCK_NONE","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_LOCK_NONE          0","comments":"","declarations":[],"spell":"691:9-691:25|-1|1|2","extent":"691:9-691:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":362,"usr":17086538076272593577,"detailed_name":"SQLITE_LOCK_SHARED","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_LOCK_SHARED        1","comments":"","declarations":[],"spell":"692:9-692:27|-1|1|2","extent":"692:9-692:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":363,"usr":10950771419766987700,"detailed_name":"SQLITE_LOCK_RESERVED","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_LOCK_RESERVED      2","comments":"","declarations":[],"spell":"693:9-693:29|-1|1|2","extent":"693:9-693:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":364,"usr":17974526102015316685,"detailed_name":"SQLITE_LOCK_PENDING","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_LOCK_PENDING       3","comments":"","declarations":[],"spell":"694:9-694:28|-1|1|2","extent":"694:9-694:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":365,"usr":740736726892475298,"detailed_name":"SQLITE_LOCK_EXCLUSIVE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_LOCK_EXCLUSIVE     4","comments":"","declarations":[],"spell":"695:9-695:30|-1|1|2","extent":"695:9-695:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":366,"usr":17990416782175491562,"detailed_name":"SQLITE_SYNC_NORMAL","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_SYNC_NORMAL        0x00002","comments":"","declarations":[],"spell":"723:9-723:27|-1|1|2","extent":"723:9-723:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":367,"usr":15142636335139168438,"detailed_name":"SQLITE_SYNC_FULL","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_SYNC_FULL          0x00003","comments":"","declarations":[],"spell":"724:9-724:25|-1|1|2","extent":"724:9-724:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":368,"usr":11428766939586428502,"detailed_name":"SQLITE_SYNC_DATAONLY","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_SYNC_DATAONLY      0x00010","comments":"","declarations":[],"spell":"725:9-725:29|-1|1|2","extent":"725:9-725:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":369,"usr":4716754121526075900,"detailed_name":"SQLITE_FCNTL_LOCKSTATE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_LOCKSTATE               1","comments":"","declarations":[],"spell":"1220:9-1220:31|-1|1|2","extent":"1220:9-1220:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":370,"usr":6288609703069421138,"detailed_name":"SQLITE_FCNTL_GET_LOCKPROXYFILE","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_FCNTL_GET_LOCKPROXYFILE       2","comments":"","declarations":[],"spell":"1221:9-1221:39|-1|1|2","extent":"1221:9-1221:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":371,"usr":3483945052199673118,"detailed_name":"SQLITE_FCNTL_SET_LOCKPROXYFILE","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_FCNTL_SET_LOCKPROXYFILE       3","comments":"","declarations":[],"spell":"1222:9-1222:39|-1|1|2","extent":"1222:9-1222:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":372,"usr":12362470401154847907,"detailed_name":"SQLITE_FCNTL_LAST_ERRNO","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_FCNTL_LAST_ERRNO              4","comments":"","declarations":[],"spell":"1223:9-1223:32|-1|1|2","extent":"1223:9-1223:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":373,"usr":17487117567242330091,"detailed_name":"SQLITE_FCNTL_SIZE_HINT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_SIZE_HINT               5","comments":"","declarations":[],"spell":"1224:9-1224:31|-1|1|2","extent":"1224:9-1224:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":374,"usr":410519174136110814,"detailed_name":"SQLITE_FCNTL_CHUNK_SIZE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_FCNTL_CHUNK_SIZE              6","comments":"","declarations":[],"spell":"1225:9-1225:32|-1|1|2","extent":"1225:9-1225:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":375,"usr":2704412105671914061,"detailed_name":"SQLITE_FCNTL_FILE_POINTER","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_FCNTL_FILE_POINTER            7","comments":"","declarations":[],"spell":"1226:9-1226:34|-1|1|2","extent":"1226:9-1226:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":376,"usr":1571914484335778127,"detailed_name":"SQLITE_FCNTL_SYNC_OMITTED","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_FCNTL_SYNC_OMITTED            8","comments":"","declarations":[],"spell":"1227:9-1227:34|-1|1|2","extent":"1227:9-1227:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":377,"usr":8805152220355330860,"detailed_name":"SQLITE_FCNTL_WIN32_AV_RETRY","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_FCNTL_WIN32_AV_RETRY          9","comments":"","declarations":[],"spell":"1228:9-1228:36|-1|1|2","extent":"1228:9-1228:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":378,"usr":628488513131086418,"detailed_name":"SQLITE_FCNTL_PERSIST_WAL","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_FCNTL_PERSIST_WAL            10","comments":"","declarations":[],"spell":"1229:9-1229:33|-1|1|2","extent":"1229:9-1229:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":379,"usr":8067825345296523856,"detailed_name":"SQLITE_FCNTL_OVERWRITE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_OVERWRITE              11","comments":"","declarations":[],"spell":"1230:9-1230:31|-1|1|2","extent":"1230:9-1230:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":380,"usr":17732522553076228628,"detailed_name":"SQLITE_FCNTL_VFSNAME","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_FCNTL_VFSNAME                12","comments":"","declarations":[],"spell":"1231:9-1231:29|-1|1|2","extent":"1231:9-1231:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":381,"usr":17242037501645416800,"detailed_name":"SQLITE_FCNTL_POWERSAFE_OVERWRITE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_FCNTL_POWERSAFE_OVERWRITE    13","comments":"","declarations":[],"spell":"1232:9-1232:41|-1|1|2","extent":"1232:9-1232:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":382,"usr":14446893382041611771,"detailed_name":"SQLITE_FCNTL_PRAGMA","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_FCNTL_PRAGMA                 14","comments":"","declarations":[],"spell":"1233:9-1233:28|-1|1|2","extent":"1233:9-1233:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":383,"usr":16600429204712095252,"detailed_name":"SQLITE_FCNTL_BUSYHANDLER","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_FCNTL_BUSYHANDLER            15","comments":"","declarations":[],"spell":"1234:9-1234:33|-1|1|2","extent":"1234:9-1234:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":384,"usr":9886610160016106368,"detailed_name":"SQLITE_FCNTL_TEMPFILENAME","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_FCNTL_TEMPFILENAME           16","comments":"","declarations":[],"spell":"1235:9-1235:34|-1|1|2","extent":"1235:9-1235:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":385,"usr":8717591795709647951,"detailed_name":"SQLITE_FCNTL_MMAP_SIZE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_MMAP_SIZE              18","comments":"","declarations":[],"spell":"1236:9-1236:31|-1|1|2","extent":"1236:9-1236:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":386,"usr":16877267788314645523,"detailed_name":"SQLITE_FCNTL_TRACE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_FCNTL_TRACE                  19","comments":"","declarations":[],"spell":"1237:9-1237:27|-1|1|2","extent":"1237:9-1237:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":387,"usr":6008466358928542932,"detailed_name":"SQLITE_FCNTL_HAS_MOVED","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_HAS_MOVED              20","comments":"","declarations":[],"spell":"1238:9-1238:31|-1|1|2","extent":"1238:9-1238:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":388,"usr":3014047487185320260,"detailed_name":"SQLITE_FCNTL_SYNC","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_FCNTL_SYNC                   21","comments":"","declarations":[],"spell":"1239:9-1239:26|-1|1|2","extent":"1239:9-1239:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":389,"usr":11266384356042400087,"detailed_name":"SQLITE_FCNTL_COMMIT_PHASETWO","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_FCNTL_COMMIT_PHASETWO        22","comments":"","declarations":[],"spell":"1240:9-1240:37|-1|1|2","extent":"1240:9-1240:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":390,"usr":18227457936146387213,"detailed_name":"SQLITE_FCNTL_WIN32_SET_HANDLE","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_FCNTL_WIN32_SET_HANDLE       23","comments":"","declarations":[],"spell":"1241:9-1241:38|-1|1|2","extent":"1241:9-1241:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":391,"usr":2302858164623218489,"detailed_name":"SQLITE_FCNTL_WAL_BLOCK","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_WAL_BLOCK              24","comments":"","declarations":[],"spell":"1242:9-1242:31|-1|1|2","extent":"1242:9-1242:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":392,"usr":10836395453060838819,"detailed_name":"SQLITE_FCNTL_ZIPVFS","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_FCNTL_ZIPVFS                 25","comments":"","declarations":[],"spell":"1243:9-1243:28|-1|1|2","extent":"1243:9-1243:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":393,"usr":9358276612516598658,"detailed_name":"SQLITE_FCNTL_RBU","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_FCNTL_RBU                    26","comments":"","declarations":[],"spell":"1244:9-1244:25|-1|1|2","extent":"1244:9-1244:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":394,"usr":784189493885738758,"detailed_name":"SQLITE_FCNTL_VFS_POINTER","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_FCNTL_VFS_POINTER            27","comments":"","declarations":[],"spell":"1245:9-1245:33|-1|1|2","extent":"1245:9-1245:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":395,"usr":7168989574691072409,"detailed_name":"SQLITE_FCNTL_JOURNAL_POINTER","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_FCNTL_JOURNAL_POINTER        28","comments":"","declarations":[],"spell":"1246:9-1246:37|-1|1|2","extent":"1246:9-1246:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":396,"usr":12890463332217512347,"detailed_name":"SQLITE_FCNTL_WIN32_GET_HANDLE","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_FCNTL_WIN32_GET_HANDLE       29","comments":"","declarations":[],"spell":"1247:9-1247:38|-1|1|2","extent":"1247:9-1247:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":397,"usr":5962514132433952433,"detailed_name":"SQLITE_FCNTL_PDB","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_FCNTL_PDB                    30","comments":"","declarations":[],"spell":"1248:9-1248:25|-1|1|2","extent":"1248:9-1248:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":398,"usr":4657534174357088949,"detailed_name":"SQLITE_FCNTL_BEGIN_ATOMIC_WRITE","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_FCNTL_BEGIN_ATOMIC_WRITE     31","comments":"","declarations":[],"spell":"1249:9-1249:40|-1|1|2","extent":"1249:9-1249:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":399,"usr":8869874556531147131,"detailed_name":"SQLITE_FCNTL_COMMIT_ATOMIC_WRITE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_FCNTL_COMMIT_ATOMIC_WRITE    32","comments":"","declarations":[],"spell":"1250:9-1250:41|-1|1|2","extent":"1250:9-1250:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":400,"usr":11241785915493041080,"detailed_name":"SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE","short_name_offset":0,"short_name_size":34,"hover":"#define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE  33","comments":"","declarations":[],"spell":"1251:9-1251:43|-1|1|2","extent":"1251:9-1251:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":401,"usr":3920726112566287685,"detailed_name":"SQLITE_FCNTL_LOCK_TIMEOUT","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_FCNTL_LOCK_TIMEOUT           34","comments":"","declarations":[],"spell":"1252:9-1252:34|-1|1|2","extent":"1252:9-1252:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":402,"usr":15871742716076312404,"detailed_name":"SQLITE_FCNTL_DATA_VERSION","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_FCNTL_DATA_VERSION           35","comments":"","declarations":[],"spell":"1253:9-1253:34|-1|1|2","extent":"1253:9-1253:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":403,"usr":3339288605820822193,"detailed_name":"SQLITE_FCNTL_SIZE_LIMIT","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_FCNTL_SIZE_LIMIT             36","comments":"","declarations":[],"spell":"1254:9-1254:32|-1|1|2","extent":"1254:9-1254:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":404,"usr":17267007746027363515,"detailed_name":"SQLITE_FCNTL_CKPT_DONE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_CKPT_DONE              37","comments":"","declarations":[],"spell":"1255:9-1255:31|-1|1|2","extent":"1255:9-1255:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":405,"usr":17599306936878895904,"detailed_name":"SQLITE_FCNTL_RESERVE_BYTES","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_FCNTL_RESERVE_BYTES          38","comments":"","declarations":[],"spell":"1256:9-1256:35|-1|1|2","extent":"1256:9-1256:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":406,"usr":15903990486697321539,"detailed_name":"SQLITE_FCNTL_CKPT_START","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_FCNTL_CKPT_START             39","comments":"","declarations":[],"spell":"1257:9-1257:32|-1|1|2","extent":"1257:9-1257:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":407,"usr":7724746284343372272,"detailed_name":"SQLITE_FCNTL_EXTERNAL_READER","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_FCNTL_EXTERNAL_READER        40","comments":"","declarations":[],"spell":"1258:9-1258:37|-1|1|2","extent":"1258:9-1258:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":408,"usr":151971597052474850,"detailed_name":"SQLITE_FCNTL_CKSM_FILE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_FCNTL_CKSM_FILE              41","comments":"","declarations":[],"spell":"1259:9-1259:31|-1|1|2","extent":"1259:9-1259:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":409,"usr":13858295180515453939,"detailed_name":"SQLITE_FCNTL_RESET_CACHE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_FCNTL_RESET_CACHE            42","comments":"","declarations":[],"spell":"1260:9-1260:33|-1|1|2","extent":"1260:9-1260:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":410,"usr":9913297586633964077,"detailed_name":"SQLITE_FCNTL_NULL_IO","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_FCNTL_NULL_IO                43","comments":"","declarations":[],"spell":"1261:9-1261:29|-1|1|2","extent":"1261:9-1261:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":411,"usr":11151160292167135160,"detailed_name":"SQLITE_GET_LOCKPROXYFILE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE","comments":"","declarations":[],"spell":"1264:9-1264:33|-1|1|2","extent":"1264:9-1264:69|-1|1|0","uses":[],"kind":255,"storage":0},{"id":412,"usr":1119211427000370419,"detailed_name":"SQLITE_SET_LOCKPROXYFILE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_SET_LOCKPROXYFILE      SQLITE_FCNTL_SET_LOCKPROXYFILE","comments":"","declarations":[],"spell":"1265:9-1265:33|-1|1|2","extent":"1265:9-1265:69|-1|1|0","uses":[],"kind":255,"storage":0},{"id":413,"usr":17337300193285419936,"detailed_name":"SQLITE_LAST_ERRNO","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_LAST_ERRNO             SQLITE_FCNTL_LAST_ERRNO","comments":"","declarations":[],"spell":"1266:9-1266:26|-1|1|2","extent":"1266:9-1266:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":414,"usr":6871798053282496970,"detailed_name":"SQLITE_ACCESS_EXISTS","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_ACCESS_EXISTS    0","comments":"","declarations":[],"spell":"1541:9-1541:29|-1|1|2","extent":"1541:9-1541:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":415,"usr":18286238433866721868,"detailed_name":"SQLITE_ACCESS_READWRITE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_ACCESS_READWRITE 1","comments":"","declarations":[],"spell":"1542:9-1542:32|-1|1|2","extent":"1542:9-1542:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":416,"usr":18168101788520544826,"detailed_name":"SQLITE_ACCESS_READ","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_ACCESS_READ      2","comments":"","declarations":[],"spell":"1543:9-1543:27|-1|1|2","extent":"1543:9-1543:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":417,"usr":13217673222000173479,"detailed_name":"SQLITE_SHM_UNLOCK","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_SHM_UNLOCK       1","comments":"","declarations":[],"spell":"1567:9-1567:26|-1|1|2","extent":"1567:9-1567:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":418,"usr":9110573943159894059,"detailed_name":"SQLITE_SHM_LOCK","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_SHM_LOCK         2","comments":"","declarations":[],"spell":"1568:9-1568:24|-1|1|2","extent":"1568:9-1568:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":419,"usr":2520472197735265549,"detailed_name":"SQLITE_SHM_SHARED","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_SHM_SHARED       4","comments":"","declarations":[],"spell":"1569:9-1569:26|-1|1|2","extent":"1569:9-1569:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":420,"usr":7644201347909291423,"detailed_name":"SQLITE_SHM_EXCLUSIVE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_SHM_EXCLUSIVE    8","comments":"","declarations":[],"spell":"1570:9-1570:29|-1|1|2","extent":"1570:9-1570:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":421,"usr":17909656549324463272,"detailed_name":"SQLITE_SHM_NLOCK","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_SHM_NLOCK        8","comments":"","declarations":[],"spell":"1580:9-1580:25|-1|1|2","extent":"1580:9-1580:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":422,"usr":17677443425752983095,"detailed_name":"SQLITE_CONFIG_SINGLETHREAD","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CONFIG_SINGLETHREAD         1","comments":"","declarations":[],"spell":"2179:9-2179:35|-1|1|2","extent":"2179:9-2179:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":423,"usr":14442251184567482359,"detailed_name":"SQLITE_CONFIG_MULTITHREAD","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CONFIG_MULTITHREAD          2","comments":"","declarations":[],"spell":"2180:9-2180:34|-1|1|2","extent":"2180:9-2180:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":424,"usr":2588477791973360915,"detailed_name":"SQLITE_CONFIG_SERIALIZED","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CONFIG_SERIALIZED           3","comments":"","declarations":[],"spell":"2181:9-2181:33|-1|1|2","extent":"2181:9-2181:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":425,"usr":934651418992879997,"detailed_name":"SQLITE_CONFIG_MALLOC","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_CONFIG_MALLOC               4","comments":"","declarations":[],"spell":"2182:9-2182:29|-1|1|2","extent":"2182:9-2182:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":426,"usr":1403766717691958814,"detailed_name":"SQLITE_CONFIG_GETMALLOC","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_GETMALLOC            5","comments":"","declarations":[],"spell":"2183:9-2183:32|-1|1|2","extent":"2183:9-2183:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":427,"usr":1133783694860367682,"detailed_name":"SQLITE_CONFIG_SCRATCH","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_CONFIG_SCRATCH              6","comments":"","declarations":[],"spell":"2184:9-2184:30|-1|1|2","extent":"2184:9-2184:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":428,"usr":9040220619712716663,"detailed_name":"SQLITE_CONFIG_PAGECACHE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_PAGECACHE            7","comments":"","declarations":[],"spell":"2185:9-2185:32|-1|1|2","extent":"2185:9-2185:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":429,"usr":13290202137152822542,"detailed_name":"SQLITE_CONFIG_HEAP","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_CONFIG_HEAP                 8","comments":"","declarations":[],"spell":"2186:9-2186:27|-1|1|2","extent":"2186:9-2186:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":430,"usr":340154099618863056,"detailed_name":"SQLITE_CONFIG_MEMSTATUS","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_MEMSTATUS            9","comments":"","declarations":[],"spell":"2187:9-2187:32|-1|1|2","extent":"2187:9-2187:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":431,"usr":12756540479564845571,"detailed_name":"SQLITE_CONFIG_MUTEX","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_CONFIG_MUTEX               10","comments":"","declarations":[],"spell":"2188:9-2188:28|-1|1|2","extent":"2188:9-2188:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":432,"usr":4649070009759112232,"detailed_name":"SQLITE_CONFIG_GETMUTEX","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_CONFIG_GETMUTEX            11","comments":"","declarations":[],"spell":"2189:9-2189:31|-1|1|2","extent":"2189:9-2189:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":433,"usr":809927817890477034,"detailed_name":"SQLITE_CONFIG_LOOKASIDE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_LOOKASIDE           13","comments":"","declarations":[],"spell":"2191:9-2191:32|-1|1|2","extent":"2191:9-2191:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":434,"usr":3414775747741587605,"detailed_name":"SQLITE_CONFIG_PCACHE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_CONFIG_PCACHE              14","comments":"","declarations":[],"spell":"2192:9-2192:29|-1|1|2","extent":"2192:9-2192:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":435,"usr":1019759853352322672,"detailed_name":"SQLITE_CONFIG_GETPCACHE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_GETPCACHE           15","comments":"","declarations":[],"spell":"2193:9-2193:32|-1|1|2","extent":"2193:9-2193:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":436,"usr":17532222035969460970,"detailed_name":"SQLITE_CONFIG_LOG","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_CONFIG_LOG                 16","comments":"","declarations":[],"spell":"2194:9-2194:26|-1|1|2","extent":"2194:9-2194:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":437,"usr":7676427191022044255,"detailed_name":"SQLITE_CONFIG_URI","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_CONFIG_URI                 17","comments":"","declarations":[],"spell":"2195:9-2195:26|-1|1|2","extent":"2195:9-2195:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":438,"usr":5665679059953990579,"detailed_name":"SQLITE_CONFIG_PCACHE2","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_CONFIG_PCACHE2             18","comments":"","declarations":[],"spell":"2196:9-2196:30|-1|1|2","extent":"2196:9-2196:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":439,"usr":6119556336018458309,"detailed_name":"SQLITE_CONFIG_GETPCACHE2","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CONFIG_GETPCACHE2          19","comments":"","declarations":[],"spell":"2197:9-2197:33|-1|1|2","extent":"2197:9-2197:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":440,"usr":6308254806508669976,"detailed_name":"SQLITE_CONFIG_COVERING_INDEX_SCAN","short_name_offset":0,"short_name_size":33,"hover":"#define SQLITE_CONFIG_COVERING_INDEX_SCAN 20","comments":"","declarations":[],"spell":"2198:9-2198:42|-1|1|2","extent":"2198:9-2198:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":441,"usr":16223085147649544447,"detailed_name":"SQLITE_CONFIG_SQLLOG","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_CONFIG_SQLLOG              21","comments":"","declarations":[],"spell":"2199:9-2199:29|-1|1|2","extent":"2199:9-2199:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":442,"usr":9025910658551571844,"detailed_name":"SQLITE_CONFIG_MMAP_SIZE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CONFIG_MMAP_SIZE           22","comments":"","declarations":[],"spell":"2200:9-2200:32|-1|1|2","extent":"2200:9-2200:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":443,"usr":9370471559465044595,"detailed_name":"SQLITE_CONFIG_WIN32_HEAPSIZE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONFIG_WIN32_HEAPSIZE      23","comments":"","declarations":[],"spell":"2201:9-2201:37|-1|1|2","extent":"2201:9-2201:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":444,"usr":11445318436895342110,"detailed_name":"SQLITE_CONFIG_PCACHE_HDRSZ","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CONFIG_PCACHE_HDRSZ        24","comments":"","declarations":[],"spell":"2202:9-2202:35|-1|1|2","extent":"2202:9-2202:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":445,"usr":4536778787099894475,"detailed_name":"SQLITE_CONFIG_PMASZ","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_CONFIG_PMASZ               25","comments":"","declarations":[],"spell":"2203:9-2203:28|-1|1|2","extent":"2203:9-2203:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":446,"usr":9622942803100472969,"detailed_name":"SQLITE_CONFIG_STMTJRNL_SPILL","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONFIG_STMTJRNL_SPILL      26","comments":"","declarations":[],"spell":"2204:9-2204:37|-1|1|2","extent":"2204:9-2204:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":447,"usr":14796351745196092602,"detailed_name":"SQLITE_CONFIG_SMALL_MALLOC","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CONFIG_SMALL_MALLOC        27","comments":"","declarations":[],"spell":"2205:9-2205:35|-1|1|2","extent":"2205:9-2205:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":448,"usr":7816096600356654288,"detailed_name":"SQLITE_CONFIG_SORTERREF_SIZE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_CONFIG_SORTERREF_SIZE      28","comments":"","declarations":[],"spell":"2206:9-2206:37|-1|1|2","extent":"2206:9-2206:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":449,"usr":1937350433450724673,"detailed_name":"SQLITE_CONFIG_MEMDB_MAXSIZE","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_CONFIG_MEMDB_MAXSIZE       29","comments":"","declarations":[],"spell":"2207:9-2207:36|-1|1|2","extent":"2207:9-2207:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":450,"usr":5463560763533920723,"detailed_name":"SQLITE_CONFIG_ROWID_IN_VIEW","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_CONFIG_ROWID_IN_VIEW       30","comments":"","declarations":[],"spell":"2208:9-2208:36|-1|1|2","extent":"2208:9-2208:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":451,"usr":5200666726378671730,"detailed_name":"SQLITE_DBCONFIG_MAINDBNAME","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_DBCONFIG_MAINDBNAME            1000","comments":"","declarations":[],"spell":"2528:9-2528:35|-1|1|2","extent":"2528:9-2528:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":452,"usr":15330622475168743477,"detailed_name":"SQLITE_DBCONFIG_LOOKASIDE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_DBCONFIG_LOOKASIDE             1001","comments":"","declarations":[],"spell":"2529:9-2529:34|-1|1|2","extent":"2529:9-2529:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":453,"usr":13679407020610896336,"detailed_name":"SQLITE_DBCONFIG_ENABLE_FKEY","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBCONFIG_ENABLE_FKEY           1002","comments":"","declarations":[],"spell":"2530:9-2530:36|-1|1|2","extent":"2530:9-2530:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":454,"usr":17097419079717761388,"detailed_name":"SQLITE_DBCONFIG_ENABLE_TRIGGER","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_DBCONFIG_ENABLE_TRIGGER        1003","comments":"","declarations":[],"spell":"2531:9-2531:39|-1|1|2","extent":"2531:9-2531:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":455,"usr":10039298748924740433,"detailed_name":"SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER","short_name_offset":0,"short_name_size":37,"hover":"#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1004","comments":"","declarations":[],"spell":"2532:9-2532:46|-1|1|2","extent":"2532:9-2532:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":456,"usr":2960452237220095229,"detailed_name":"SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION","short_name_offset":0,"short_name_size":37,"hover":"#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION 1005","comments":"","declarations":[],"spell":"2533:9-2533:46|-1|1|2","extent":"2533:9-2533:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":457,"usr":13989780782921074256,"detailed_name":"SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      1006","comments":"","declarations":[],"spell":"2534:9-2534:41|-1|1|2","extent":"2534:9-2534:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":458,"usr":18197668668866563437,"detailed_name":"SQLITE_DBCONFIG_ENABLE_QPSG","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBCONFIG_ENABLE_QPSG           1007","comments":"","declarations":[],"spell":"2535:9-2535:36|-1|1|2","extent":"2535:9-2535:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":459,"usr":3563480899541197673,"detailed_name":"SQLITE_DBCONFIG_TRIGGER_EQP","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBCONFIG_TRIGGER_EQP           1008","comments":"","declarations":[],"spell":"2536:9-2536:36|-1|1|2","extent":"2536:9-2536:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":460,"usr":1822035377695928061,"detailed_name":"SQLITE_DBCONFIG_RESET_DATABASE","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_DBCONFIG_RESET_DATABASE        1009","comments":"","declarations":[],"spell":"2537:9-2537:39|-1|1|2","extent":"2537:9-2537:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":461,"usr":15734637907322882935,"detailed_name":"SQLITE_DBCONFIG_DEFENSIVE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_DBCONFIG_DEFENSIVE             1010","comments":"","declarations":[],"spell":"2538:9-2538:34|-1|1|2","extent":"2538:9-2538:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":462,"usr":5502934333241957555,"detailed_name":"SQLITE_DBCONFIG_WRITABLE_SCHEMA","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_DBCONFIG_WRITABLE_SCHEMA       1011","comments":"","declarations":[],"spell":"2539:9-2539:40|-1|1|2","extent":"2539:9-2539:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":463,"usr":6051335755617170664,"detailed_name":"SQLITE_DBCONFIG_LEGACY_ALTER_TABLE","short_name_offset":0,"short_name_size":34,"hover":"#define SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    1012","comments":"","declarations":[],"spell":"2540:9-2540:43|-1|1|2","extent":"2540:9-2540:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":464,"usr":9003269067783518730,"detailed_name":"SQLITE_DBCONFIG_DQS_DML","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_DBCONFIG_DQS_DML               1013","comments":"","declarations":[],"spell":"2541:9-2541:32|-1|1|2","extent":"2541:9-2541:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":465,"usr":5436927063930020319,"detailed_name":"SQLITE_DBCONFIG_DQS_DDL","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_DBCONFIG_DQS_DDL               1014","comments":"","declarations":[],"spell":"2542:9-2542:32|-1|1|2","extent":"2542:9-2542:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":466,"usr":757473553198770592,"detailed_name":"SQLITE_DBCONFIG_ENABLE_VIEW","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBCONFIG_ENABLE_VIEW           1015","comments":"","declarations":[],"spell":"2543:9-2543:36|-1|1|2","extent":"2543:9-2543:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":467,"usr":17075279405330259084,"detailed_name":"SQLITE_DBCONFIG_LEGACY_FILE_FORMAT","short_name_offset":0,"short_name_size":34,"hover":"#define SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    1016","comments":"","declarations":[],"spell":"2544:9-2544:43|-1|1|2","extent":"2544:9-2544:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":468,"usr":1964773135944951547,"detailed_name":"SQLITE_DBCONFIG_TRUSTED_SCHEMA","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_DBCONFIG_TRUSTED_SCHEMA        1017","comments":"","declarations":[],"spell":"2545:9-2545:39|-1|1|2","extent":"2545:9-2545:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":469,"usr":16005447870791496564,"detailed_name":"SQLITE_DBCONFIG_STMT_SCANSTATUS","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_DBCONFIG_STMT_SCANSTATUS       1018","comments":"","declarations":[],"spell":"2546:9-2546:40|-1|1|2","extent":"2546:9-2546:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":470,"usr":17081313074736728071,"detailed_name":"SQLITE_DBCONFIG_REVERSE_SCANORDER","short_name_offset":0,"short_name_size":33,"hover":"#define SQLITE_DBCONFIG_REVERSE_SCANORDER     1019","comments":"","declarations":[],"spell":"2547:9-2547:42|-1|1|2","extent":"2547:9-2547:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":471,"usr":8100472425244237243,"detailed_name":"SQLITE_DBCONFIG_MAX","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_DBCONFIG_MAX                   1019","comments":"","declarations":[],"spell":"2548:9-2548:28|-1|1|2","extent":"2548:9-2548:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":472,"usr":2984978002779448927,"detailed_name":"SQLITE_DENY","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_DENY   1","comments":"","declarations":[],"spell":"3268:9-3268:20|-1|1|2","extent":"3268:9-3268:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":473,"usr":9744637587201143370,"detailed_name":"SQLITE_IGNORE","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_IGNORE 2","comments":"","declarations":[],"spell":"3269:9-3269:22|-1|1|2","extent":"3269:9-3269:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":474,"usr":13494292631103460928,"detailed_name":"SQLITE_CREATE_INDEX","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_CREATE_INDEX          1","comments":"","declarations":[],"spell":"3291:9-3291:28|-1|1|2","extent":"3291:9-3291:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":475,"usr":4916007440933637031,"detailed_name":"SQLITE_CREATE_TABLE","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_CREATE_TABLE          2","comments":"","declarations":[],"spell":"3292:9-3292:28|-1|1|2","extent":"3292:9-3292:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":476,"usr":17338731826377906271,"detailed_name":"SQLITE_CREATE_TEMP_INDEX","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CREATE_TEMP_INDEX     3","comments":"","declarations":[],"spell":"3293:9-3293:33|-1|1|2","extent":"3293:9-3293:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":477,"usr":11552052777858629895,"detailed_name":"SQLITE_CREATE_TEMP_TABLE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_CREATE_TEMP_TABLE     4","comments":"","declarations":[],"spell":"3294:9-3294:33|-1|1|2","extent":"3294:9-3294:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":478,"usr":14269939565633585210,"detailed_name":"SQLITE_CREATE_TEMP_TRIGGER","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CREATE_TEMP_TRIGGER   5","comments":"","declarations":[],"spell":"3295:9-3295:35|-1|1|2","extent":"3295:9-3295:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":479,"usr":10653465014957346207,"detailed_name":"SQLITE_CREATE_TEMP_VIEW","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_CREATE_TEMP_VIEW      6","comments":"","declarations":[],"spell":"3296:9-3296:32|-1|1|2","extent":"3296:9-3296:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":480,"usr":13108833821156862912,"detailed_name":"SQLITE_CREATE_TRIGGER","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_CREATE_TRIGGER        7","comments":"","declarations":[],"spell":"3297:9-3297:30|-1|1|2","extent":"3297:9-3297:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":481,"usr":13286494989464835223,"detailed_name":"SQLITE_CREATE_VIEW","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_CREATE_VIEW           8","comments":"","declarations":[],"spell":"3298:9-3298:27|-1|1|2","extent":"3298:9-3298:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":482,"usr":14707580356552569837,"detailed_name":"SQLITE_DELETE","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_DELETE                9","comments":"","declarations":[],"spell":"3299:9-3299:22|-1|1|2","extent":"3299:9-3299:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":483,"usr":1493126716473403397,"detailed_name":"SQLITE_DROP_INDEX","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_DROP_INDEX           10","comments":"","declarations":[],"spell":"3300:9-3300:26|-1|1|2","extent":"3300:9-3300:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":484,"usr":6294055549229671672,"detailed_name":"SQLITE_DROP_TABLE","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_DROP_TABLE           11","comments":"","declarations":[],"spell":"3301:9-3301:26|-1|1|2","extent":"3301:9-3301:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":485,"usr":8366621611055372276,"detailed_name":"SQLITE_DROP_TEMP_INDEX","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_DROP_TEMP_INDEX      12","comments":"","declarations":[],"spell":"3302:9-3302:31|-1|1|2","extent":"3302:9-3302:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":486,"usr":805385127898870352,"detailed_name":"SQLITE_DROP_TEMP_TABLE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_DROP_TEMP_TABLE      13","comments":"","declarations":[],"spell":"3303:9-3303:31|-1|1|2","extent":"3303:9-3303:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":487,"usr":15418178967985584712,"detailed_name":"SQLITE_DROP_TEMP_TRIGGER","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_DROP_TEMP_TRIGGER    14","comments":"","declarations":[],"spell":"3304:9-3304:33|-1|1|2","extent":"3304:9-3304:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":488,"usr":11045505829341918045,"detailed_name":"SQLITE_DROP_TEMP_VIEW","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_DROP_TEMP_VIEW       15","comments":"","declarations":[],"spell":"3305:9-3305:30|-1|1|2","extent":"3305:9-3305:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":489,"usr":3892733689930260231,"detailed_name":"SQLITE_DROP_TRIGGER","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_DROP_TRIGGER         16","comments":"","declarations":[],"spell":"3306:9-3306:28|-1|1|2","extent":"3306:9-3306:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":490,"usr":9055507667174762813,"detailed_name":"SQLITE_DROP_VIEW","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_DROP_VIEW            17","comments":"","declarations":[],"spell":"3307:9-3307:25|-1|1|2","extent":"3307:9-3307:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":491,"usr":12979124010396994711,"detailed_name":"SQLITE_INSERT","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_INSERT               18","comments":"","declarations":[],"spell":"3308:9-3308:22|-1|1|2","extent":"3308:9-3308:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":492,"usr":7057047291200913318,"detailed_name":"SQLITE_PRAGMA","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_PRAGMA               19","comments":"","declarations":[],"spell":"3309:9-3309:22|-1|1|2","extent":"3309:9-3309:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":493,"usr":16911626894394485457,"detailed_name":"SQLITE_READ","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_READ                 20","comments":"","declarations":[],"spell":"3310:9-3310:20|-1|1|2","extent":"3310:9-3310:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":494,"usr":14488239887285409239,"detailed_name":"SQLITE_SELECT","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_SELECT               21","comments":"","declarations":[],"spell":"3311:9-3311:22|-1|1|2","extent":"3311:9-3311:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":495,"usr":4929797326317024071,"detailed_name":"SQLITE_TRANSACTION","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_TRANSACTION          22","comments":"","declarations":[],"spell":"3312:9-3312:27|-1|1|2","extent":"3312:9-3312:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":496,"usr":2480800949092185470,"detailed_name":"SQLITE_UPDATE","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_UPDATE               23","comments":"","declarations":[],"spell":"3313:9-3313:22|-1|1|2","extent":"3313:9-3313:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":497,"usr":1309426757228331531,"detailed_name":"SQLITE_ATTACH","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_ATTACH               24","comments":"","declarations":[],"spell":"3314:9-3314:22|-1|1|2","extent":"3314:9-3314:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":498,"usr":3209842156902135921,"detailed_name":"SQLITE_DETACH","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_DETACH               25","comments":"","declarations":[],"spell":"3315:9-3315:22|-1|1|2","extent":"3315:9-3315:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":499,"usr":3279271351979215305,"detailed_name":"SQLITE_ALTER_TABLE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_ALTER_TABLE          26","comments":"","declarations":[],"spell":"3316:9-3316:27|-1|1|2","extent":"3316:9-3316:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":500,"usr":9380702266137888670,"detailed_name":"SQLITE_REINDEX","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_REINDEX              27","comments":"","declarations":[],"spell":"3317:9-3317:23|-1|1|2","extent":"3317:9-3317:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":501,"usr":10935505989772267209,"detailed_name":"SQLITE_ANALYZE","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_ANALYZE              28","comments":"","declarations":[],"spell":"3318:9-3318:23|-1|1|2","extent":"3318:9-3318:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":502,"usr":8384094134983000242,"detailed_name":"SQLITE_CREATE_VTABLE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_CREATE_VTABLE        29","comments":"","declarations":[],"spell":"3319:9-3319:29|-1|1|2","extent":"3319:9-3319:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":503,"usr":8371880877653956446,"detailed_name":"SQLITE_DROP_VTABLE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_DROP_VTABLE          30","comments":"","declarations":[],"spell":"3320:9-3320:27|-1|1|2","extent":"3320:9-3320:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":504,"usr":16141301915881474140,"detailed_name":"SQLITE_FUNCTION","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_FUNCTION             31","comments":"","declarations":[],"spell":"3321:9-3321:24|-1|1|2","extent":"3321:9-3321:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":505,"usr":2992363834347383056,"detailed_name":"SQLITE_SAVEPOINT","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_SAVEPOINT            32","comments":"","declarations":[],"spell":"3322:9-3322:25|-1|1|2","extent":"3322:9-3322:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":506,"usr":14224526783196377316,"detailed_name":"SQLITE_COPY","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_COPY                  0","comments":"","declarations":[],"spell":"3323:9-3323:20|-1|1|2","extent":"3323:9-3323:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":507,"usr":353427580737407309,"detailed_name":"SQLITE_RECURSIVE","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_RECURSIVE            33","comments":"","declarations":[],"spell":"3324:9-3324:25|-1|1|2","extent":"3324:9-3324:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":508,"usr":8225277809156904569,"detailed_name":"SQLITE_TRACE_STMT","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_TRACE_STMT       0x01","comments":"","declarations":[],"spell":"3415:9-3415:26|-1|1|2","extent":"3415:9-3415:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":509,"usr":10491783702643039601,"detailed_name":"SQLITE_TRACE_PROFILE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_TRACE_PROFILE    0x02","comments":"","declarations":[],"spell":"3416:9-3416:29|-1|1|2","extent":"3416:9-3416:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":510,"usr":14425546858367934050,"detailed_name":"SQLITE_TRACE_ROW","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_TRACE_ROW        0x04","comments":"","declarations":[],"spell":"3417:9-3417:25|-1|1|2","extent":"3417:9-3417:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":511,"usr":9446896043339876168,"detailed_name":"SQLITE_TRACE_CLOSE","short_name_offset":0,"short_name_size":18,"hover":"#define SQLITE_TRACE_CLOSE      0x08","comments":"","declarations":[],"spell":"3418:9-3418:27|-1|1|2","extent":"3418:9-3418:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":512,"usr":8154883539500854096,"detailed_name":"SQLITE_LIMIT_LENGTH","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_LIMIT_LENGTH                    0","comments":"","declarations":[],"spell":"4161:9-4161:28|-1|1|2","extent":"4161:9-4161:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":513,"usr":3885431463766131107,"detailed_name":"SQLITE_LIMIT_SQL_LENGTH","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_LIMIT_SQL_LENGTH                1","comments":"","declarations":[],"spell":"4162:9-4162:32|-1|1|2","extent":"4162:9-4162:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":514,"usr":15549553340016214817,"detailed_name":"SQLITE_LIMIT_COLUMN","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_LIMIT_COLUMN                    2","comments":"","declarations":[],"spell":"4163:9-4163:28|-1|1|2","extent":"4163:9-4163:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":515,"usr":16060748447583229245,"detailed_name":"SQLITE_LIMIT_EXPR_DEPTH","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_LIMIT_EXPR_DEPTH                3","comments":"","declarations":[],"spell":"4164:9-4164:32|-1|1|2","extent":"4164:9-4164:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":516,"usr":15976590202366102388,"detailed_name":"SQLITE_LIMIT_COMPOUND_SELECT","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_LIMIT_COMPOUND_SELECT           4","comments":"","declarations":[],"spell":"4165:9-4165:37|-1|1|2","extent":"4165:9-4165:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":517,"usr":13471156936630235223,"detailed_name":"SQLITE_LIMIT_VDBE_OP","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_LIMIT_VDBE_OP                   5","comments":"","declarations":[],"spell":"4166:9-4166:29|-1|1|2","extent":"4166:9-4166:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":518,"usr":574149082922997688,"detailed_name":"SQLITE_LIMIT_FUNCTION_ARG","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_LIMIT_FUNCTION_ARG              6","comments":"","declarations":[],"spell":"4167:9-4167:34|-1|1|2","extent":"4167:9-4167:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":519,"usr":15576554145878576678,"detailed_name":"SQLITE_LIMIT_ATTACHED","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_LIMIT_ATTACHED                  7","comments":"","declarations":[],"spell":"4168:9-4168:30|-1|1|2","extent":"4168:9-4168:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":520,"usr":6795131513216157636,"detailed_name":"SQLITE_LIMIT_LIKE_PATTERN_LENGTH","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH       8","comments":"","declarations":[],"spell":"4169:9-4169:41|-1|1|2","extent":"4169:9-4169:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":521,"usr":18037354295093930201,"detailed_name":"SQLITE_LIMIT_VARIABLE_NUMBER","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_LIMIT_VARIABLE_NUMBER           9","comments":"","declarations":[],"spell":"4170:9-4170:37|-1|1|2","extent":"4170:9-4170:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":522,"usr":2354426997982556690,"detailed_name":"SQLITE_LIMIT_TRIGGER_DEPTH","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_LIMIT_TRIGGER_DEPTH            10","comments":"","declarations":[],"spell":"4171:9-4171:35|-1|1|2","extent":"4171:9-4171:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":523,"usr":17225765698824198587,"detailed_name":"SQLITE_LIMIT_WORKER_THREADS","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_LIMIT_WORKER_THREADS           11","comments":"","declarations":[],"spell":"4172:9-4172:36|-1|1|2","extent":"4172:9-4172:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":524,"usr":17586613423366969584,"detailed_name":"SQLITE_PREPARE_PERSISTENT","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_PREPARE_PERSISTENT              0x01","comments":"","declarations":[],"spell":"4219:9-4219:34|-1|1|2","extent":"4219:9-4219:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":525,"usr":13750323967951528954,"detailed_name":"SQLITE_PREPARE_NORMALIZE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_PREPARE_NORMALIZE               0x02","comments":"","declarations":[],"spell":"4220:9-4220:33|-1|1|2","extent":"4220:9-4220:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":526,"usr":3113528239084036988,"detailed_name":"SQLITE_PREPARE_NO_VTAB","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_PREPARE_NO_VTAB                 0x04","comments":"","declarations":[],"spell":"4221:9-4221:31|-1|1|2","extent":"4221:9-4221:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":527,"usr":6263106767962418228,"detailed_name":"SQLITE_PREPARE_DONT_LOG","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_PREPARE_DONT_LOG                0x10","comments":"","declarations":[],"spell":"4222:9-4222:32|-1|1|2","extent":"4222:9-4222:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":528,"usr":11362147599361146781,"detailed_name":"SQLITE_INTEGER","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_INTEGER  1","comments":"","declarations":[],"spell":"5082:9-5082:23|-1|1|2","extent":"5082:9-5082:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":529,"usr":8558438206853949073,"detailed_name":"SQLITE_FLOAT","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_FLOAT    2","comments":"","declarations":[],"spell":"5083:9-5083:21|-1|1|2","extent":"5083:9-5083:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":530,"usr":4229297535278946897,"detailed_name":"SQLITE_BLOB","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_BLOB     4","comments":"","declarations":[],"spell":"5084:9-5084:20|-1|1|2","extent":"5084:9-5084:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":531,"usr":16075269708988481052,"detailed_name":"SQLITE_NULL","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_NULL     5","comments":"","declarations":[],"spell":"5085:9-5085:20|-1|1|2","extent":"5085:9-5085:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":532,"usr":7340199788445685055,"detailed_name":"SQLITE_TEXT","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_TEXT     3","comments":"","declarations":[],"spell":"5089:10-5089:21|-1|1|2","extent":"5089:10-5089:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":533,"usr":11666749141884393514,"detailed_name":"SQLITE3_TEXT","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE3_TEXT     3","comments":"","declarations":[],"spell":"5091:9-5091:21|-1|1|2","extent":"5091:9-5091:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":534,"usr":8270479644002474358,"detailed_name":"SQLITE_UTF8","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_UTF8           1","comments":"","declarations":[],"spell":"5558:9-5558:20|-1|1|2","extent":"5558:9-5558:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":535,"usr":7976128121159830158,"detailed_name":"SQLITE_UTF16LE","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_UTF16LE        2","comments":"","declarations":[],"spell":"5559:9-5559:23|-1|1|2","extent":"5559:9-5559:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":536,"usr":14558146598060134717,"detailed_name":"SQLITE_UTF16BE","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_UTF16BE        3","comments":"","declarations":[],"spell":"5560:9-5560:23|-1|1|2","extent":"5560:9-5560:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":537,"usr":2457355246079932431,"detailed_name":"SQLITE_UTF16","short_name_offset":0,"short_name_size":12,"hover":"#define SQLITE_UTF16          4","comments":"","declarations":[],"spell":"5561:9-5561:21|-1|1|2","extent":"5561:9-5561:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":538,"usr":16598843718875169939,"detailed_name":"SQLITE_ANY","short_name_offset":0,"short_name_size":10,"hover":"#define SQLITE_ANY            5","comments":"","declarations":[],"spell":"5562:9-5562:19|-1|1|2","extent":"5562:9-5562:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":539,"usr":2099176654415600615,"detailed_name":"SQLITE_UTF16_ALIGNED","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_UTF16_ALIGNED  8","comments":"","declarations":[],"spell":"5563:9-5563:29|-1|1|2","extent":"5563:9-5563:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":540,"usr":17705132623769933417,"detailed_name":"SQLITE_DETERMINISTIC","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_DETERMINISTIC    0x000000800","comments":"","declarations":[],"spell":"5664:9-5664:29|-1|1|2","extent":"5664:9-5664:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":541,"usr":10296120633150276895,"detailed_name":"SQLITE_DIRECTONLY","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_DIRECTONLY       0x000080000","comments":"","declarations":[],"spell":"5665:9-5665:26|-1|1|2","extent":"5665:9-5665:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":542,"usr":10861590640500262744,"detailed_name":"SQLITE_SUBTYPE","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_SUBTYPE          0x000100000","comments":"","declarations":[],"spell":"5666:9-5666:23|-1|1|2","extent":"5666:9-5666:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":543,"usr":15278204987584828701,"detailed_name":"SQLITE_INNOCUOUS","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_INNOCUOUS        0x000200000","comments":"","declarations":[],"spell":"5667:9-5667:25|-1|1|2","extent":"5667:9-5667:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":544,"usr":16760849094356448625,"detailed_name":"SQLITE_RESULT_SUBTYPE","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_RESULT_SUBTYPE   0x001000000","comments":"","declarations":[],"spell":"5668:9-5668:30|-1|1|2","extent":"5668:9-5668:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":545,"usr":474329370177985238,"detailed_name":"SQLITE_SELFORDER1","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_SELFORDER1       0x002000000","comments":"","declarations":[],"spell":"5669:9-5669:26|-1|1|2","extent":"5669:9-5669:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":546,"usr":13426378201792990763,"detailed_name":"SQLITE_STATIC","short_name_offset":0,"short_name_size":13,"hover":"#define SQLITE_STATIC      ((sqlite3_destructor_type)0)","comments":"","declarations":[],"spell":"6106:9-6106:22|-1|1|2","extent":"6106:9-6106:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":547,"usr":194470196657294656,"detailed_name":"SQLITE_TRANSIENT","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_TRANSIENT   ((sqlite3_destructor_type)-1)","comments":"","declarations":[],"spell":"6107:9-6107:25|-1|1|2","extent":"6107:9-6107:57|-1|1|0","uses":[],"kind":255,"storage":0},{"id":548,"usr":17723387619350631,"detailed_name":"SQLITE_WIN32_DATA_DIRECTORY_TYPE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_WIN32_DATA_DIRECTORY_TYPE  1","comments":"","declarations":[],"spell":"6613:9-6613:41|-1|1|2","extent":"6613:9-6613:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":549,"usr":3958617261735029337,"detailed_name":"SQLITE_WIN32_TEMP_DIRECTORY_TYPE","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_WIN32_TEMP_DIRECTORY_TYPE  2","comments":"","declarations":[],"spell":"6614:9-6614:41|-1|1|2","extent":"6614:9-6614:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":550,"usr":7066372885750539309,"detailed_name":"SQLITE_TXN_NONE","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_TXN_NONE  0","comments":"","declarations":[],"spell":"6764:9-6764:24|-1|1|2","extent":"6764:9-6764:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":551,"usr":5442895417157659507,"detailed_name":"SQLITE_TXN_READ","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_TXN_READ  1","comments":"","declarations":[],"spell":"6765:9-6765:24|-1|1|2","extent":"6765:9-6765:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":552,"usr":12470631538141323107,"detailed_name":"SQLITE_TXN_WRITE","short_name_offset":0,"short_name_size":16,"hover":"#define SQLITE_TXN_WRITE 2","comments":"","declarations":[],"spell":"6766:9-6766:25|-1|1|2","extent":"6766:9-6766:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":553,"usr":10846393720697807967,"detailed_name":"SQLITE_INDEX_SCAN_UNIQUE","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_INDEX_SCAN_UNIQUE 0x00000001","comments":"","declarations":[],"spell":"7542:9-7542:33|-1|1|2","extent":"7542:9-7542:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":554,"usr":6353703005166671583,"detailed_name":"SQLITE_INDEX_SCAN_HEX","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_INDEX_SCAN_HEX    0x00000002","comments":"","declarations":[],"spell":"7543:9-7543:30|-1|1|2","extent":"7543:9-7543:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":555,"usr":12572843228030663851,"detailed_name":"SQLITE_INDEX_CONSTRAINT_EQ","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_EQ          2","comments":"","declarations":[],"spell":"7584:9-7584:35|-1|1|2","extent":"7584:9-7584:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":556,"usr":16058646918934766189,"detailed_name":"SQLITE_INDEX_CONSTRAINT_GT","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_GT          4","comments":"","declarations":[],"spell":"7585:9-7585:35|-1|1|2","extent":"7585:9-7585:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":557,"usr":15249348759701838670,"detailed_name":"SQLITE_INDEX_CONSTRAINT_LE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_LE          8","comments":"","declarations":[],"spell":"7586:9-7586:35|-1|1|2","extent":"7586:9-7586:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":558,"usr":15799312894069298288,"detailed_name":"SQLITE_INDEX_CONSTRAINT_LT","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_LT         16","comments":"","declarations":[],"spell":"7587:9-7587:35|-1|1|2","extent":"7587:9-7587:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":559,"usr":11048671670457311321,"detailed_name":"SQLITE_INDEX_CONSTRAINT_GE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_GE         32","comments":"","declarations":[],"spell":"7588:9-7588:35|-1|1|2","extent":"7588:9-7588:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":560,"usr":10509385237941563079,"detailed_name":"SQLITE_INDEX_CONSTRAINT_MATCH","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_INDEX_CONSTRAINT_MATCH      64","comments":"","declarations":[],"spell":"7589:9-7589:38|-1|1|2","extent":"7589:9-7589:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":561,"usr":10950663536976185145,"detailed_name":"SQLITE_INDEX_CONSTRAINT_LIKE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_INDEX_CONSTRAINT_LIKE       65","comments":"","declarations":[],"spell":"7590:9-7590:37|-1|1|2","extent":"7590:9-7590:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":562,"usr":8026042822006092581,"detailed_name":"SQLITE_INDEX_CONSTRAINT_GLOB","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_INDEX_CONSTRAINT_GLOB       66","comments":"","declarations":[],"spell":"7591:9-7591:37|-1|1|2","extent":"7591:9-7591:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":563,"usr":10697402275574731935,"detailed_name":"SQLITE_INDEX_CONSTRAINT_REGEXP","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_INDEX_CONSTRAINT_REGEXP     67","comments":"","declarations":[],"spell":"7592:9-7592:39|-1|1|2","extent":"7592:9-7592:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":564,"usr":9087343728373464234,"detailed_name":"SQLITE_INDEX_CONSTRAINT_NE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_NE         68","comments":"","declarations":[],"spell":"7593:9-7593:35|-1|1|2","extent":"7593:9-7593:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":565,"usr":16159216886104652542,"detailed_name":"SQLITE_INDEX_CONSTRAINT_ISNOT","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_INDEX_CONSTRAINT_ISNOT      69","comments":"","declarations":[],"spell":"7594:9-7594:38|-1|1|2","extent":"7594:9-7594:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":566,"usr":9769947145137858831,"detailed_name":"SQLITE_INDEX_CONSTRAINT_ISNOTNULL","short_name_offset":0,"short_name_size":33,"hover":"#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL  70","comments":"","declarations":[],"spell":"7595:9-7595:42|-1|1|2","extent":"7595:9-7595:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":567,"usr":5043205695930194869,"detailed_name":"SQLITE_INDEX_CONSTRAINT_ISNULL","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_INDEX_CONSTRAINT_ISNULL     71","comments":"","declarations":[],"spell":"7596:9-7596:39|-1|1|2","extent":"7596:9-7596:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":568,"usr":282576941074626112,"detailed_name":"SQLITE_INDEX_CONSTRAINT_IS","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_INDEX_CONSTRAINT_IS         72","comments":"","declarations":[],"spell":"7597:9-7597:35|-1|1|2","extent":"7597:9-7597:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":569,"usr":7606111023889271511,"detailed_name":"SQLITE_INDEX_CONSTRAINT_LIMIT","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_INDEX_CONSTRAINT_LIMIT      73","comments":"","declarations":[],"spell":"7598:9-7598:38|-1|1|2","extent":"7598:9-7598:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":570,"usr":1111655209988528722,"detailed_name":"SQLITE_INDEX_CONSTRAINT_OFFSET","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_INDEX_CONSTRAINT_OFFSET     74","comments":"","declarations":[],"spell":"7599:9-7599:39|-1|1|2","extent":"7599:9-7599:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":571,"usr":13665634813881433880,"detailed_name":"SQLITE_INDEX_CONSTRAINT_FUNCTION","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_INDEX_CONSTRAINT_FUNCTION  150","comments":"","declarations":[],"spell":"7600:9-7600:41|-1|1|2","extent":"7600:9-7600:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":572,"usr":16245933277503391415,"detailed_name":"SQLITE_MUTEX_FAST","short_name_offset":0,"short_name_size":17,"hover":"#define SQLITE_MUTEX_FAST             0","comments":"","declarations":[],"spell":"8260:9-8260:26|-1|1|2","extent":"8260:9-8260:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":573,"usr":8588676579091887340,"detailed_name":"SQLITE_MUTEX_RECURSIVE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_MUTEX_RECURSIVE        1","comments":"","declarations":[],"spell":"8261:9-8261:31|-1|1|2","extent":"8261:9-8261:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":574,"usr":5518511660868433829,"detailed_name":"SQLITE_MUTEX_STATIC_MAIN","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_MAIN      2","comments":"","declarations":[],"spell":"8262:9-8262:33|-1|1|2","extent":"8262:9-8262:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":575,"usr":5929482511223467703,"detailed_name":"SQLITE_MUTEX_STATIC_MEM","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_MUTEX_STATIC_MEM       3","comments":"","declarations":[],"spell":"8263:9-8263:32|-1|1|2","extent":"8263:9-8263:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":576,"usr":16149762569483326802,"detailed_name":"SQLITE_MUTEX_STATIC_MEM2","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_MEM2      4","comments":"","declarations":[],"spell":"8264:9-8264:33|-1|1|2","extent":"8264:9-8264:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":577,"usr":7728354677781079334,"detailed_name":"SQLITE_MUTEX_STATIC_OPEN","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_OPEN      4","comments":"","declarations":[],"spell":"8265:9-8265:33|-1|1|2","extent":"8265:9-8265:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":578,"usr":5002669704813816203,"detailed_name":"SQLITE_MUTEX_STATIC_PRNG","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_PRNG      5","comments":"","declarations":[],"spell":"8266:9-8266:33|-1|1|2","extent":"8266:9-8266:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":579,"usr":8589457663910709744,"detailed_name":"SQLITE_MUTEX_STATIC_LRU","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_MUTEX_STATIC_LRU       6","comments":"","declarations":[],"spell":"8267:9-8267:32|-1|1|2","extent":"8267:9-8267:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":580,"usr":655524253567840312,"detailed_name":"SQLITE_MUTEX_STATIC_LRU2","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_LRU2      7","comments":"","declarations":[],"spell":"8268:9-8268:33|-1|1|2","extent":"8268:9-8268:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":581,"usr":7948367223516633045,"detailed_name":"SQLITE_MUTEX_STATIC_PMEM","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_PMEM      7","comments":"","declarations":[],"spell":"8269:9-8269:33|-1|1|2","extent":"8269:9-8269:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":582,"usr":5707994693608115981,"detailed_name":"SQLITE_MUTEX_STATIC_APP1","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_APP1      8","comments":"","declarations":[],"spell":"8270:9-8270:33|-1|1|2","extent":"8270:9-8270:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":583,"usr":9632438154587879508,"detailed_name":"SQLITE_MUTEX_STATIC_APP2","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_APP2      9","comments":"","declarations":[],"spell":"8271:9-8271:33|-1|1|2","extent":"8271:9-8271:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":584,"usr":2694233660201747602,"detailed_name":"SQLITE_MUTEX_STATIC_APP3","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_APP3     10","comments":"","declarations":[],"spell":"8272:9-8272:33|-1|1|2","extent":"8272:9-8272:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":585,"usr":8784549453795684695,"detailed_name":"SQLITE_MUTEX_STATIC_VFS1","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_VFS1     11","comments":"","declarations":[],"spell":"8273:9-8273:33|-1|1|2","extent":"8273:9-8273:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":586,"usr":13490591046003212472,"detailed_name":"SQLITE_MUTEX_STATIC_VFS2","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_VFS2     12","comments":"","declarations":[],"spell":"8274:9-8274:33|-1|1|2","extent":"8274:9-8274:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":587,"usr":16659304769600996844,"detailed_name":"SQLITE_MUTEX_STATIC_VFS3","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_MUTEX_STATIC_VFS3     13","comments":"","declarations":[],"spell":"8275:9-8275:33|-1|1|2","extent":"8275:9-8275:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":588,"usr":6808758460153358568,"detailed_name":"SQLITE_MUTEX_STATIC_MASTER","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_MUTEX_STATIC_MASTER    2","comments":"","declarations":[],"spell":"8278:9-8278:35|-1|1|2","extent":"8278:9-8278:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":589,"usr":8407288677822841837,"detailed_name":"SQLITE_TESTCTRL_FIRST","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_TESTCTRL_FIRST                    5","comments":"","declarations":[],"spell":"8366:9-8366:30|-1|1|2","extent":"8366:9-8366:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":590,"usr":8992717302339302475,"detailed_name":"SQLITE_TESTCTRL_PRNG_SAVE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_TESTCTRL_PRNG_SAVE                5","comments":"","declarations":[],"spell":"8367:9-8367:34|-1|1|2","extent":"8367:9-8367:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":591,"usr":5479085307348782190,"detailed_name":"SQLITE_TESTCTRL_PRNG_RESTORE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_TESTCTRL_PRNG_RESTORE             6","comments":"","declarations":[],"spell":"8368:9-8368:37|-1|1|2","extent":"8368:9-8368:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":592,"usr":16253987085120311637,"detailed_name":"SQLITE_TESTCTRL_PRNG_RESET","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_TESTCTRL_PRNG_RESET               7","comments":"","declarations":[],"spell":"8369:9-8369:35|-1|1|2","extent":"8369:9-8369:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":593,"usr":16162352232240686564,"detailed_name":"SQLITE_TESTCTRL_FK_NO_ACTION","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_TESTCTRL_FK_NO_ACTION             7","comments":"","declarations":[],"spell":"8370:9-8370:37|-1|1|2","extent":"8370:9-8370:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":594,"usr":1313603972765803851,"detailed_name":"SQLITE_TESTCTRL_BITVEC_TEST","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_TESTCTRL_BITVEC_TEST              8","comments":"","declarations":[],"spell":"8371:9-8371:36|-1|1|2","extent":"8371:9-8371:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":595,"usr":9480786917077864242,"detailed_name":"SQLITE_TESTCTRL_FAULT_INSTALL","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_FAULT_INSTALL            9","comments":"","declarations":[],"spell":"8372:9-8372:38|-1|1|2","extent":"8372:9-8372:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":596,"usr":10274435267173644994,"detailed_name":"SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS","short_name_offset":0,"short_name_size":35,"hover":"#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10","comments":"","declarations":[],"spell":"8373:9-8373:44|-1|1|2","extent":"8373:9-8373:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":597,"usr":465146328918339710,"detailed_name":"SQLITE_TESTCTRL_PENDING_BYTE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_TESTCTRL_PENDING_BYTE            11","comments":"","declarations":[],"spell":"8374:9-8374:37|-1|1|2","extent":"8374:9-8374:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":598,"usr":12508445778394162990,"detailed_name":"SQLITE_TESTCTRL_ASSERT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_TESTCTRL_ASSERT                  12","comments":"","declarations":[],"spell":"8375:9-8375:31|-1|1|2","extent":"8375:9-8375:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":599,"usr":10824030675294603741,"detailed_name":"SQLITE_TESTCTRL_ALWAYS","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_TESTCTRL_ALWAYS                  13","comments":"","declarations":[],"spell":"8376:9-8376:31|-1|1|2","extent":"8376:9-8376:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":600,"usr":19226571630634187,"detailed_name":"SQLITE_TESTCTRL_RESERVE","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_TESTCTRL_RESERVE                 14","comments":"","declarations":[],"spell":"8377:9-8377:32|-1|1|2","extent":"8377:9-8377:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":601,"usr":3541411432446809684,"detailed_name":"SQLITE_TESTCTRL_JSON_SELFCHECK","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_TESTCTRL_JSON_SELFCHECK          14","comments":"","declarations":[],"spell":"8378:9-8378:39|-1|1|2","extent":"8378:9-8378:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":602,"usr":17542206541468004460,"detailed_name":"SQLITE_TESTCTRL_OPTIMIZATIONS","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_OPTIMIZATIONS           15","comments":"","declarations":[],"spell":"8379:9-8379:38|-1|1|2","extent":"8379:9-8379:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":603,"usr":5634504700116702829,"detailed_name":"SQLITE_TESTCTRL_ISKEYWORD","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_TESTCTRL_ISKEYWORD               16","comments":"","declarations":[],"spell":"8380:9-8380:34|-1|1|2","extent":"8380:9-8380:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":604,"usr":12110325609872534897,"detailed_name":"SQLITE_TESTCTRL_GETOPT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_TESTCTRL_GETOPT                  16","comments":"","declarations":[],"spell":"8381:9-8381:31|-1|1|2","extent":"8381:9-8381:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":605,"usr":6887079988401232841,"detailed_name":"SQLITE_TESTCTRL_SCRATCHMALLOC","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_SCRATCHMALLOC           17","comments":"","declarations":[],"spell":"8382:9-8382:38|-1|1|2","extent":"8382:9-8382:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":606,"usr":3613415988404196589,"detailed_name":"SQLITE_TESTCTRL_INTERNAL_FUNCTIONS","short_name_offset":0,"short_name_size":34,"hover":"#define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS      17","comments":"","declarations":[],"spell":"8383:9-8383:43|-1|1|2","extent":"8383:9-8383:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":607,"usr":4364560896878341531,"detailed_name":"SQLITE_TESTCTRL_LOCALTIME_FAULT","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_TESTCTRL_LOCALTIME_FAULT         18","comments":"","declarations":[],"spell":"8384:9-8384:40|-1|1|2","extent":"8384:9-8384:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":608,"usr":11109713138038816453,"detailed_name":"SQLITE_TESTCTRL_EXPLAIN_STMT","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_TESTCTRL_EXPLAIN_STMT            19","comments":"","declarations":[],"spell":"8385:9-8385:37|-1|1|2","extent":"8385:9-8385:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":609,"usr":13563182664805709829,"detailed_name":"SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD","short_name_offset":0,"short_name_size":36,"hover":"#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD    19","comments":"","declarations":[],"spell":"8386:9-8386:45|-1|1|2","extent":"8386:9-8386:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":610,"usr":321184492873356009,"detailed_name":"SQLITE_TESTCTRL_NEVER_CORRUPT","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_NEVER_CORRUPT           20","comments":"","declarations":[],"spell":"8387:9-8387:38|-1|1|2","extent":"8387:9-8387:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":611,"usr":328821756634985389,"detailed_name":"SQLITE_TESTCTRL_VDBE_COVERAGE","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_VDBE_COVERAGE           21","comments":"","declarations":[],"spell":"8388:9-8388:38|-1|1|2","extent":"8388:9-8388:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":612,"usr":15792428531436860418,"detailed_name":"SQLITE_TESTCTRL_BYTEORDER","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_TESTCTRL_BYTEORDER               22","comments":"","declarations":[],"spell":"8389:9-8389:34|-1|1|2","extent":"8389:9-8389:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":613,"usr":1177604540297423602,"detailed_name":"SQLITE_TESTCTRL_ISINIT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_TESTCTRL_ISINIT                  23","comments":"","declarations":[],"spell":"8390:9-8390:31|-1|1|2","extent":"8390:9-8390:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":614,"usr":927738728725372894,"detailed_name":"SQLITE_TESTCTRL_SORTER_MMAP","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_TESTCTRL_SORTER_MMAP             24","comments":"","declarations":[],"spell":"8391:9-8391:36|-1|1|2","extent":"8391:9-8391:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":615,"usr":18417204761211245004,"detailed_name":"SQLITE_TESTCTRL_IMPOSTER","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_TESTCTRL_IMPOSTER                25","comments":"","declarations":[],"spell":"8392:9-8392:33|-1|1|2","extent":"8392:9-8392:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":616,"usr":17180010558439082957,"detailed_name":"SQLITE_TESTCTRL_PARSER_COVERAGE","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_TESTCTRL_PARSER_COVERAGE         26","comments":"","declarations":[],"spell":"8393:9-8393:40|-1|1|2","extent":"8393:9-8393:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":617,"usr":1957413078920097994,"detailed_name":"SQLITE_TESTCTRL_RESULT_INTREAL","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_TESTCTRL_RESULT_INTREAL          27","comments":"","declarations":[],"spell":"8394:9-8394:39|-1|1|2","extent":"8394:9-8394:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":618,"usr":17134498797753370940,"detailed_name":"SQLITE_TESTCTRL_PRNG_SEED","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_TESTCTRL_PRNG_SEED               28","comments":"","declarations":[],"spell":"8395:9-8395:34|-1|1|2","extent":"8395:9-8395:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":619,"usr":7600809421166624146,"detailed_name":"SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS","short_name_offset":0,"short_name_size":35,"hover":"#define SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS     29","comments":"","declarations":[],"spell":"8396:9-8396:44|-1|1|2","extent":"8396:9-8396:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":620,"usr":11133181970065653176,"detailed_name":"SQLITE_TESTCTRL_SEEK_COUNT","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_TESTCTRL_SEEK_COUNT              30","comments":"","declarations":[],"spell":"8397:9-8397:35|-1|1|2","extent":"8397:9-8397:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":621,"usr":4838038130666915979,"detailed_name":"SQLITE_TESTCTRL_TRACEFLAGS","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_TESTCTRL_TRACEFLAGS              31","comments":"","declarations":[],"spell":"8398:9-8398:35|-1|1|2","extent":"8398:9-8398:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":622,"usr":17181592648718023519,"detailed_name":"SQLITE_TESTCTRL_TUNE","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_TESTCTRL_TUNE                    32","comments":"","declarations":[],"spell":"8399:9-8399:29|-1|1|2","extent":"8399:9-8399:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":623,"usr":5514341356737875141,"detailed_name":"SQLITE_TESTCTRL_LOGEST","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_TESTCTRL_LOGEST                  33","comments":"","declarations":[],"spell":"8400:9-8400:31|-1|1|2","extent":"8400:9-8400:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":624,"usr":8683881481045731688,"detailed_name":"SQLITE_TESTCTRL_USELONGDOUBLE","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_TESTCTRL_USELONGDOUBLE           34","comments":"","declarations":[],"spell":"8401:9-8401:38|-1|1|2","extent":"8401:9-8401:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":625,"usr":15965133021899547993,"detailed_name":"SQLITE_TESTCTRL_LAST","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_TESTCTRL_LAST                    34","comments":"","declarations":[],"spell":"8402:9-8402:29|-1|1|2","extent":"8402:9-8402:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":626,"usr":13136006174843207357,"detailed_name":"SQLITE_STATUS_MEMORY_USED","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_STATUS_MEMORY_USED          0","comments":"","declarations":[],"spell":"8689:9-8689:34|-1|1|2","extent":"8689:9-8689:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":627,"usr":13750469707684431537,"detailed_name":"SQLITE_STATUS_PAGECACHE_USED","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_STATUS_PAGECACHE_USED       1","comments":"","declarations":[],"spell":"8690:9-8690:37|-1|1|2","extent":"8690:9-8690:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":628,"usr":14972049758181737167,"detailed_name":"SQLITE_STATUS_PAGECACHE_OVERFLOW","short_name_offset":0,"short_name_size":32,"hover":"#define SQLITE_STATUS_PAGECACHE_OVERFLOW   2","comments":"","declarations":[],"spell":"8691:9-8691:41|-1|1|2","extent":"8691:9-8691:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":629,"usr":7061127574697796394,"detailed_name":"SQLITE_STATUS_SCRATCH_USED","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_STATUS_SCRATCH_USED         3","comments":"","declarations":[],"spell":"8692:9-8692:35|-1|1|2","extent":"8692:9-8692:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":630,"usr":9114829326139740800,"detailed_name":"SQLITE_STATUS_SCRATCH_OVERFLOW","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_STATUS_SCRATCH_OVERFLOW     4","comments":"","declarations":[],"spell":"8693:9-8693:39|-1|1|2","extent":"8693:9-8693:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":631,"usr":5049888118963941834,"detailed_name":"SQLITE_STATUS_MALLOC_SIZE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_STATUS_MALLOC_SIZE          5","comments":"","declarations":[],"spell":"8694:9-8694:34|-1|1|2","extent":"8694:9-8694:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":632,"usr":1162381027764916384,"detailed_name":"SQLITE_STATUS_PARSER_STACK","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_STATUS_PARSER_STACK         6","comments":"","declarations":[],"spell":"8695:9-8695:35|-1|1|2","extent":"8695:9-8695:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":633,"usr":15340410943794588103,"detailed_name":"SQLITE_STATUS_PAGECACHE_SIZE","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_STATUS_PAGECACHE_SIZE       7","comments":"","declarations":[],"spell":"8696:9-8696:37|-1|1|2","extent":"8696:9-8696:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":634,"usr":1794742247552363271,"detailed_name":"SQLITE_STATUS_SCRATCH_SIZE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_STATUS_SCRATCH_SIZE         8","comments":"","declarations":[],"spell":"8697:9-8697:35|-1|1|2","extent":"8697:9-8697:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":635,"usr":14957179468340823845,"detailed_name":"SQLITE_STATUS_MALLOC_COUNT","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_STATUS_MALLOC_COUNT         9","comments":"","declarations":[],"spell":"8698:9-8698:35|-1|1|2","extent":"8698:9-8698:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":636,"usr":15950893501586079558,"detailed_name":"SQLITE_DBSTATUS_LOOKASIDE_USED","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_DBSTATUS_LOOKASIDE_USED       0","comments":"","declarations":[],"spell":"8836:9-8836:39|-1|1|2","extent":"8836:9-8836:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":637,"usr":3195525154961457947,"detailed_name":"SQLITE_DBSTATUS_CACHE_USED","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_DBSTATUS_CACHE_USED           1","comments":"","declarations":[],"spell":"8837:9-8837:35|-1|1|2","extent":"8837:9-8837:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":638,"usr":10147946736772478939,"detailed_name":"SQLITE_DBSTATUS_SCHEMA_USED","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBSTATUS_SCHEMA_USED          2","comments":"","declarations":[],"spell":"8838:9-8838:36|-1|1|2","extent":"8838:9-8838:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":639,"usr":15655701478676691924,"detailed_name":"SQLITE_DBSTATUS_STMT_USED","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_DBSTATUS_STMT_USED            3","comments":"","declarations":[],"spell":"8839:9-8839:34|-1|1|2","extent":"8839:9-8839:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":640,"usr":6141481840841359815,"detailed_name":"SQLITE_DBSTATUS_LOOKASIDE_HIT","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_DBSTATUS_LOOKASIDE_HIT        4","comments":"","declarations":[],"spell":"8840:9-8840:38|-1|1|2","extent":"8840:9-8840:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":641,"usr":14213597098143298089,"detailed_name":"SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE","short_name_offset":0,"short_name_size":35,"hover":"#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE  5","comments":"","declarations":[],"spell":"8841:9-8841:44|-1|1|2","extent":"8841:9-8841:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":642,"usr":5120298233459277326,"detailed_name":"SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL","short_name_offset":0,"short_name_size":35,"hover":"#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL  6","comments":"","declarations":[],"spell":"8842:9-8842:44|-1|1|2","extent":"8842:9-8842:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":643,"usr":16592877637669506724,"detailed_name":"SQLITE_DBSTATUS_CACHE_HIT","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_DBSTATUS_CACHE_HIT            7","comments":"","declarations":[],"spell":"8843:9-8843:34|-1|1|2","extent":"8843:9-8843:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":644,"usr":4399041684354813405,"detailed_name":"SQLITE_DBSTATUS_CACHE_MISS","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_DBSTATUS_CACHE_MISS           8","comments":"","declarations":[],"spell":"8844:9-8844:35|-1|1|2","extent":"8844:9-8844:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":645,"usr":8226422740853255143,"detailed_name":"SQLITE_DBSTATUS_CACHE_WRITE","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBSTATUS_CACHE_WRITE          9","comments":"","declarations":[],"spell":"8845:9-8845:36|-1|1|2","extent":"8845:9-8845:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":646,"usr":5340510779422262579,"detailed_name":"SQLITE_DBSTATUS_DEFERRED_FKS","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_DBSTATUS_DEFERRED_FKS        10","comments":"","declarations":[],"spell":"8846:9-8846:37|-1|1|2","extent":"8846:9-8846:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":647,"usr":2341979282842621363,"detailed_name":"SQLITE_DBSTATUS_CACHE_USED_SHARED","short_name_offset":0,"short_name_size":33,"hover":"#define SQLITE_DBSTATUS_CACHE_USED_SHARED   11","comments":"","declarations":[],"spell":"8847:9-8847:42|-1|1|2","extent":"8847:9-8847:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":648,"usr":5057822810816716567,"detailed_name":"SQLITE_DBSTATUS_CACHE_SPILL","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DBSTATUS_CACHE_SPILL         12","comments":"","declarations":[],"spell":"8848:9-8848:36|-1|1|2","extent":"8848:9-8848:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":649,"usr":9159208393595084143,"detailed_name":"SQLITE_DBSTATUS_MAX","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_DBSTATUS_MAX                 12","comments":"","declarations":[],"spell":"8849:9-8849:28|-1|1|2","extent":"8849:9-8849:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":650,"usr":4915167333879309739,"detailed_name":"SQLITE_STMTSTATUS_FULLSCAN_STEP","short_name_offset":0,"short_name_size":31,"hover":"#define SQLITE_STMTSTATUS_FULLSCAN_STEP     1","comments":"","declarations":[],"spell":"8943:9-8943:40|-1|1|2","extent":"8943:9-8943:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":651,"usr":17029515039131750308,"detailed_name":"SQLITE_STMTSTATUS_SORT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_STMTSTATUS_SORT              2","comments":"","declarations":[],"spell":"8944:9-8944:31|-1|1|2","extent":"8944:9-8944:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":652,"usr":374410559489822484,"detailed_name":"SQLITE_STMTSTATUS_AUTOINDEX","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_STMTSTATUS_AUTOINDEX         3","comments":"","declarations":[],"spell":"8945:9-8945:36|-1|1|2","extent":"8945:9-8945:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":653,"usr":3832044086849059857,"detailed_name":"SQLITE_STMTSTATUS_VM_STEP","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_STMTSTATUS_VM_STEP           4","comments":"","declarations":[],"spell":"8946:9-8946:34|-1|1|2","extent":"8946:9-8946:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":654,"usr":16333790352101273557,"detailed_name":"SQLITE_STMTSTATUS_REPREPARE","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_STMTSTATUS_REPREPARE         5","comments":"","declarations":[],"spell":"8947:9-8947:36|-1|1|2","extent":"8947:9-8947:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":655,"usr":12293417814505736235,"detailed_name":"SQLITE_STMTSTATUS_RUN","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_STMTSTATUS_RUN               6","comments":"","declarations":[],"spell":"8948:9-8948:30|-1|1|2","extent":"8948:9-8948:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":656,"usr":18160830155865796225,"detailed_name":"SQLITE_STMTSTATUS_FILTER_MISS","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_STMTSTATUS_FILTER_MISS       7","comments":"","declarations":[],"spell":"8949:9-8949:38|-1|1|2","extent":"8949:9-8949:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":657,"usr":6295489981840819188,"detailed_name":"SQLITE_STMTSTATUS_FILTER_HIT","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_STMTSTATUS_FILTER_HIT        8","comments":"","declarations":[],"spell":"8950:9-8950:37|-1|1|2","extent":"8950:9-8950:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":658,"usr":12021011935577467442,"detailed_name":"SQLITE_STMTSTATUS_MEMUSED","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_STMTSTATUS_MEMUSED           99","comments":"","declarations":[],"spell":"8951:9-8951:34|-1|1|2","extent":"8951:9-8951:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":659,"usr":1738371820220108124,"detailed_name":"SQLITE_CHECKPOINT_PASSIVE","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CHECKPOINT_PASSIVE  0","comments":"","declarations":[],"spell":"9798:9-9798:34|-1|1|2","extent":"9798:9-9798:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":660,"usr":696857211773933296,"detailed_name":"SQLITE_CHECKPOINT_FULL","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_CHECKPOINT_FULL     1","comments":"","declarations":[],"spell":"9799:9-9799:31|-1|1|2","extent":"9799:9-9799:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":661,"usr":10560516537869352638,"detailed_name":"SQLITE_CHECKPOINT_RESTART","short_name_offset":0,"short_name_size":25,"hover":"#define SQLITE_CHECKPOINT_RESTART  2","comments":"","declarations":[],"spell":"9800:9-9800:34|-1|1|2","extent":"9800:9-9800:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":662,"usr":12744727554291192114,"detailed_name":"SQLITE_CHECKPOINT_TRUNCATE","short_name_offset":0,"short_name_size":26,"hover":"#define SQLITE_CHECKPOINT_TRUNCATE 3","comments":"","declarations":[],"spell":"9801:9-9801:35|-1|1|2","extent":"9801:9-9801:37|-1|1|0","uses":[],"kind":255,"storage":0},{"id":663,"usr":15361462518761911711,"detailed_name":"SQLITE_VTAB_CONSTRAINT_SUPPORT","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_VTAB_CONSTRAINT_SUPPORT 1","comments":"","declarations":[],"spell":"9894:9-9894:39|-1|1|2","extent":"9894:9-9894:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":664,"usr":2829570051862224343,"detailed_name":"SQLITE_VTAB_INNOCUOUS","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_VTAB_INNOCUOUS          2","comments":"","declarations":[],"spell":"9895:9-9895:30|-1|1|2","extent":"9895:9-9895:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":665,"usr":4645711044666549936,"detailed_name":"SQLITE_VTAB_DIRECTONLY","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_VTAB_DIRECTONLY         3","comments":"","declarations":[],"spell":"9896:9-9896:31|-1|1|2","extent":"9896:9-9896:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":666,"usr":14701416354039411495,"detailed_name":"SQLITE_VTAB_USES_ALL_SCHEMAS","short_name_offset":0,"short_name_size":28,"hover":"#define SQLITE_VTAB_USES_ALL_SCHEMAS   4","comments":"","declarations":[],"spell":"9897:9-9897:37|-1|1|2","extent":"9897:9-9897:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":667,"usr":18245223373927281889,"detailed_name":"SQLITE_ROLLBACK","short_name_offset":0,"short_name_size":15,"hover":"#define SQLITE_ROLLBACK 1","comments":"","declarations":[],"spell":"10241:9-10241:24|-1|1|2","extent":"10241:9-10241:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":668,"usr":9332278886155596979,"detailed_name":"SQLITE_FAIL","short_name_offset":0,"short_name_size":11,"hover":"#define SQLITE_FAIL     3","comments":"","declarations":[],"spell":"10243:9-10243:20|-1|1|2","extent":"10243:9-10243:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":669,"usr":11099777167367377522,"detailed_name":"SQLITE_REPLACE","short_name_offset":0,"short_name_size":14,"hover":"#define SQLITE_REPLACE  5","comments":"","declarations":[],"spell":"10245:9-10245:23|-1|1|2","extent":"10245:9-10245:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":670,"usr":809150375169532275,"detailed_name":"SQLITE_SCANSTAT_NLOOP","short_name_offset":0,"short_name_size":21,"hover":"#define SQLITE_SCANSTAT_NLOOP    0","comments":"","declarations":[],"spell":"10310:9-10310:30|-1|1|2","extent":"10310:9-10310:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":671,"usr":3133062507832709903,"detailed_name":"SQLITE_SCANSTAT_NVISIT","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_SCANSTAT_NVISIT   1","comments":"","declarations":[],"spell":"10311:9-10311:31|-1|1|2","extent":"10311:9-10311:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":672,"usr":13186617466024860741,"detailed_name":"SQLITE_SCANSTAT_EST","short_name_offset":0,"short_name_size":19,"hover":"#define SQLITE_SCANSTAT_EST      2","comments":"","declarations":[],"spell":"10312:9-10312:28|-1|1|2","extent":"10312:9-10312:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":673,"usr":10113546773552690631,"detailed_name":"SQLITE_SCANSTAT_NAME","short_name_offset":0,"short_name_size":20,"hover":"#define SQLITE_SCANSTAT_NAME     3","comments":"","declarations":[],"spell":"10313:9-10313:29|-1|1|2","extent":"10313:9-10313:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":674,"usr":18436662299187188311,"detailed_name":"SQLITE_SCANSTAT_EXPLAIN","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_SCANSTAT_EXPLAIN  4","comments":"","declarations":[],"spell":"10314:9-10314:32|-1|1|2","extent":"10314:9-10314:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":675,"usr":7968433401920134785,"detailed_name":"SQLITE_SCANSTAT_SELECTID","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_SCANSTAT_SELECTID 5","comments":"","declarations":[],"spell":"10315:9-10315:33|-1|1|2","extent":"10315:9-10315:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":676,"usr":12126743641975555407,"detailed_name":"SQLITE_SCANSTAT_PARENTID","short_name_offset":0,"short_name_size":24,"hover":"#define SQLITE_SCANSTAT_PARENTID 6","comments":"","declarations":[],"spell":"10316:9-10316:33|-1|1|2","extent":"10316:9-10316:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":677,"usr":9296466490992536993,"detailed_name":"SQLITE_SCANSTAT_NCYCLE","short_name_offset":0,"short_name_size":22,"hover":"#define SQLITE_SCANSTAT_NCYCLE   7","comments":"","declarations":[],"spell":"10317:9-10317:31|-1|1|2","extent":"10317:9-10317:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":678,"usr":1872657578491894161,"detailed_name":"SQLITE_SCANSTAT_COMPLEX","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_SCANSTAT_COMPLEX 0x0001","comments":"","declarations":[],"spell":"10374:9-10374:32|-1|1|2","extent":"10374:9-10374:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":679,"usr":9896016744747026431,"detailed_name":"SQLITE_SERIALIZE_NOCOPY","short_name_offset":0,"short_name_size":23,"hover":"#define SQLITE_SERIALIZE_NOCOPY 0x001","comments":"","declarations":[],"spell":"10812:9-10812:32|-1|1|2","extent":"10812:9-10812:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":680,"usr":13049106668751378077,"detailed_name":"SQLITE_DESERIALIZE_FREEONCLOSE","short_name_offset":0,"short_name_size":30,"hover":"#define SQLITE_DESERIALIZE_FREEONCLOSE 1","comments":"","declarations":[],"spell":"10887:9-10887:39|-1|1|2","extent":"10887:9-10887:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":681,"usr":8656590468844852652,"detailed_name":"SQLITE_DESERIALIZE_RESIZEABLE","short_name_offset":0,"short_name_size":29,"hover":"#define SQLITE_DESERIALIZE_RESIZEABLE  2","comments":"","declarations":[],"spell":"10888:9-10888:38|-1|1|2","extent":"10888:9-10888:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":682,"usr":7140097091743150846,"detailed_name":"SQLITE_DESERIALIZE_READONLY","short_name_offset":0,"short_name_size":27,"hover":"#define SQLITE_DESERIALIZE_READONLY    4","comments":"","declarations":[],"spell":"10889:9-10889:36|-1|1|2","extent":"10889:9-10889:41|-1|1|0","uses":[],"kind":255,"storage":0},{"id":683,"usr":5816636985820423936,"detailed_name":"_SQLITE3RTREE_H_","short_name_offset":0,"short_name_size":16,"hover":"#define _SQLITE3RTREE_H_","comments":"","declarations":[],"spell":"10930:9-10930:25|-1|1|2","extent":"10930:9-10930:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":684,"usr":10704668420210712293,"detailed_name":"NOT_WITHIN","short_name_offset":0,"short_name_size":10,"hover":"#define NOT_WITHIN       0","comments":"","declarations":[],"spell":"11022:9-11022:19|-1|1|2","extent":"11022:9-11022:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":685,"usr":237029852077546862,"detailed_name":"PARTLY_WITHIN","short_name_offset":0,"short_name_size":13,"hover":"#define PARTLY_WITHIN    1","comments":"","declarations":[],"spell":"11023:9-11023:22|-1|1|2","extent":"11023:9-11023:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":686,"usr":6026910121714340956,"detailed_name":"FULLY_WITHIN","short_name_offset":0,"short_name_size":12,"hover":"#define FULLY_WITHIN     2","comments":"","declarations":[],"spell":"11024:9-11024:21|-1|1|2","extent":"11024:9-11024:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":687,"usr":15998608084340036641,"detailed_name":"_FTS5_H","short_name_offset":0,"short_name_size":7,"hover":"#define _FTS5_H","comments":"","declarations":[],"spell":"12886:9-12886:16|-1|1|2","extent":"12886:9-12886:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":688,"usr":8816859282777265876,"detailed_name":"FTS5_TOKENIZE_QUERY","short_name_offset":0,"short_name_size":19,"hover":"#define FTS5_TOKENIZE_QUERY     0x0001","comments":"","declarations":[],"spell":"13543:9-13543:28|-1|1|2","extent":"13543:9-13543:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":689,"usr":8972774579083551487,"detailed_name":"FTS5_TOKENIZE_PREFIX","short_name_offset":0,"short_name_size":20,"hover":"#define FTS5_TOKENIZE_PREFIX    0x0002","comments":"","declarations":[],"spell":"13544:9-13544:29|-1|1|2","extent":"13544:9-13544:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":690,"usr":3074770930681902891,"detailed_name":"FTS5_TOKENIZE_DOCUMENT","short_name_offset":0,"short_name_size":22,"hover":"#define FTS5_TOKENIZE_DOCUMENT  0x0004","comments":"","declarations":[],"spell":"13545:9-13545:31|-1|1|2","extent":"13545:9-13545:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":691,"usr":17243649559204062105,"detailed_name":"FTS5_TOKENIZE_AUX","short_name_offset":0,"short_name_size":17,"hover":"#define FTS5_TOKENIZE_AUX       0x0008","comments":"","declarations":[],"spell":"13546:9-13546:26|-1|1|2","extent":"13546:9-13546:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":692,"usr":16632167689018154631,"detailed_name":"FTS5_TOKEN_COLOCATED","short_name_offset":0,"short_name_size":20,"hover":"#define FTS5_TOKEN_COLOCATED    0x0001","comments":"","declarations":[],"spell":"13550:9-13550:29|-1|1|2","extent":"13550:9-13550:39|-1|1|0","uses":[],"kind":255,"storage":0}]}