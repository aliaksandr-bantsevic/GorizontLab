//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "FMain.h"

#include <windows.h>
#include <mmsystem.h>
#include <iostream>
#pragma comment(lib, "winmm.lib")
#include <algorithm>

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm_General* Form_General;
//---------------------------------------------------------------------------
__fastcall TForm_General::TForm_General(TComponent* Owner) : TForm(Owner)
{
    InitMainWindow();
}
//---------------------GLOBALS-----------------------------------------------

TGLSystem* GLSystem;
TMainMonitorThread*  MainMonitorThread;

TDateTime g_global_second_timer = 0.;
TDateTime g_monitor_second_timer = Now();

WideString g_ws_msg;
int g_global_system_mode = SYS_MODE_ADJ;

TIMECAPS tc;
UINT wTimerRes;

TDateTime g_time_all_data_request = Now();
bool g_system_monitoring_run = false;

//--------------------------------------------------------------------------
void TForm_General::SetGeneralCaption(void)
{
    WideString cap;
    TCHAR* cp = GLSystem->GetConfPath();
    cap.printf(L"GorizontLab [%s]", cp);
    Caption = cap;
}

void TForm_General::InitMainWindow(void)
{
    this->WindowState = wsMaximized;
    DevideMainWindow(30, 85);

    // Запрашиваем разрешение таймера 1 мс
    TIMECAPS tc;
    UINT wTimerRes;

    if (timeGetDevCaps(&tc, sizeof(TIMECAPS)) != TIMERR_NOERROR) {
        //std::cerr << "Ошибка при получении возможностей таймера." << std::endl;
		StatusBar->Panels->Items[3]->Text =
            L"Ошибка при получении возможностей таймера.";
    } else {
        //wTimerRes = std::min(std::max(tc.wPeriodMin, 1), tc.wPeriodMax);
        wTimerRes = 1;
        // Устанавливаем разрешение таймера
        timeBeginPeriod(wTimerRes);
        StatusBar->Panels->Items[3]->Text =
            L"Системный таймер установлен на разрешение 1 мс.";
    }
}

void TForm_General::DevideMainWindow(int browser_part, int data_part)
{
    int hor_res = Form_General->Width;
    int ver_res = Form_General->Height;

    int browser_width = hor_res * browser_part / 100;
    int data_height = ver_res * data_part / 100;

    this->Panel_Browser->Width = browser_width;
    this->Panel_Data->Height = data_height;
}

void __fastcall TForm_General::Timer_General_1sTimer(TObject* Sender)
{
    WideString smonsectime = FormatDateTime(L"yyyy-mm-dd hh:mm:ss:zzz", g_monitor_second_timer);

	//Show Current time
    StatusBar->Panels->Items[0]->Text = smonsectime;//GetCurrentTimeStr();

	//Show global time
	StatusBar->Panels->Items[1]->Text =
		GetGlobalSecondTimerStr(&g_global_second_timer);
}
//---------------------------------------------------------------------------

void TForm_General::InitApplication(void)
{
    // FMaincaptionPointer& = Form_General->Caption;

	GLSystem = new TGLSystem(TreeView_Browser, XMLDocument_conf);
	MainMonitorThread = new TMainMonitorThread(false , GLSystem);

    GLSystem->set_console(ListBox_console);
    GLSystem->console(L"Приложение", L"Инициализация ...");

    WideString s;
    s.printf(L"Версия: %d.%d.%d", BUILD, VERSION, SUBVERSION);

    StatusBar->Panels->Items[2]->Text = s;

    GLSystem->LoadConf();

    //WideString cap;
	//TCHAR* cp = GLSystem->GetConfPath();
	//cap.printf(L"GorizontLab [%s]", cp);
    //Caption = cap;

    SetGeneralCaption();

    GLSystem->console(L"Приложение", L"... успешно");
}

void __fastcall TForm_General::Timer_Init_appTimer(TObject* Sender)
{
	Timer_Init_app->Enabled = false;
	InitApplication();
	GLSystem->view_ports_status(ListView_ports);
	GLSystem->view_sensors_status(ListView_sensors);
	GLSystem->view_data_status(ListView_data);
}
//---------------------------------------------------------------------------

int pnum = 1;

void __fastcall TForm_General::ToolButton1Click(TObject* Sender)
{
    GLSystem->SaveConf();
}
//---------------------------------------------------------------------------
void TForm_General::HidePopupMenu(void)
{
    this->N_AddPlace->Visible = false;
    this->N_DeletePlace->Visible = false;
    this->N_AddPort->Visible = false;

    this->N_DeletePort->Visible = false;
    this->N_AddSensor->Visible = false;
    this->N_DeleteSensor->Visible = false;

    this->N_Port->Visible = false;
    this->N_Sensor->Visible = false;

    this->N_AdjustPlace->Visible = false;
    this->N_AdjustPort->Visible = false;
    this->N_AdjustSensor->Visible = false;
    this->N_AdjustSystem->Visible = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::TreeView_BrowserClick(TObject* Sender)
{
    //this->GLSystem->

	TTreeNode* nd = NULL;
	nd = TreeView_Browser->Selected;

	int type = OBJ_TYPE_NONE;

	GLSystem->ProcBrowserСlick(nd, &type);

	HidePopupMenu();

	switch (type) {
		case OBJ_TYPE_SYST:
			this->N_AddPlace->Visible = true;
			this->N_AdjustSystem->Visible = true;
			break;

		case OBJ_TYPE_PLCE:
			this->N_AdjustPlace->Visible = true;
			this->N_DeletePlace->Visible = true;
			this->N_AddPort->Visible = true;
			break;

		case OBJ_TYPE_PORT:
			this->N_DeletePort->Visible = true;
			this->N_AdjustPort->Visible = true;
			this->N_AddSensor->Visible = true;
			break;

		case OBJ_TYPE_SNSR:
            this->N_DeleteSensor->Visible = true;
			this->N_AdjustSensor->Visible = true;
            break;

        default:;
	}

	ShowSystemElement(g_ws_msg);
}
//---------------------------------------------------------------------------
void __fastcall TForm_General::PopupMenuPopup(TObject* Sender)
{
	TreeView_BrowserClick(NULL);
}
//---------------------------------------------------------------------------
void TForm_General::ShowSystemElement(WideString s)
{
    StatusBar->Panels->Items[3]->Text = s;
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_AddPortClick(TObject* Sender)
{
    AddPort();
}
//---------------------------------------------------------------------------

void TForm_General::AddPlace(void)
{
    Form_Place_adjust->start(NULL);
}
//---------------------------------------------------------------------------

void TForm_General::AddSensor(void)
{
	Form_Sensor_adjust->start(NULL);
}

//---------------------------------------------------------------------------

void __fastcall TForm_General::N_AddPlaceClick(TObject* Sender)
{
    AddPlace();
}
//---------------------------------------------------------------------------
void TForm_General::AddPort(void)
{
    Form_Port_adjust->start(NULL);
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_AddSensorClick(TObject* Sender)
{
	AddSensor();
    GLSystem->ReDraw();
}
//---------------------------------------------------------------------------

//#include "Protocol_MODBUS_RTU.h"

void __fastcall TForm_General::ToolButton4Click(TObject* Sender)
{

	//TProtocol_Modbus_RTU* prt;

	//prt = new TProtocol_Modbus_RTU;

return;

   //GLSystem->view_ports_status(ListView_ports);
   //GLSystem->view_sensors_status(ListView_sensors);
   GLSystem->view_data_status(ListView_data);

return;

TGLPort* pr = GLSystem->GetCurPr();

	pr->start_cycle();
	pr->cycle();

	return;

	//GLSystem->bbf_save_sensor_data_s(Now(), GLSystem->get_cur_sensor());

	//return;

	GLSystem->open_DB();

    double x = 23.456;
	double y = 569.567;

    TDateTime tt = Now();
    TDateTime t1 = Now();

	for (int i = 0; i < 10000; i++) {

		//GLSystem->bbf_store_sensor_data(tt);
		GLSystem->store_sensor_data(tt);
        tt += T_ONE_SEC;
		x += 1.23;
        y += 4.56;
    }

    TDateTime t2 = Now();

    double dt = (double)(t2 - t1) / 4. / 10000. / T_ONE_MSEC;

    WideString msg;

    msg.printf(L"dt = %f", dt);
    GLSystem->console(L"sys", msg);
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::ToolButton3Click(TObject* Sender)
{

	//GLSystem->update_view_ports_status();
	//GLSystem->update_view_sensors_status();

	MainMonitorThread->resume();
	return;

	GLSystem->open_DB();

    TGLSensor* sn = GLSystem->get_cur_sensor();

    TDateTime t1 = TDateTime(2025, 2, 3);
    TDateTime t2 = Now();

    std::list<dt_sensor_data_record_s> list;

	list = GLSystem->read_sensor_data_s(sn, t1, t2);
	//list = GLSystem->bbf_read_sensor_data_s(sn, t1, t2);

	int i = 0;

    for (auto r : list) {
        i++;

        TDateTime t = r.t;

        Sleep(1);
    }

	Sleep(1);
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::FormClose(TObject* Sender, TCloseAction &Action)
{
    MainMonitorThread->exit(); Sleep(100);

    GLSystem->SaveConf();
    // Восстанавливаем разрешение таймера
    timeEndPeriod(wTimerRes);
    StatusBar->Panels->Items[3]->Text = L"Системный таймер восстановлен.";
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_AdjustSensorClick(TObject* Sender)
{
	AdjustSensor();
    GLSystem->ReDraw();
}
//---------------------------------------------------------------------------
void TForm_General::AdjustSensor(void)
{
	Form_Sensor_adjust->start(GLSystem->GetCurSn());
}
void __fastcall TForm_General::N_DeleteSensorClick(TObject* Sender)
{
    GLSystem->delete_sensor();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_DeletePortClick(TObject* Sender)
{
    GLSystem->delete_port();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_DeletePlaceClick(TObject* Sender)
{
    GLSystem->delete_place();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::ToolButton2Click(TObject* Sender)
{
    GLSystem->CreateConf(SaveDialog);
    SetGeneralCaption();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::ToolButton5Click(TObject* Sender)
{
    GLSystem->OpenConf(OpenDialog);
    SetGeneralCaption();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::ToolButton6Click(TObject* Sender)
{
    GLSystem->SaveConf(SaveDialog);
    SetGeneralCaption();
}
//---------------------------------------------------------------------------

void __fastcall TForm_General::N_AdjustPortClick(TObject *Sender)
{
	AdjustPort();
}
//---------------------------------------------------------------------------

void TForm_General::AdjustPort(void)
{
   Form_Port_adjust->start(GLSystem->GetCurPr());
   GLSystem->ReDraw();
}
void __fastcall TForm_General::TreeView_BrowserDblClick(TObject *Sender)
{
  	TTreeNode* nd = NULL;
	nd = TreeView_Browser->Selected;
	//nd->Expand(!nd->Expanded);

	//nd->Expanded = (!nd->Expanded);

	/*
	if (nd->Expanded)
	{
		TreeView_Browser->AutoExpand = true;
	}
	else
	{
	   TreeView_Browser->AutoExpand = false;
	}
	*/

	int type = OBJ_TYPE_NONE;

	GLSystem->ProcBrowserСlick(nd, &type);



	switch (type)
	{

		case OBJ_TYPE_SYST:

			break;

		case OBJ_TYPE_PLCE:

			break;

		case OBJ_TYPE_PORT:

			AdjustPort();
			//nd = GLSystem->GetCurPr()->GetNode();

			break;

		case OBJ_TYPE_SNSR:
			AdjustSensor();
			break;

		default:

			;
	}


}
//---------------------------------------------------------------------------

void __fastcall TForm_General::TreeView_BrowserMouseDown(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{   /*
    if (Button == mbLeft && Shift.Contains(ssDouble)) {
        TTreeView* treeView = dynamic_cast<TTreeView*>(Sender);
        if (treeView) {
            TTreeNode* node = treeView->GetNodeAt(X, Y);
            if (node) {
                // Двойной щелчок по узлу дерева
				node->Expand(  !node->Expanded);
            }
        }
	} */
}

//---------------------------------------------------------------------------


void __fastcall TForm_General::ToolButton_startClick(TObject *Sender)
{
		if (g_system_monitoring_run == false)
		{
			g_system_monitoring_run = true;
			MainMonitorThread->resume();
			ToolButton_start->ImageIndex = 8;
			StatusBar->Panels->Items[4]->Text = L"monitoring run ...";
			TreeView_Browser->Enabled = false;
		}
		else
		{
			g_system_monitoring_run = false;
			MainMonitorThread->suspend();
			ToolButton_start->ImageIndex = 7;
			StatusBar->Panels->Items[4]->Text = L"monitoring STOP ...";
			TreeView_Browser->Enabled = true;
        }
}
//---------------------------------------------------------------------------

void refresh_system_dashboard(void)
{
    ПДports_list = NULL;
	sensors_list = NULL;
	data_list = NULL;
}

