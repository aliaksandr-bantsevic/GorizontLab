//---------------------------------------------------------------------------

#pragma hdrstop

#include "GL_System.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#include <list>
#include "GL_Place.h"
#include "GL_Port.h"
#include "GL_Sensor.h"

#include <System.SysUtils.hpp>
//---------------------------------------------------------------------------

TGLSystem::TGLSystem()
{
   name = L"GorizontLab Monitoring System";
   mark = L"...";
   node = NULL;
}

TGLSystem::TGLSystem(TTreeView* t, TXMLDocument* xmlDoc)
{
   name = L"GorizontLab Monitoring System";
   mark = L"...";
   tree = t;
   node = this->tree->Items->Add(NULL, this->name);

   SysConfMgr = new TSysConfMgr();
   SysConfMgr->SetXMLDoc(xmlDoc);
   DBMgr = new TDataBaseMgr();
}

TGLSystem::~TGLSystem()
{

}

TGLPlace* TGLSystem::add_place(WideString nm)
{
	int nmb = place_list.count() + 1;
	pl = new TGLPlace(nm, NULL, place_list.count() + 1);

	//the place shall have unique name & number in the list
	if (place_list.add(pl) != 0)
	{
		delete pl;
		pl = NULL;
		//return -1;  //fail to add the place
	}
	else
	{
	//  create the place title in the browser & create tree node
		WideString ss;
		ss.printf(L"%d [", nmb);
		ss = ss+nm;
		ss = ss+L"]";
		TTreeNode* ndd = tree->Items->AddChild(node, ss); ndd->ImageIndex = 1; ndd->SelectedIndex = 1;

		pl->SetTree(tree);
		pl->SetNode(ndd);

		////// !!!

		//pl->add_port(L"COM_1");
		//pl->add_port(L"COM_2");
		//pl->add_port(L"COM_3");

		node->Expand(true);
		//return 0;
	}

	return pl;
}

TTreeNode* TGLSystem::get_node(void)
{
	return node;
}

void TGLSystem::View(BYTE state)
{
	node->ImageIndex = 0;
	node->SelectedIndex = 0;  node->SelectedIndex = 0;
}

/*
TGLPlace* TGLSystem::GetPlace(int n)
{
	TGLPlace* pl = NULL;

	pl = place_list.find(n);

	return pl;
}
*/

TObject* TGLSystem::GetBrowserElement(TTreeNode* nd, int* type)
{
	*type = OBJ_TYPE_NONE;
	TObject* res = NULL;

	cur_pl = NULL;
	cur_pr = NULL;
	cur_sn = NULL;

	if (nd == this->node)
	{
		*type = OBJ_TYPE_SYST;
		return  (TObject*)this;
	}
	else if ((res = (TObject*)place_list.find(nd)) != NULL)
	{
		*type = OBJ_TYPE_PLCE;
		cur_pl = (TGLPlace*)res;
		return res;
	}
	else
	{
		TGLPlace* pl = NULL;
		TGLPort* pr = NULL;
		TGLSensor* sn = NULL;

		for (auto itpl : place_list.m_list)
		{
			if ((res = (TObject*)itpl->port_list.find(nd)) != NULL)
			{
				*type = OBJ_TYPE_PORT;

				cur_pl = itpl;
				cur_pr = (TGLPort*) res;

				return res;
			}

			for (auto itpr : itpl->port_list.m_list)
			{
				if ((res = (TObject*)itpr->sensor_list.find(nd)) != NULL)
				{
					*type = OBJ_TYPE_SNSR;

					cur_pl = (TGLPlace*) itpl;
					cur_pr = (TGLPort*) itpr;
					cur_sn = (TGLSensor*) res;

					return res;
				}
			}

		}
	}

	return res;
}

void TGLSystem::ProcBrowserСlick(TTreeNode* nd, int* tp)
{
	int type = OBJ_TYPE_NONE;
	TObject* obj = NULL;
	WideString ss;

	cur_pl = NULL;
	cur_pr = NULL;
	cur_sn = NULL;
	 
	 obj = GetBrowserElement(nd, &type);
	 {

		switch (type)
		{
			case OBJ_TYPE_SYST:

				ss.printf(L"СИСТЕМА: %s", this->name.c_bstr());

			break;

			case OBJ_TYPE_PLCE:

				cur_pl = (TGLPlace*)obj;
				ss.printf(L"МЕСТО: %d %s", cur_pl->num, cur_pl->name.c_bstr());

			break;

			case OBJ_TYPE_PORT:

				cur_pr = (TGLPort*)obj;
				ss.printf(L"ПОРТ: %d.%d %s", cur_pr->plnum, cur_pr->num, cur_pr->name.c_bstr());

			break;

			case OBJ_TYPE_SNSR:

				cur_sn = (TGLSensor*)obj;
				ss.printf(L"ДАТЧИК: %d.%d.%d %s", cur_sn->plnum, cur_sn->prnum, cur_sn->num, cur_sn->name.c_bstr());

			break;

			default:;

		}

	 }

	*tp =  type;
	//ShowMessage(ss);
    g_ws_msg = ss;

}

TGLPort* TGLSystem::add_port(WideString nm)
{
   if (cur_pl != NULL)
   {
	   return cur_pl->add_port(nm);
   }

   return NULL;
}

TGLSensor* TGLSystem::add_sensor(WideString nm)
{
   if ((cur_pr != NULL) &&  (cur_pl != NULL))
   {
	   return cur_pr->add_sensor(nm, cur_pl->num);
   }

   return NULL;
}

int TGLSystem::SaveConf(void)
{
   TXMLDocument* XMLDoc = SysConfMgr->GetXMLDoc();

   if (XMLDoc != nullptr)
   {
		XMLDoc->ChildNodes->Clear();
   }

   XMLDoc->Options = XMLDoc->Options << doNodeAutoIndent;
   XMLDoc->Version = "1.0";
   XMLDoc->Encoding = "UTF-16"; // Устанавливаем кодировку на UTF-16

   _di_IXMLNode RootNode = XMLDoc->AddChild("system");
   RootNode->Attributes["name"] = name.c_bstr(); // Устанавливаем атрибут

   int plid = 0;
   int prid = 0;
   int snid = 0;

   WideString sid ("");



	for (auto itpl : place_list.m_list)
	{
		_di_IXMLNode ObjectNode = RootNode->AddChild("object");

		sid.printf(L"%d", ++plid);
		ObjectNode->Attributes["ID"] = sid;
		ObjectNode->AddChild("name")->Text = itpl->name;

		prid = 0;

		for (auto itpr : itpl->port_list.m_list)
		{
			_di_IXMLNode PortNode = ObjectNode->AddChild("port");

			sid.printf(L"%d.%d", plid, ++prid);
			PortNode->Attributes["ID"] = sid;
			PortNode->AddChild("name")->Text = itpr->name;

            snid = 0;

			for (auto itsn : itpr->sensor_list.m_list)
			{
				_di_IXMLNode SensorNode = PortNode->AddChild("sensor");

				sid.printf(L"%d.%d.%d", plid, prid, ++snid);
				SensorNode->Attributes["ID"] = sid;
				SensorNode->AddChild("name")->Text = itsn->GetName();
				WideString s("");

				//s.printf(L"%03d", itsn->GetBaud());
				//SensorNode->AddChild("baud")->Text = s;
			}
		}

	}

   TCHAR* path = SysConfMgr->GetXMLDocPath();
   TCHAR pathb [1024];
   wcscpy(pathb, SysConfMgr->GetXMLDocPath());
   wcscat(pathb, L".back");

   ::DeleteFile(pathb);
   ::CopyFile(path, pathb, true);
   ::DeleteFile(path);

   Sleep(100);

   XMLDoc->SaveToFile(path);

   SysConfMgr->SaveCurSysName();

   console(L"Система", L"Сохранена текущая конфигурация");

   return 0;
}

int TGLSystem::LoadConf(void)
{
   TXMLDocument* XMLDoc = SysConfMgr->GetXMLDoc();

   int plid = 0;
   int prid = 0;
   int snid = 0;

   WideString sid ("");

   cur_pl = NULL;
   cur_pr = NULL;
   cur_sn = NULL;

   m_port_proc_thread_list.clear();

   try
   {
	  TCHAR* path = SysConfMgr->GetXMLDocPath();
	 _di_IXMLDocument xmlDoc = LoadXMLDocument(path);
	 _di_IXMLNode rootNode = xmlDoc->DocumentElement;

	 for (int i = 0; i < rootNode->ChildNodes->Count; ++i)
	 {
		_di_IXMLNode objectNode = rootNode->ChildNodes->Nodes[i];
		_di_IXMLNode nameNode = objectNode->ChildNodes->FindNode("name");
		if (nameNode)
		{
			cur_pl = add_place (nameNode->Text);

		}
		else
		{
			//std::cout << "Тег name не найден в узле objectNode." << std::endl;
		}

		for (int i = 0; i < objectNode->ChildNodes->Count; ++i)
		{
			_di_IXMLNode portNode = objectNode->ChildNodes->Nodes[i];
			_di_IXMLNode nameNode = portNode->ChildNodes->FindNode("name");
			if (nameNode)
			{
				cur_pr = add_port (nameNode->Text);

				TPortProcThread* ppt = new TPortProcThread(true, cur_pr);
				m_port_proc_thread_list.push_back(ppt);

				Sleep(1);
			}
			else
			{
			//std::cout << "Тег name не найден в узле objectNode." << std::endl;
			}

			for (int i = 0; i < portNode->ChildNodes->Count; ++i)
			{
				TGLSensor* sn;

				_di_IXMLNode sensorNode = portNode->ChildNodes->Nodes[i];
				_di_IXMLNode nameNode = sensorNode->ChildNodes->FindNode("name");
				if (nameNode)
				{
					sn =add_sensor (nameNode->Text);
				}
				else
				{
				//std::cout << "Тег name не найден в узле objectNode." << std::endl;
				}

				//_di_IXMLNode baudNode = sensorNode->ChildNodes->FindNode("baud");
				//if (baudNode)
				//{
				//	sn->SetBaud(StrToIntDef(baudNode->Text, 0));
				//}
				//else
				//{
				//std::cout << "Тег name не найден в узле objectNode." << std::endl;
				//}
			}

		}
     }
	 //View();

	 Sleep(1);
   }
   catch(...)
   {
	   ShowMessage(L"Конфигурация не найдена и будет создана заново!");
   }



   return 0;
}

TGLSensor* TGLSystem::GetCurSn(void)
{
	return cur_sn;
}

int TGLSystem::ReDraw(void)
{
	tree->Items->Clear();

	node = this->tree->Items->Add(NULL, this->name);

	int plnum = 0;
	int prnum = 0;
	int snnum = 0;

	for (auto itpl : place_list.m_list)
	{
		itpl->ReDraw(node, ++plnum);

		prnum = 0;

		for (auto itpr : itpl->port_list.m_list)
		{
			itpr->ReDraw(itpl->GetNode(), plnum, ++prnum);

			snnum = 0;

			for (auto itsn : itpr->sensor_list.m_list)
			{
				itsn->ReDraw(itpr->GetNode(), plnum, prnum, ++snnum);
			}


		}
	}

	return 0;
}

int TGLSystem::delete_sensor(void)
{

	cur_pr->sensor_list.remove(cur_sn->name);

	//delete cur_sn;

	ReDraw();

	return 0;
}

int TGLSystem::delete_port(void)
{

	cur_pl->port_list.remove(cur_pr->name);

	//delete cur_pr;

	ReDraw();

	return 0;
}

int TGLSystem::delete_place(void)
{

	place_list.remove(cur_pl->name);

	//for (auto itpr : cur_pl->port_list.m_list)
	//{
	//	delete itpr;
	//}

	//delete cur_pl;

	ReDraw();

	return 0;
}

TCHAR* TGLSystem::GetConfPath(void)
{
	return SysConfMgr->GetXMLDocPath();
}

int TGLSystem::CreateConf(TSaveDialog* dlg)
{
	if (SysConfMgr->CreateConf(dlg) != 0) return -1;

	Clear();
	SaveConf();
	LoadConf();
	//ReDraw();

	WideString s = L"Создана конфигурация ";

	s = s + SysConfMgr->GetCurConfPath();

	console(L"Система", s);

	return 0;
}

int TGLSystem::OpenConf(TOpenDialog* dlg)
{
	if (SysConfMgr->OpenConf(dlg) != 0) return -1;

	Clear();
	LoadConf();
	//ReDraw();

	WideString s = L"Загружена конфигурация ";

	s = s + SysConfMgr->GetCurConfPath();

	console(L"Система", s);

   return 0;
}

int TGLSystem::Clear(void)
{

   place_list.m_list.clear();

   tree->Items->Clear();
   node = this->tree->Items->Add(NULL, this->name);

   return 0;
}

int TGLSystem::SaveConf(TSaveDialog* dlg)
{
	if (SysConfMgr->SaveConf(dlg) != 0) return -1;

	Clear();
	LoadConf();
	//ReDraw();
	WideString s = L"Сохранена конфигурация ";

	s = s + SysConfMgr->GetCurConfPath();

	console(L"Система", s);

   return 0;
}

void TGLSystem::run_engine_start ()
{
	for (auto ppt : m_port_proc_thread_list)
	{
	   ppt->start();
	}
}

void TGLSystem::run_engine_suspend ()
{
	for (auto ppt : m_port_proc_thread_list)
	{
	   ppt->suspend();
	}
}

void TGLSystem::run_engine_resume ()
{
	for (auto ppt : m_port_proc_thread_list)
	{
	   ppt->resume();
	}
}

void TGLSystem::set_console(TListBox* list)
{
	list_console = list;
}

void TGLSystem::console(WideString  obj, WideString  msg)
{
   WideString s = FormatDateTime(L"[dd-mm-yyyy hh:nn:ss] ", Now());
   s = s + L"[" + obj + L"] ";
   s = s + msg;

   list_console->Items->Add(s);

   FILE* f = _wfopen(SysConfMgr->GetLogFilePath(), L"rb");

   if (f == NULL)
   {
		BYTE sgn [] = {0xff, 0xfe};

		fclose(f);
		FILE* f = _wfopen(SysConfMgr->GetLogFilePath(), L"wb");
		fwrite(sgn, 2, 1, f);
		fclose(f);

   }

   f = _wfopen(SysConfMgr->GetLogFilePath(), L"ab");

   s = s + L"\r\n";

   fwrite(s.c_bstr(), wcslen(s.c_bstr())*2, 1, f);

   fclose(f);
}

int TGLSystem::open_DB(void)
{
   if (DBMgr->is_base_open() == false)
   {
		return DBMgr->open_base(SysConfMgr->GetCurBasePath());
   }

   return 0;
}

double x = 23.456;
double y = 569.567;

#pragma synchronous=OFF
#pragma journal_mode=WAL

int TGLSystem::store_sensor_data(TDateTime t)
{

	DBMgr->BEGIN_TRANSACTION();

	for (auto itpl : place_list.m_list)
	{
		for (auto itpr : itpl->port_list.m_list)
		{
			for (auto itsn : itpr->sensor_list.m_list)
			{
               itsn->subst(x,y);

			   DBMgr->save_sensor_data_s(t, itsn);

			   x += 1.23; y += 4.56;
			}
		}
	}

	DBMgr->END_TRANSACTION();
}
