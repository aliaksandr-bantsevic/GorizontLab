//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include "ChartThread.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall TChartThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

__fastcall TChartThread::TChartThread(bool CreateSuspended, TChart* c, TDataStream* d)
	: TThread(CreateSuspended)
{
	chart = c;
	ds = d;
	exit_flag = false;
	draw_flag = false;

	idx = 0;

	for (int i = 0; i < CHART_BUFFER_SIZE_DEFAULT; i++) {

		buf[i] = DATA_LOST_DBL_CONSTANT;
	}
}
//---------------------------------------------------------------------------
void __fastcall TChartThread::Execute()
{
	NameThreadForDebugging(System::String(L"ChartThread"));
	//---- Place thread code here ----

	while (exit_flag == false)
	{
		Sleep(10);

		if (draw_flag) {

			Synchronize(draw_chart);
		}

		Sleep(10);
    }

}
//---------------------------------------------------------------------------

void  __fastcall TChartThread::draw_chart(void)
{
	draw_flag = false;

}

void TChartThread::accept_data(double* d, int len)
{
	for (int i = 0; i < len; i++)
	{
		buf[idx++] = d [i];

		if (idx == CHART_BUFFER_SIZE_DEFAULT) {

			idx = CHART_BUFFER_SIZE_DEFAULT - 1;

			for (int j = 1; j < CHART_BUFFER_SIZE_DEFAULT; j++) {

				buf [j-1] = buf [j];
			}

		}
	}
}

void TChartThread::exit(void)
{
	exit_flag = true;
}

void TChartThread::draw(void)
{
	draw_flag = true;
}
