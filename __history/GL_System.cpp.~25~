//---------------------------------------------------------------------------

#pragma hdrstop

#include "GL_System.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#include <list>
#include "GL_Place.h"

//---------------------------------------------------------------------------

TGLSystem::TGLSystem()
{
   name = L"GorizontLab Monitoring System";
   mark = L"...";
   node = NULL;
}

TGLSystem::TGLSystem(TTreeView* t)
{
   name = L"GorizontLab Monitoring System";
   mark = L"...";
   tree = t;
   node = this->tree->Items->Add(NULL, this->name);
}

TGLSystem::~TGLSystem()
{

}

int TGLSystem::add_place(WideString nm)
{
	int nmb = place_list.count() + 1;
	pl = new TGLPlace(nm, NULL, place_list.count() + 1);

	//the place shall have unique name & number in the list
	if (place_list.add(pl) != 0)
	{
		delete pl;
		return -1;  //fail to add the place
	}
	else
	{
	//  create the place title in the browser & create tree node
		WideString ss;
		ss.printf(L"%d [", nmb);
		ss = ss+nm;
		ss = ss+L"]";
		TTreeNode* ndd = tree->Items->AddChild(node, ss); ndd->ImageIndex = 1; ndd->SelectedIndex = 1;

		pl->SetTree(tree);
		pl->SetNode(ndd);

		////// !!!

		pl->add_port(L"COM_1");
		pl->add_port(L"COM_2");
		pl->add_port(L"COM_3");

		node->Expand(true);
		return 0;
	}
}

TTreeNode* TGLSystem::get_node(void)
{
	return node;
}

void TGLSystem::View(BYTE state)
{
	node->ImageIndex = 0;
	node->SelectedIndex = 0;  node->SelectedIndex = 0;
}

/*
TGLPlace* TGLSystem::GetPlace(int n)
{
	TGLPlace* pl = NULL;

	pl = place_list.find(n);

	return pl;
}
*/
